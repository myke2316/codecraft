{
    "courses": [
      {
        "title": "CSS",
        "lessons": [
          {
            "title": "Lesson 1: Introduction to CSS",
            "documents": [
              {
                "title": "What is CSS?",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS stands for <strong>Cascading Style Sheets</strong>. It is a language used to style web pages."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS enables developers to control the presentation of HTML elements. This includes setting colors, fonts, spacing, and layout."
                  },
                  {
                    "type": "sentence",
                    "text": "While HTML structures the content, CSS is responsible for its visual appearance. This separation helps in maintaining and updating styles efficiently."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS uses rulesets to apply styles. Selectors in CSS target specific HTML elements to style them."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html><html><head><title>Simple web page</title><style>main {width: 400px;height: 150px;padding: 10px;background: lightblue;}h1 {color: brown;}p {font-family: sans-serif;color: black;}</style></head><body><main><h1>CodeCraft</h1><p>My first page</p></main></body></html>",
                    "text": "This example shows how to create a simple webpage with internal styling. The main section is styled to stand out with a light blue background, and the text color and font are adjusted for clarity and aesthetics."
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>main section</strong> sets the dimensions, adds padding, and applies a light blue background color."
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>heading (h1)</strong> changes the text color to brown."
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>paragraph (p)</strong> sets the font family to sans-serif and changes the text color to black."
                  }
                ],
                "locked": true
              },
              {
                "title": "The Role of CSS in Web Design",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS is essential in web design. It controls the presentation and layout of web pages."
                  },
                  {
                    "type": "sentence",
                    "text": "It separates content from design. This separation ensures that HTML handles the content while CSS takes care of the visual aspects."
                  },
                  {
                    "type": "sentence",
                    "text": "With CSS, designers can set styles for various elements like colors and fonts. This makes it easier to maintain a consistent design across pages."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS supports responsive design, allowing web pages to adapt to different screen sizes and devices."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; } header { background-color: lightblue; color: #fff; text-align: center; padding: 25px; border: 5px solid black; } .main-content { max-width: 800px; margin: 20px auto; padding: 25px; border: 5px solid black; text-align: center; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>My Webpage</title><link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"></head><body><header><h1>Welcome to CodeCraft</h1></header><section class=\"main-content\"><p>Sample paragraph on CodeCraft</p></section></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Body:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; }",
                    "supportingcode": "<html><head><title>My Webpage</title><link rel='stylesheet' type='text/css' href='styles.css'></head><body><header><h1>Welcome to CodeCraft</h1></header><section class='main-content'><p>Sample paragraph on CodeCraft</p></section></body></html>",
                    "text": "The body sets the font family to 'Arial', removes default margin and padding. This ensures a clean slate for styling other elements."
                  },
                  {
                    "type": "sentence",
                    "text": "Header:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "header { background-color: lightblue; color: #fff; text-align: center; padding: 25px; border: 5px solid black; }",
                    "supportingcode": "<html><head><title>My Webpage</title><link rel='stylesheet' type='text/css' href='styles.css'></head><body><header><h1>Welcome to CodeCraft</h1></header><section class='main-content'><p>Sample paragraph on CodeCraft</p></section></body></html>",
                    "text": "The header is styled with a light blue background color, white text, centered text alignment, padding for spacing inside the header, and a black border around it. This makes the header stand out and look distinct."
                  },
                  {
                    "type": "sentence",
                    "text": "Main Content:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".main-content { max-width: 800px; margin: 20px auto; padding: 25px; border: 5px solid black; text-align: center; }",
                    "supportingcode": "<html><head><title>My Webpage</title><link rel='stylesheet' type='text/css' href='styles.css'></head><body><header><h1>Welcome to CodeCraft</h1></header><section class='main-content'><p>Sample paragraph on CodeCraft</p></section></body></html>",
                    "text": "The main content area is given a maximum width of 800px to ensure it doesn't stretch too wide. It is centered horizontally with margin: 20px auto, has padding for spacing inside, a black border to define its boundaries, and centered text alignment."
                  }
                ],
                "locked": true
              },
              {
                "title": "Benefits of Using CSS",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS offers several significant benefits that enhance the development and design of web pages:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Separation of Concerns</strong>: CSS allows for the separation of content (HTML) from design (CSS), making it easier to manage and update styles without affecting the content structure."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Consistency</strong>: Using CSS, developers can apply a consistent style across multiple web pages or even an entire website, ensuring a unified look and feel."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Maintenance</strong>: Changes to the design can be made in one place (the CSS file), and these changes will be reflected across all pages that use the CSS file, simplifying maintenance."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Performance</strong>: External CSS files can be cached by browsers, reducing the amount of data that needs to be loaded on subsequent visits and improving page load times."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Responsive Design</strong>: CSS media queries enable the creation of responsive designs that adapt to different screen sizes and devices, enhancing the user experience across various platforms."
                  }
                ],
                "locked": true
              },
              {
                "title": "Types of CSS",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS can be implemented in several ways within an HTML document:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Inline CSS</strong>: Inline CSS involves applying styles directly to individual HTML elements using the style attribute. This method allows for specific styling of elements within the HTML document and overrides any external or internal styles. Below is an example of inline CSS:"
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Inline CSS</title>\n</head>\n<body>\n    <p style=\"color:#009900; \n              font-size:50px; \n              font-style:italic; \n              text-align:center;\">\n        GeeksForGeeks\n    </p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Internal or Embedded CSS</strong>: Internal CSS is defined within the HTML document’s <style> element. This method applies styles to specified HTML elements within the same HTML file. The CSS rules are included in the <style> tag inside the <head> section. Below is an example of internal CSS:"
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Internal CSS</title>\n    <style>\n        .main {\n            text-align: center;\n        }\n\n        .GFG {\n            color: #009900;\n            font-size: 50px;\n            font-weight: bold;\n        }\n\n        .geeks {\n            font-style: bold;\n            font-size: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"main\">\n        <div class=\"GFG\">GeeksForGeeks</div>\n        <div class=\"geeks\">\n            A computer science portal for geeks\n        </div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>External CSS</strong>: External CSS is defined in a separate file with a .css extension and linked to the HTML document using the <link> tag. This method ensures that styles can be applied across multiple web pages from a single file. Below is an example of external CSS:"
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>External CSS</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"main\">\n        <div class=\"GFG\">GeeksForGeeks</div>\n        <div id=\"geeks\">\n            A computer science portal for geeks\n        </div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Explanation:\n- Inline CSS has the highest priority and overrides other methods of CSS.\n- Internal CSS applies styles to the document in which it is defined but is less reusable.\n- External CSS allows for styles to be applied across multiple documents, ensuring consistency."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What does CSS stand for?",
                "options": [
                  "Cascading Style Sheets",
                  "Computer Style Sheets",
                  "Creative Style Systems",
                  "Custom Style Sheets"
                ],
                "correctAnswer": "Cascading Style Sheets",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following is NOT a primary purpose of CSS?",
                "options": [
                  "Styling HTML documents",
                  "Controlling webpage layout",
                  "Structuring webpage content",
                  "Setting colors and fonts"
                ],
                "correctAnswer": "Structuring webpage content",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does CSS apply styles to HTML elements?",
                "options": [
                  "Using tags",
                  "Using attributes",
                  "Using rulesets",
                  "Using scripts"
                ],
                "correctAnswer": "Using rulesets",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following is a way to apply CSS styles to HTML elements?",
                "options": [
                  "Selectors",
                  "Annotations",
                  "Markers",
                  "Filters"
                ],
                "correctAnswer": "Selectors",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the main advantage of using CSS over inline styling?",
                "options": [
                  "Higher specificity",
                  "Less control over layout",
                  "Separation of content from design",
                  "Limited styling options"
                ],
                "correctAnswer": "Separation of content from design",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the primary benefit of separating HTML and CSS?",
                "options": [
                  "Increased HTML size",
                  "Easier maintenance and updates",
                  "Limited styling options",
                  "Complexity in coding"
                ],
                "correctAnswer": "Easier maintenance and updates",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property sets the font of an element?",
                "options": [
                  "font-size",
                  "font-family",
                  "text-align",
                  "color"
                ],
                "correctAnswer": "font-family",
                "points": 2,
                "locked": true
              },
              {
                "question": "How do you center-align text in an element using CSS?",
                "options": [
                  "text-align: center;",
                  "text-align: left;",
                  "margin: auto;",
                  "align-items: center;"
                ],
                "correctAnswer": "text-align: center;",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property sets the background color of an element?",
                "options": [
                  "background-color",
                  "color",
                  "background-image",
                  "background-size"
                ],
                "correctAnswer": "background-color",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the 'border' property do in CSS?",
                "options": [
                  "Sets the text color",
                  "Adds space inside an element",
                  "Defines a border around an element",
                  "Changes the font style"
                ],
                "correctAnswer": "Defines a border around an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is a key benefit of using external CSS files?",
                "options": [
                  "Increased page size",
                  "Easier to manage styles across multiple pages",
                  "Less control over styling",
                  "Slower page load times"
                ],
                "correctAnswer": "Easier to manage styles across multiple pages",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property is used to define the text color?",
                "options": [
                  "background-color",
                  "color",
                  "border",
                  "padding"
                ],
                "correctAnswer": "color",
                "points": 2,
                "locked": true
              },
              {
                "question": "How can CSS help with responsive design?",
                "options": [
                  "By using fixed sizes",
                  "By implementing media queries",
                  "By using inline styles",
                  "By avoiding external stylesheets"
                ],
                "correctAnswer": "By implementing media queries",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which method of CSS is applied directly to HTML elements?",
                "options": [
                  "Inline CSS",
                  "Internal CSS",
                  "External CSS",
                  "Embedded CSS"
                ],
                "correctAnswer": "Inline CSS",
                "points": 2,
                "locked": true
              },
              {
                "question": "Where is internal CSS defined?",
                "options": [
                  "In the HTML document’s <style> tag",
                  "In an external CSS file",
                  "Within HTML attributes",
                  "In a JavaScript file"
                ],
                "correctAnswer": "In the HTML document’s <style> tag",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Internal CSS: Basic HTML Styling",
                "description": "Create a basic HTML page with internal CSS styles.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Create an HTML page with the following elements and styles:\n1. Title: The page title should be 'Internal CSS Example'.\n2. Heading: Include an <h1> element with the text 'Welcome to Internal CSS'. Style this heading to be blue using internal CSS.\n3. Paragraph: Add a <p> element with the text 'This is a paragraph styled with internal CSS.'. Style this paragraph to have a font size of 16px using internal CSS.\n\nAll CSS styles should be written inside a <style> tag in the <head> section.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <style>\n        /* Add your internal CSS here */\n    </style>\n</head>\n<body>\n    <h1></h1>\n    <p></p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Internal CSS Example</title><style>h1 { color: blue; } p { font-size: 16px; }</style></head><body><h1>Welcome to Internal CSS</h1><p>This is a paragraph styled with internal CSS.</p></body></html>",
                    "required": [
                      "<title>Internal CSS Example</title>",
                      "<h1>Welcome to Internal CSS</h1>",
                      "h1 { color: blue; }",
                      "<p>This is a paragraph styled with internal CSS.</p>",
                      "p { font-size: 16px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Inline CSS: Style a Single Element",
                "description": "Apply CSS styles directly to HTML elements using inline CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Create an HTML page with the following elements and styles:\n1. Title: The page title should be 'Inline CSS Example'.\n2. Heading: Include an <h1> element with the text 'Styled Heading with Inline CSS'. Apply inline CSS to set its color to red.\n3. Paragraph: Add a <p> element with the text 'Styled paragraph text with inline CSS.'. Apply inline CSS to set its font size to 18px.\n\nAll styles should be applied directly within the HTML elements using the style attribute.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <h1 style=''></h1>\n    <p style=''></p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Inline CSS Example</title></head><body><h1 style='color: red;'>Styled Heading with Inline CSS</h1><p style='font-size: 18px;'>Styled paragraph text with inline CSS.</p></body></html>",
                    "required": [
                      "<title>Inline CSS Example</title>",
                      "<h1 style='color: red;'>Styled Heading with Inline CSS</h1>",
                      "<p style='font-size: 18px;'>Styled paragraph text with inline CSS.</p>"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "External CSS: Separate Styling",
                "description": "Apply styles to an HTML page using an external CSS file.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Create two files:\n1. HTML File: Create an HTML page with the following elements:\n   - Title: Set the page title to 'External CSS Example'.\n   - Heading: Include an <h1> element with the text 'Styled Heading with External CSS'.\n   - Paragraph: Add a <p> element with the text 'Styled paragraph text with external CSS.'.\n2. CSS File: Create an external CSS file named styles.css with the following styles:\n   - Heading: Set the background color of the <h1> element to lightblue.\n   - Paragraph: Set the margin of the <p> element to 30px.\n\nLink the external CSS file in the HTML document using a <link> tag in the <head> section.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <link rel='stylesheet' type='text/css' href='styles.css'>\n</head>\n<body>\n    <h1></h1>\n    <p></p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>External CSS Example</title><link rel='stylesheet' type='text/css' href='styles.css'></head><body><h1>Styled Heading with External CSS</h1><p>Styled paragraph text with external CSS.</p></body></html>",
                    "required": [
                      "<title>External CSS Example</title>",
                      "<h1>Styled Heading with External CSS</h1>",
                      "<p>Styled paragraph text with external CSS.</p>",
                      "<link rel='stylesheet' type='text/css' href='styles.css'>",
                      "h1 { background-color: lightblue; }",
                      "p { margin: 30px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Combining CSS Methods: Specificity and Overrides",
                "description": "Combine internal, inline, and external CSS to understand specificity and overrides.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Create an HTML page with the following elements and styles:\n1. Title: The page title should be 'CSS Specificity Example'.\n2. Heading: Include an <h1> element with the text 'Styled Heading with CSS Specificity'. Apply inline CSS to set the color to red.\n3. Paragraph: Add a <p> element with the text 'Paragraph styled with internal and external CSS.'. Use internal CSS to set the font size to 20px and the color to darkgray. Use external CSS to set the margin to 30px.\n4. External CSS: Create an external CSS file named styles.css with styles for the paragraph to set the margin to 30px.\n\nCombine inline, internal, and external styles in your HTML document and observe how specificity affects the final appearance of the elements.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <link rel='stylesheet' type='text/css' href='styles.css'>\n    <style>\n        /* Add your internal CSS here */\n    </style>\n</head>\n<body>\n    <h1 style=''></h1>\n    <p class='internal-paragraph'></p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>CSS Specificity Example</title><link rel='stylesheet' type='text/css' href='styles.css'><style>.internal-paragraph { font-size: 20px; color: darkgray; }</style></head><body><h1 style='color: red;'>Styled Heading with CSS Specificity</h1><p class='internal-paragraph' style='margin: 30px;'>Paragraph styled with internal and external CSS.</p></body></html>",
                    "required": [
                      "<title>CSS Specificity Example</title>",
                      "<h1 style='color: red;'>Styled Heading with CSS Specificity</h1>",
                      "<p class='internal-paragraph' style='margin: 30px;'>Paragraph styled with internal and external CSS.</p>",
                      "<style>.internal-paragraph { font-size: 20px; color: darkgray; }</style>",
                      "h1 { color: red; }",
                      ".internal-paragraph { font-size: 20px; color: darkgray; }",
                      "p { margin: 30px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced CSS: Combining Methods with Specificity and Inheritance",
                "description": "Combine internal, inline, and external CSS to test specificity, inheritance, and cascading rules.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Create an HTML page with the following elements and styles:\n1. Title: The page title should be 'Advanced CSS Example'.\n2. Heading: Include an <h1> element with the text 'Advanced CSS Styling'. Apply inline CSS to set the font size to 24px.\n3. Subheading: Add an <h2> element with the text 'Understanding CSS Specificity'. Style this element using internal CSS to set its color to green and font weight to bold.\n4. Paragraph: Add a <p> element with the text 'This is an advanced CSS example.'. Use external CSS to set the background color to lightgray and padding to 10px.\n5. Combined Styles: Apply additional internal CSS to set a global font family to Arial for the entire body. Override this in the <p> element using inline CSS to set the font family to Courier New.\n\nCombine inline, internal, and external styles in your HTML document and observe how specificity, inheritance, and cascading rules affect the final appearance of the elements.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n    <link rel='stylesheet' type='text/css' href='styles.css'>\n    <style>\n        /* Add your internal CSS here */\n    </style>\n</head>\n<body>\n    <h1 style=''></h1>\n    <h2></h2>\n    <p style=''></p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Advanced CSS Example</title><link rel='stylesheet' type='text/css' href='styles.css'><style>body { font-family: Arial; } h2 { color: green; font-weight: bold; }</style></head><body><h1 style='font-size: 24px;'>Advanced CSS Styling</h1><h2>Understanding CSS Specificity</h2><p style='font-family: Courier New;'>This is an advanced CSS example.</p></body></html>",
                    "required": [
                      "<title>CSS Specificity Example</title>",
                      "<h1 style='color: red;'>Styled Heading with CSS Specificity</h1>",
                      "<p class='internal-paragraph' style='margin: 30px;'>Paragraph styled with internal and external CSS.</p>",
                      "<style>.internal-paragraph { font-size: 20px; color: darkgray; }</style>",
                      "h1 { color: red; }",
                      ".internal-paragraph { font-size: 20px; color: darkgray; }",
                      "p { margin: 30px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 2: CSS Syntax and Selectors",
            "documents": [
              {
                "title": "CSS Syntax",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS (Cascading Style Sheets) is used to style HTML elements on a web page. The basic structure of CSS involves three main components: a <strong>selector</strong>, a <strong>property</strong>, and a <strong>value</strong>."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS Structure:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "selector {\n  property: value;\n}"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Selector</strong>: This targets the HTML element you want to style. It can be any HTML tag, like <h1>, <p>, or <div>. You can use selectors to apply styles to one or multiple elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Property</strong>: This defines the specific aspect of the HTML element that you want to modify. For example, properties include color, border, and font-size. Each property corresponds to a style attribute that HTML tags possess."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Value</strong>: This is the specific setting assigned to a property. For example, the color property could have a value like blue or #FF5733."
                  },
                  {
                    "type": "sentence",
                    "text": "A complete CSS rule consists of a <strong>selector</strong> followed by a <strong>declaration block</strong>."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS Rule Breakdown:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Selector</strong>: Specifies which HTML element(s) the styles should apply to."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Declaration Block</strong>: Enclosed in curly braces {}, this block contains one or more declarations. Each declaration includes a property name and its corresponding value, separated by a colon :. Multiple declarations are separated by semicolons ;."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1 { color: blue; font-size: 24px; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>My Webpage</title><style>h1 { color: blue; font-size: 24px; }</style></head><body><header><h1>Hello CodeCraft</h1></header></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example:"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>selector</strong> h1 targets all <h1> elements."
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>declaration block</strong> contains two declarations: <strong>color</strong> and <strong>font-size</strong>, with their respective values."
                  },
                  {
                    "type": "sentence",
                    "text": "By using CSS, you can control the appearance of elements on your web page, making it visually appealing and easy to read."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>CSS Syntax and Selectors Example</title><style>/* CSS Rule for h1 element */h1 { color: blue; font-size: 24px; } /* CSS Rule for p element */p { color: green; font-size: 16px; } /* CSS Rule for div element with class \"container\" */.container { border: 2px solid black; padding: 10px; }</style></head><body><div class=\"container\"><h1>This is a Heading</h1><p>This is a paragraph inside a container.</p></div><p>This is a paragraph outside the container.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Explanation:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>h1 Selector</strong>: Targets all <h1> elements and applies a blue color and a font size of 24px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>p Selector</strong>: Targets all <p> elements and applies a green color and a font size of 16px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>.container Selector</strong>: Targets all elements with the class \"container\", adding a black border and padding."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Selectors Guide",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS selectors are tools that let you apply styles to HTML elements on your web pages based on various criteria like <strong>ID</strong>, <strong>class</strong>, <strong>type</strong>, <strong>attribute</strong>, and more."
                  },
                  {
                    "type": "sentence",
                    "text": "This guide will explore the details of CSS selectors and explain their important role in improving the user experience of your website."
                  },
                  {
                    "type": "sentence",
                    "text": "By mastering selectors—such as the <strong>universal selector</strong>, <strong>attribute selector</strong>, <strong>pseudo-class selector</strong>, and <strong>combinator selectors</strong>—you can create more dynamic and effective web designs."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS selectors are essential tools for targeting HTML elements and applying styles. They come in various forms, each serving a different purpose:"
                  },
                  {
                    "type": "snippet",
                    "text": "1. Simple Selectors",
                    "code": "Element Selector: Targets elements based on their tag name.\nID Selector: Selects elements using their unique ID.\nClass Selector: Chooses elements based on their class name."
                  },
                  {
                    "type": "snippet",
                    "text": "2. Attribute Selector",
                    "code": "Targets elements based on the presence or value of their attributes."
                  },
                  {
                    "type": "snippet",
                    "text": "3. Pseudo-Class Selector",
                    "code": "Selects elements based on their state or position, like :hover for when an element is being hovered over."
                  },
                  {
                    "type": "snippet",
                    "text": "4. Combinator Selectors",
                    "code": "Defines relationships between elements, such as descendants (using a space) or direct children (using >)."
                  },
                  {
                    "type": "snippet",
                    "text": "5. Pseudo-Element Selector",
                    "code": "Targets and styles specific parts of an element, such as ::before and ::after."
                  },
                  {
                    "type": "sentence",
                    "text": "Example of CSS Selectors: <strong>Element</strong>, <strong>ID</strong>, and <strong>Class</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h2 { color: #2c3e50; /* Dark Blue color */ font-size: 2rem; } p { color: #34495e; /* Grayish Blue color */ background-color: #ecf0f1; /* Light Gray color */ padding: 10px; border-radius: 5px; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>CodeCraft - CSS Selectors Example 1</title><link rel=\"stylesheet\" href=\"style.css\"></head><body><h2>About CodeCraft</h2><p>Discover the world of coding with CodeCraft.</p><div id=\"important-message\">Stay updated with our latest courses!</div><p class=\"highlight\">Don't miss our special offers this month.</p></body></html>",
                    "text": "This example uses an <strong>element selector</strong> to style all <h2> tags with a dark blue color and font size. It also styles all <p> tags with a grayish blue color, a light gray background, padding, and rounded corners."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "#important-message { color: #c0392b; /* Red color */ background-color: #f9e79f; /* Light Yellow background */ padding: 15px; border-radius: 8px; border: 2px solid #e74c3c; /* Red border */ }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>CodeCraft - CSS Selectors Example 2</title><link rel=\"stylesheet\" href=\"style.css\"></head><body><h2>About CodeCraft</h2><p>Discover the world of coding with CodeCraft.</p><div id=\"important-message\">Stay updated with our latest courses!</div><p class=\"highlight\">Don't miss our special offers this month.</p></body></html>",
                    "text": "The <strong>ID selector</strong> applies styles specifically to the <div> with id=\"important-message\", giving it a red color, light yellow background, padding, rounded corners, and a red border."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".highlight { color: #ffffff; /* White color */ font-family: Arial, sans-serif; background-color: #8e44ad; /* Purple color */ padding: 12px; border-radius: 6px; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>CodeCraft - CSS Selectors Example 3</title><link rel=\"stylesheet\" href=\"style.css\"></head><body><h2>About CodeCraft</h2><p>Discover the world of coding with CodeCraft.</p><div id=\"important-message\">Stay updated with our latest courses!</div><p class=\"highlight\">Don't miss our special offers this month.</p></body></html>",
                    "text": "The <strong>class selector</strong> styles all elements with class=\"highlight\" by setting the text color to white, using Arial font, applying a purple background, padding, and rounded corners."
                  },
                  {
                    "type": "sentence",
                    "text": "Example of CSS Selectors: <strong>Attribute</strong> "
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p[class] { background-color: red; /* Red background color for paragraphs with any class attribute */ } p[class=\"third\"] { color: blue; /* Blue color for paragraphs with class 'third' */ }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" href=\"style.css\"><title>CodeCraft - Attribute Selector Example</title></head><body><p class=\"first\">This is a first paragraph.</p><p>This paragraph doesn't have a class attribute.</p><p class=\"third\">This is a third paragraph.</p><p class=\"fourth\">This is a fourth paragraph.</p></body></html>",
                    "text": "In this example, the <strong>attribute selector</strong> <code>p[class]</code> applies a red background color to all <p> elements with any class attribute. The <code>p[class=\"third\"]</code> selector specifically targets <p> elements with the class 'third' and sets their text color to blue."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Pseudo-Class Selectors",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS pseudo-class selectors</strong> are used to apply styles to elements based on their state or position. For example:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".simple-button { padding: 10px 20px; } .simple-button:hover { background-color: lightgray; }",
                    "supportingcode": "<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Simple Hover Example</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <button class=\"simple-button\">Hover Over Me</button> </body> </html>",
                    "text": "1. <strong>.simple-button:</strong> This class provides basic padding for the button. \n2. <strong>.simple-button:hover:</strong> The hover effect changes the background color to lightgray when the button is hovered over."
                  },
                  {
                    "type": "snippet",
                    "text": "The syntax for pseudo-class selectors is: <strong>element:pseudo-class { /* CSS styles */ }</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Here's what each part means: \n1. <strong>element:</strong> Specifies the HTML element.\n2. <strong>pseudo-class:</strong> Defines the specific state or position of the element to target. Pseudo-class selectors are denoted by a colon <strong>:</strong>."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Pseudo-classes</strong> can be categorized as follows:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Structural Pseudo-Classes:</strong> Target elements based on their position, such as :first-child, :last-child, etc."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Structural Pseudo-Classes Example</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n</head>\n<body>\n    <div class=\"container\">\n        <p>First paragraph (should be blue).</p>\n        <p>Second paragraph (should be green).</p>\n        <p>Third paragraph (should be orange).</p>\n        <p>Fourth paragraph (should be red).</p>\n    </div>\n</body>\n</html>",
                    "supportingcode": "/* :first-child - Targets the first child of its parent */\n.container p:first-child {\n    color: blue;\n}\n\n/* :last-child - Targets the last child of its parent */\n.container p:last-child {\n    color: red;\n}\n\n/* :nth-child() - Targets elements based on their position */\n.container p:nth-child(2) {\n    color: green;\n}\n\n.container p:nth-child(3) {\n    color: orange;\n}",
                    "text": "1. <strong>:first-child:</strong> This pseudo-class selects the first <p> element within the .container class and sets its text color to blue. \n2. <strong>:last-child:</strong> This pseudo-class selects the last <p> element within the .container class and sets its text color to red. \n3. <strong>:nth-child(n):</strong> This pseudo-class targets elements based on their index. For instance, :nth-child(2) selects the second <p> element and colors it green, while :nth-child(3) selects the third <p> element and colors it orange."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS not Pseudo-Class:</strong> The not pseudo-class selector styles the elements that do not match the user-defined selector."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>CodeCraft CSS Example</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n</head>\n<body>\n    <div>\n        <p>This is the first paragraph.</p>\n        <p class=\"special-paragraph\">This is a special paragraph.</p>\n        <p>This is the third paragraph.</p>\n    </div>\n</body>\n</html>",
                    "supportingcode": "p:not(.special-paragraph) {\n    color: blue; \n}",
                    "text": "1. <strong>p:not(.special-paragraph):</strong> This CSS selector targets all <p> elements that do not have the class special-paragraph. It uses the :not() pseudo-class to exclude elements with the specified class."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS empty Pseudo-Class:</strong> The empty pseudo-class selector styles every element that has no children."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>CSS :empty Pseudo-Class Example</title>\n    <link rel=\"stylesheet\" href=\"style.css\" />\n</head>\n<body>\n    <!-- Empty div -->\n    <div class=\"empty-box\"></div>\n\n    <!-- Non-empty div -->\n    <div class=\"filled-box\">\n        <p>This div contains some text.</p>\n    </div>\n</body>\n</html>",
                    "supportingcode": "div:empty {\n    width: 100px;\n    height: 20px;\n    background-color: blue;\n}",
                    "text": "1. <strong>HTML:</strong>\n   <div class=\"empty-box\"></div>: An empty <div> with the class empty-box. This element will be styled by the CSS rule.\n   <div class=\"filled-box\">: A non-empty <div> containing a <p> element with text. This element will not be affected by the :empty pseudo-class rule.\n2. <strong>CSS:</strong>\n   div:empty: This selector targets any <div> elements that do not have any child elements or content."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Link Pseudo-Classes:</strong> Style links based on their state, like :link, :visited, etc."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Link Pseudo-Classes Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <h1>Link Pseudo-Classes Example</h1>\n  <p>Click on the links below to see different styles applied:</p>\n  <ul>\n    <li><a href=\"#\" class=\"unvisited\">Unvisited Link</a></li>\n    <li><a href=\"#\" class=\"visited\">Visited Link</a></li>\n    <li><a href=\"#\" class=\"hover\">Hover Over This Link</a></li>\n    <li><a href=\"#\" class=\"active\">Click This Link</a></li>\n    <li><a href=\"#\" class=\"focus\">Focus on This Link</a></li>\n  </ul>\n</body>\n</html>",
                    "supportingcode": "/* Styles for unvisited links */\na:link {\n  color: blue;\n  text-decoration: none;\n}\n\n/* Styles for visited links */\na:visited {\n  color: purple;\n  text-decoration: none;\n}\n\n/* Styles for links when hovered */\na:hover {\n  color: red;\n  text-decoration: underline;\n}\n\n/* Styles for links when active */\na:active {\n  color: orange;\n  text-decoration: underline;\n}\n\n/* Styles for links when focused */\na:focus {\n  color: green;\n  outline: 2px solid green;\n}",
                    "text": "1. <strong>a:link:</strong> Styles unvisited links in blue without underlines.\n2. <strong>a:visited:</strong> Styles visited links in purple without underlines.\n3. <strong>a:hover:</strong> Styles links on hover in red with underlines.\n4. <strong>a:active:</strong> Styles links when clicked in orange with underlines.\n5. <strong>a:focus:</strong> Styles focused links with a green outline and color."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>UI Pseudo-Classes:</strong> Apply styles based on the state of form elements, such as :enabled, :disabled, etc."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>UI Pseudo-Classes Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <h1>UI Pseudo-Classes Example</h1>\n  <form>\n    <label for=\"name\">Name (Required):</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    <label for=\"email\">Email (Optional):</label>\n    <input type=\"email\" id=\"email\" name=\"email\">\n    <label for=\"subscribe\">Subscribe:</label>\n    <input type=\"checkbox\" id=\"subscribe\" name=\"subscribe\">\n    <label for=\"comments\">Comments:</label>\n    <textarea id=\"comments\" name=\"comments\"></textarea>\n    <label for=\"options\">Options:</label>\n    <select id=\"options\" name=\"options\">\n      <option value=\"\">Select an option</option>\n      <option value=\"option1\">Option 1</option>\n      <option value=\"option2\">Option 2</option>\n    </select>\n    <button type=\"submit\">Submit</button>\n  </form>\n</body>\n</html>",
                    "supportingcode": "/* Enabled form elements */\ninput:enabled, textarea:enabled, select:enabled {\n  background-color: #f0f0f0;\n  border: 1px solid #ccc;\n}\n\n/* Disabled form elements */\ninput:disabled, textarea:disabled, select:disabled {\n  background-color: #e0e0e0;\n  border: 1px solid #aaa;\n  cursor: not-allowed;\n}\n\n/* Checked checkboxes or radio buttons */\ninput:checked {\n  accent-color: #007bff;\n}\n\n/* Focused form elements */\ninput:focus, textarea:focus, select:focus {\n  border-color: #007bff;\n  outline: none;\n  box-shadow: 0 0 3px rgba(0, 123, 255, 0.5);\n}\n\n/* Required form elements */\ninput:required, textarea:required, select:required {\n  border-color: #dc3545;\n}\n\n/* Optional form elements */\ninput:optional, textarea:optional, select:optional {\n  border-color: #28a745;\n}",
                    "text": "1. <strong>input:enabled, textarea:enabled, select:enabled:</strong> Applies styles to enabled form elements with a light background and border.\n2. <strong>input:disabled, textarea:disabled, select:disabled:</strong> Applies styles to disabled form elements with a different background and border, and a not-allowed cursor.\n3. <strong>input:checked:</strong> Styles checked input elements with a specified accent color.\n4. <strong>input:focus, textarea:focus, select:focus:</strong> Styles focused form elements with a border color, outline, and box shadow.\n5. <strong>input:required, textarea:required, select:required:</strong> Styles required form elements with a border color.\n6. <strong>input:optional, textarea:optional, select:optional:</strong> Styles optional form elements with a different border color."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Pseudo-Element Selectors",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS pseudo-element selectors</strong> allow you to style specific parts of HTML elements. For example:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1::first-letter { color: blue; }",
                    "supportingcode": "<!DOCTYPE html><html><head><title>Hello, World!</title><link rel=\"stylesheet\" href=\"styles.css\" /></head><body><h1 class=\"title\">Hello World! </h1></body></html>",
                    "text": "This example styles the first letter of an <strong>h1</strong> element in blue."
                  },
                  {
                    "type": "snippet",
                    "text": "The general syntax for a pseudo-element selector is: <strong>element::pseudo-element { /* CSS styles */ }</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Here's what each part means:<br>1. <strong>element:</strong> The HTML element to style.<br>2. <strong>pseudo-element:</strong> The part of the element you want to style. Pseudo-elements are denoted with a double colon <strong>::</strong> before their name."
                  },
                  {
                    "type": "sentence",
                    "text": "There are the following different types of pseudo-elements in CSS:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>::first-line</strong>: The ::first-line pseudo-element selects and styles the first line of text within HTML elements."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p::first-line { font-weight: bold; color: blue; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CSS Pseudo-Elements</title></head><body><p>We use the ::first-line pseudo-element to style the first line of text within the HTML element. In this example, the first line of this paragraph is styled differently from the rest.</p><p>This is another paragraph to demonstrate the effect. Here, only the first line will be styled with the defined CSS rules, making it easier to observe the pseudo-element's behavior.</p></body></html>",
                    "text": "This example applies bold text and a blue color to only the first line of each paragraph, making it stand out from the rest of the text."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>::first-letter</strong>: The ::first-letter pseudo-element selects and styles the first letter of the text within an element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p::first-letter { font-size: 2em; color: blue; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CSS Pseudo-Elements</title></head><body><p>This is an example paragraph. The first letter is larger and blue.</p></body></html>",
                    "text": "The ::first-letter pseudo-element targets the first letter of the paragraph and applies a font size of 2em and a color of blue. This makes the initial letter stand out more prominently."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>::before</strong>: The ::before pseudo-element inserts content before the actual content of the element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h2::before { content: \"Note: \"; color: green; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CSS Pseudo-Elements</title></head><body><h2>Important Information</h2></body></html>",
                    "text": "The ::before pseudo-element inserts the text \"Note: \" before the content of the <strong>h2</strong> element. The inserted text is styled with a green color."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>::after</strong>: The ::after pseudo-element inserts content after the actual content of the element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h2::after { content: \" (Read more)\"; color: red; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CSS Pseudo-Elements</title></head><body><h2>Important Information</h2></body></html>",
                    "text": "The ::after pseudo-element appends the text \" (Read more)\" after the content of the <strong>h2</strong> element. This additional content is styled with a red color."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>::marker</strong>: The ::marker pseudo-element selects and styles the marker of list elements (like bullets or numbers in lists)."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "li::marker { color: purple; font-size: 1.5em; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CSS Pseudo-Elements</title></head><body><ul><li>Item 1</li><li>Item 2</li></ul></body></html>",
                    "text": "The ::marker pseudo-element targets the marker (bullet point or number) of list items and changes its color to purple and its font size to 1.5em."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>::selection</strong>: The ::selection pseudo-element styles the portion of an element that the user has selected."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p::selection { background-color: greenyellow; color: black; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"stylesheet\" href=\"style.css\"><title>CodeCraft CSS Pseudo-Elements</title></head><body><p>This setup will highlight the selected text within the paragraph with a greenyellow background and black text color, adhering to the CodeCraft styling preferences.</p></body></html>",
                    "text": "When the user selects text within the paragraph, the selected portion will have a greenyellow background color and black text color, providing a clear visual cue for the selected text."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS !important Keyword and Units",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS !important keyword</strong> is used to increase the priority of a CSS property, ensuring it overrides any other declarations."
                  },
                  {
                    "type": "snippet",
                    "text": "Here’s how you can use !important in your CSS:<br><strong>property: value !important;</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Here's what each part means:<br>1. <strong>property:</strong> This represents the CSS property you want to style, such as color, font-size, or margin.<br>2. <strong>value:</strong> This is the value you want to assign to the CSS property, such as red, 16px, or 10px.<br>3. <strong>!important:</strong> This keyword is used to give a CSS declaration the highest priority."
                  },
                  {
                    "type": "sentence",
                    "text": "Example:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p#codecraft-paragraph { color: green; } p { color: blue !important; }",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>CodeCraft</title>\n</head>\n<body>\n    <p>\n      <p id=\"codecraft-paragraph\">Welcome to CodeCraft!</p>\n    </p>\n</body>\n</html>",
                    "text": "In this CSS, the ID selector has a higher specificity, but the <strong>!important</strong> keyword in the element selector overrides it, resulting in the paragraph being displayed in blue."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Units</strong> define the size, length, and measurement of web elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Absolute Units</strong> provide fixed measurements that do not adjust according to the screen size or device. They offer precise control over element dimensions."
                  },
                  {
                    "type": "snippet",
                    "text": "Types of Absolute Units:<br>1. <strong>Pixels (px):</strong> Represents a single pixel on the screen.<br>2. <strong>Inches (in):</strong> Measures one inch in physical size.<br>3. <strong>Centimeters (cm):</strong> Corresponds to one centimeter.<br>4. <strong>Millimeters (mm):</strong> Equivalent to one millimeter.<br>5. <strong>Points (pt):</strong> Represents one point, which is 1/72 of an inch."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Absolute units</strong> are ideal for elements that require exact dimensions, such as buttons, images, and logos."
                  },
                  {
                    "type": "sentence",
                    "text": "Let's look at an example of using pixels (px)."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.box { width: 150px; height: 150px; background-color: blue; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><title>CODECRAFT Pixels</title><link rel=\"stylesheet\" href=\"style.css\" /></head><body><div class=\"box\"></div></body></html>",
                    "text": "In this CSS, the width and height of the div element are fixed at 150 pixels each, regardless of the screen size, with a consistent blue background color."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Relative Units</strong> adjust based on the screen size or the dimensions of other elements on the page."
                  },
                  {
                    "type": "snippet",
                    "text": "Types of Relative Units:<br>1. <strong>Ems (em):</strong> Based on the font size of the parent element.<br>2. <strong>Rems (rem):</strong> Relative to the font size of the root element (typically the <html> tag).<br>3. <strong>Viewport Widths (vw):</strong> Based on the width of the viewport.<br>4. <strong>Viewport Heights (vh):</strong> Based on the height of the viewport.<br>5. <strong>Percentages (%):</strong> Relative to the size of the containing element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Relative units</strong> are advantageous for creating flexible and responsive designs that adapt to various screen sizes and device dimensions."
                  },
                  {
                    "type": "sentence",
                    "text": "Let's look at an example of using percentage (%)."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.parent { width: 400px; height: 100px; background-color: skyblue; border: 2px solid black; } div.child { width: 50%; height: 50%; background-color: lightyellow; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"style.css\" /><title>CODECRAFT Percentage</title></head><body><div class=\"parent\"><div class=\"child\">HI CODECRAFT</div>HELLO USER</div></body></html>",
                    "text": "In this CSS, the .child div will always be 50% of the width and height of the .parent div, using percentage units."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What is the correct CSS syntax to change the text color of an <h1> element to blue?",
                "options": [
                  "h1 {color: blue;}",
                  "h1 {text-color: blue;}",
                  "<h1 style=\"color: blue;\">",
                  "h1: color blue;"
                ],
                "correctAnswer": "h1 {color: blue;}",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which part of the CSS rule h1 { color: blue; } is the <strong>selector</strong>?",
                "options": [
                  "h1",
                  "color",
                  "blue",
                  ";"
                ],
                "correctAnswer": "h1",
                "points": 2,
                "locked": true
              },
              {
                "question": "In the CSS rule p { font-size: 16px; }, what is the <strong>property</strong> being modified?",
                "options": [
                  "p",
                  "font-size",
                  "16px",
                  ";"
                ],
                "correctAnswer": "font-size",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the purpose of the <strong>value</strong> in a CSS rule?",
                "options": [
                  "It specifies which HTML elements to style.",
                  "It defines the style attribute to be modified.",
                  "It assigns a specific setting to a property.",
                  "It separates multiple declarations."
                ],
                "correctAnswer": "It assigns a specific setting to a property.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS rule correctly targets all elements with the class \"container\" and adds a black border?",
                "options": [
                  "container { border: 2px solid black; }",
                  ".container { border: 2px solid black; }",
                  "#container { border: 2px solid black; }",
                  "<container border=\"2px solid black\">"
                ],
                "correctAnswer": ".container { border: 2px solid black; }",
                "points": 2,
                "locked": true
              },
              {
                "question": "In the CSS rule .container { padding: 10px; }, what does the .container <strong>selector</strong> target?",
                "options": [
                  "All <container> elements",
                  "All elements with the class \"container\"",
                  "All elements with the ID \"container\"",
                  "The first <div> element"
                ],
                "correctAnswer": "All elements with the class \"container\"",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following is a valid CSS declaration block?",
                "options": [
                  "{ color: blue, font-size: 24px }",
                  "{ color: blue; font-size: 24px; }",
                  "{ color = blue; font-size = 24px; }",
                  "{ color: blue font-size: 24px }"
                ],
                "correctAnswer": "{ color: blue; font-size: 24px; }",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the following CSS rule do? p { color: green; }",
                "options": [
                  "It changes the background color of all <p> elements to green.",
                  "It changes the text color of all <p> elements to green.",
                  "It changes the border color of all <p> elements to green.",
                  "It adds a green border to all <p> elements."
                ],
                "correctAnswer": "It changes the text color of all <p> elements to green.",
                "points": 2,
                "locked": true
              },
              {
                "question": "How would you target a <div> element with an ID of \"main\" in CSS?",
                "options": [
                  "div main { ... }",
                  "#main { ... }",
                  ".main { ... }",
                  "div#main { ... }"
                ],
                "correctAnswer": "#main { ... }",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following CSS rules applies styles to multiple selectors?",
                "options": [
                  "h1, p { color: red; }",
                  "h1 p { color: red; }",
                  "h1 > p { color: red; }",
                  "h1 + p { color: red; }"
                ],
                "correctAnswer": "h1, p { color: red; }",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS selector is used to target all elements with a specific tag name?",
                "options": [
                  "ID Selector",
                  "Class Selector",
                  "Element Selector",
                  "Attribute Selector"
                ],
                "correctAnswer": "Element Selector",
                "points": 2,
                "locked": true
              },
              {
                "question": "How do you select an HTML element with a unique ID using CSS?",
                "options": [
                  ".id-selector",
                  "#id-selector",
                  "*id-selector*",
                  "id-selector"
                ],
                "correctAnswer": "#id-selector",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS selector is used to apply styles to elements with a specific class name?",
                "options": [
                  "#class-name",
                  ".class-name",
                  "class-name",
                  "*class-name*"
                ],
                "correctAnswer": ".class-name",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the CSS rule h2 { color: #2c3e50; } do?",
                "options": [
                  "Styles all <h2> tags with a red color.",
                  "Styles all <h2> tags with a dark blue color.",
                  "Styles all <p> tags with a dark blue color.",
                  "Styles all elements with the class 'h2' with a dark blue color."
                ],
                "correctAnswer": "Styles all <h2> tags with a dark blue color.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the purpose of using an ID selector like #important-message in CSS?",
                "options": [
                  "To style elements with a specific class name.",
                  "To style all elements with the same tag name.",
                  "To apply styles to a unique element with a specific ID.",
                  "To apply styles to all elements of the same type."
                ],
                "correctAnswer": "To apply styles to a unique element with a specific ID.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the correct syntax for a class selector in CSS?",
                "options": [
                  ".classname",
                  "#classname",
                  "*classname*",
                  "classname"
                ],
                "correctAnswer": ".classname",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS pseudo-element is used to insert content before the content of an element?",
                "options": [
                  "::first-line",
                  "::before",
                  "::after",
                  "::marker"
                ],
                "correctAnswer": "::before",
                "points": 2,
                "locked": true
              },
              {
                "question": "Given the following CSS rule, what does it accomplish? ```css h2::after { content: \" (Read more)\"; color: red; } ```",
                "options": [
                  "Inserts content \" (Read more)\" before all h2 elements",
                  "Styles all h2 elements in red",
                  "Appends \" (Read more)\" after the content of h2 elements",
                  "Underlines all h2 elements"
                ],
                "correctAnswer": "Appends \" (Read more)\" after the content of h2 elements",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does the ::first-letter pseudo-element affect the following CSS rule? ```css p::first-letter { font-size: 2em; color: blue; } ```",
                "options": [
                  "Changes the color of the first line in a paragraph to blue",
                  "Increases the font size of the first word in a paragraph to 2em",
                  "Increases the font size and changes the color of the first letter in a paragraph",
                  "Styles the entire paragraph with a font size of 2em and color blue"
                ],
                "correctAnswer": "Increases the font size and changes the color of the first letter in a paragraph",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which pseudo-element would you use to style the marker of list items?",
                "options": [
                  "::first-letter",
                  "::before",
                  "::marker",
                  "::selection"
                ],
                "correctAnswer": "::marker",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the effect of the CSS rule ```css div::after { content: \"\\2022\"; font-size: 1.5em; } ```?",
                "options": [
                  "Adds a bullet point character after all <div> elements",
                  "Changes the font size of all <div> elements to 1.5em",
                  "Inserts a bullet point before all <div> elements",
                  "Styles the text of <div> elements with a font size of 1.5em"
                ],
                "correctAnswer": "Adds a bullet point character after all <div> elements",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS rule will style all <p> elements with a font size of 14px and a color of red?",
                "options": [
                  "p { font-size: 14px; color: red; }",
                  "p { font-size: 14px; color: #ff0000; }",
                  "p { size: 14px; color: red; }",
                  "p { font-size: 14px color: red; }"
                ],
                "correctAnswer": "p { font-size: 14px; color: red; }",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the purpose of the CSS property 'display: none;'?",
                "options": [
                  "Hides the element and removes it from the layout",
                  "Hides the element but keeps it in the layout",
                  "Makes the element invisible but keeps its space",
                  "Removes the element from the DOM"
                ],
                "correctAnswer": "Hides the element and removes it from the layout",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property is used to change the background color of an element?",
                "options": [
                  "color",
                  "background-color",
                  "bgcolor",
                  "background"
                ],
                "correctAnswer": "background-color",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Basic CSS Selectors",
                "description": "Style a heading and a paragraph using basic CSS selectors.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Create a CSS file with the following styles:\n1. For the <h1> element, set the color to navy and apply the Arial font family with a fallback to sans-serif.\n2. For the <p> element, set the color to gray and apply the Times New Roman font family with a fallback to serif.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Basic CSS Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Welcome to My Page</h1>\n    <p>This is a simple paragraph of text.</p>\n</body>\n</html>",
                  "css": "/* Add your CSS here */",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Basic CSS Selectors</title><link rel=\"stylesheet\" href=\"styles.css\"></head><body><h1>Welcome to My Page</h1><p>This is a simple paragraph of text.</p></body></html>",
                    "required": [
                      "h1 { color: navy; font-family: Arial, sans-serif; }",
                      "p { color: gray; font-family: 'Times New Roman', serif; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Pseudo-Class Selectors",
                "description": "Apply styles to text elements using pseudo-class selectors.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Create a CSS file with the following styles:\n1. For the <h1> element, change the color to green when hovered over.\n2. For the <p> element, change the color to red when focused.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Pseudo-Class Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Hover over this heading</h1>\n    <p>Focus on this paragraph.</p>\n</body>\n</html>",
                  "css": "/* Add your CSS here */",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Advanced CSS Example</title><link rel='stylesheet' type='text/css' href='styles.css'><style>body { font-family: Arial; } h2 { color: green; font-weight: bold; }</style></head><body><h1 style='font-size: 24px;'>Advanced CSS Styling</h1><h2>Understanding CSS Specificity</h2><p style='font-family: Courier New;'>This is an advanced CSS example.</p></body></html>",
                    "required": [
                        "<title>Advanced CSS Example</title>",
                        "<h1 style='font-size: 24px;'>Advanced CSS Styling</h1>",
                        "<h2>Understanding CSS Specificity</h2>",
                        "<p style='font-family: Courier New;'>This is an advanced CSS example.</p>",
                        "<style>body { font-family: Arial; } h2 { color: green; font-weight: bold; }</style>",
                        "p { background-color: lightgray; padding: 10px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Pseudo-Element Selectors",
                "description": "Apply styles using CSS pseudo-element selectors.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Create a CSS file with the following styles:\n1. For the <h1> element, include 'Start - ' before and ' - End' after the text using pseudo-element selectors. Apply a blue color to both pseudo-elements.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS Pseudo-Element Selectors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Check the content</h1>\n    <p>Paragraph text here.</p>\n</body>\n</html>",
                  "css": "/* Add your CSS here */",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>CSS Pseudo-Element Selectors</title><link rel=\"stylesheet\" href=\"styles.css\"></head><body><h1>Check the content</h1><p>Paragraph text here.</p></body></html>",
                    "required": [
                      "h1::before { content: 'Start - '; color: blue; }",
                      "h1::after { content: ' - End'; color: blue; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS !important Keyword and Units",
                "description": "Apply styles using the !important keyword and different CSS units.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Create a CSS file with the following styles:\n1. For the <h1> element, set the color to red and the font size to 24px using the !important keyword.\n2. For the <p> element, set the font size to 1.5em and the margin to 20px.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CSS !important Keyword and Units</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Important Heading</h1>\n    <p>Some text with different units.</p>\n</body>\n</html>",
                  "css": "/* Add your CSS here */",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>CSS !important Keyword and Units</title><link rel=\"stylesheet\" href=\"styles.css\"></head><body><h1>Important Heading</h1><p>Some text with different units.</p></body></html>",
                    "required": [
                      "h1 { color: red !important; font-size: 24px; }",
                      "p { font-size: 1.5em; margin: 20px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced CSS Styling Challenge",
                "description": "Combine multiple CSS techniques, including pseudo-classes, pseudo-elements, and the !important keyword, to create a complex styling effect.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Create a CSS file with the following styles:\n1. For the <h1> element, include 'Start - ' before and ' - End' after the text using pseudo-element selectors. Change the color to purple on hover using the !important keyword.\n2. For the <p> element, set the font size to 1.2rem and margin to 15px.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Advanced CSS Styling Challenge</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Complex Styling</h1>\n    <p>Test paragraph.</p>\n</body>\n</html>",
                  "css": "/* Add your CSS here */",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Advanced CSS Styling Challenge</title><link rel=\"stylesheet\" href=\"styles.css\"></head><body><h1>Complex Styling</h1><p>Test paragraph.</p></body></html>",
                    "required": [
                      "h1::before { content: 'Start - '; color: blue; }",
                      "h1::after { content: ' - End'; color: blue; }",
                      "h1:hover { color: purple !important; }",
                      "p { font-size: 1.2rem; margin: 15px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 3: Mastering CSS Fonts:",
            "documents": [
              {
                "title": "CSS: Font Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS font properties</strong> are essential for customizing the appearance of text in an HTML document. With these properties, you can adjust the font family, size, weight, style, and color to achieve the desired look for your text."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>CodeCraft CSS Font Properties Example</title><style>body { font-family: Helvetica; font-size: 16px; }</style></head><body><h1>Welcome to CodeCraft E-Learning</h1><p>This paragraph demonstrates the use of CSS font properties. The font-family is set to Helvetica, and the font-size is set to 16 pixels.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example:"
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>body</strong> tag is styled with <strong>font-family: Helvetica</strong> and <strong>font-size: 16px</strong>\".\n"
                  },
                  {
                    "type": "sentence",
                    "text": "•The text within the <strong><h1></strong> and <strong><p></strong> tags will be displayed using the Helvetica font at a size of 16 pixels."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS provides several key font properties to modify text attributes:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>font-family:</strong> Specifies the font to be used for the text."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>font-size:</strong> Determines the size of the font."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>font-weight:</strong> Adjusts the thickness or boldness of the font."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>font-style:</strong> Sets the font to italic or oblique."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>font-variant:</strong> Transforms the font to small-caps."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>font-stretch:</strong> Widens or narrows the text."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>line-height:</strong> Defines the space between lines of text."
                  },
                  {
                    "type": "sentence",
                    "text": "By utilizing these properties, you can effectively control the typography of your web content, ensuring it aligns with your design goals and enhances readability."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Font Family",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The CSS <strong>font-family</strong> property is used to set the font face of the text on the webpage."
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<!DOCTYPE html><html><head><style>h1 { font-family: 'Courier New', Courier, monospace; } p { font-family: Arial, Helvetica, sans-serif; }</style></head><body><h1>This is a heading</h1><p>This is a paragraph.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>In this example:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>h1</strong> element uses the font family 'Courier New', Courier, monospace."
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>p</strong> element uses the font family Arial, Helvetica, sans-serif."
                  },
                  {
                    "type": "sentence",
                    "text": "Font families are categorized into two main types:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Generic family:</strong> This refers to groups of fonts that have similar design characteristics. Examples include Serif, sans-serif, and Cursive."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Font family:</strong> This refers to specific font names like Helvetica, Arial, and Georgia."
                  },
                  {
                    "type": "snippet",
                    "text": "The <strong>syntax for the font-family property</strong>is:",
                    "code": "<strong>font-family: family-name | generic-family | initial | inherit;</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•family-name:</strong> Specifies the specific font family, such as Arial or Helvetica."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•generic-family:</strong> Refers to a broader category of fonts with similar design features, such as serif or sans-serif."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•initial:</strong> Sets the font-family to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•inherit:</strong> Inherits the font-family from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "Generic Font Families"
                  },
                  {
                    "type": "sentence",
                    "text": "In CSS, there are five main generic font families:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Serif:</strong> These fonts have small strokes at the edges of each letter, giving a formal and elegant appearance."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Sans-serif:</strong> These fonts have clean lines without small strokes, creating a modern and minimalistic look."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Monospace:</strong> All letters have the same fixed width, resulting in a mechanical appearance."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Cursive:</strong> These fonts mimic human handwriting."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Fantasy:</strong> These are decorative and playful fonts."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body { font-family: Arial, sans-serif; line-height: 1.6; margin: 20px; } h1 { font-size: 2em; margin-bottom: 10px; } p { font-size: 1.2em; margin-bottom: 15px; } .serif { font-family: 'Times New Roman', Times, serif; } .sans-serif { font-family: Arial, Helvetica, sans-serif; } .monospace { font-family: 'Courier New', Courier, monospace; } .cursive { font-family: 'Brush Script MT', Cursive; } .fantasy { font-family: 'Comic Sans MS', Fantasy; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Font Family Example</title><link rel=\"stylesheet\" href=\"styles.css\"></head><body><h1>Generic Font Families</h1><p class=\"serif\">This is a serif font. It has small strokes at the edges of each letter, giving it a formal and elegant appearance.</p><p class=\"sans-serif\">This is a sans-serif font. It has clean lines without small strokes, creating a modern and minimalistic look.</p><p class=\"monospace\">This is a monospace font. All letters have the same fixed width, resulting in a mechanical appearance.</p><p class=\"cursive\">This is a cursive font. It mimics human handwriting, giving it a personal and informal style.</p><p class=\"fantasy\">This is a fantasy font. It's decorative and playful, often used for creative and unconventional design.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Serif Fonts (serif class):</strong> Serif fonts like 'Times New Roman' have small decorative strokes, giving text a formal and classic appearance."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Sans-serif Fonts (sans-serif class):</strong> Sans-serif fonts such as 'Arial' feature clean lines without serifs, creating a modern and straightforward look."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Monospace Fonts (monospace class):</strong> Monospace fonts, like 'Courier New', have uniformly spaced characters, often used for code or typewriter-style text."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Cursive Fonts (cursive class):</strong> Cursive fonts such as 'Brush Script MT' mimic handwriting, adding a personal and artistic touch to the text."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Fantasy Fonts (fantasy class):</strong> Fantasy fonts, like 'Comic Sans MS', are decorative and playful, often used in creative and informal contexts."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Font Size",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>font-size</strong> property in CSS determines the size of the text on your webpage. Whether you’re designing for readability, responsiveness, or accessibility, choosing the right units and values is crucial."
                  },
                  {
                    "type": "sentence",
                    "text": "CSS Font Size Syntax"
                  },
                  {
                    "type": "sentence",
                    "text": "Here’s the basic syntax for the font-size property:"
                  },
                  {
                    "type": "snippet",
                    "code": "font-size: predefined keyword | length | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Predefined Keywords:</strong> Use keywords like small, medium, large to set standard font sizes."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Length:</strong> Specify size using units like px (pixels), em (relative to parent), or pt (points)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Initial:</strong> Resets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Inherit:</strong> Inherits the font size from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Absolute vs. Relative Font Sizes:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Absolute Size:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "•Defines a fixed size, such as in pixels (px) or points (pt)."
                  },
                  {
                    "type": "sentence",
                    "text": "•It does not change based on user settings, which can hinder accessibility."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Relative Size:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "•Defines size relative to surrounding elements or parent element size, using units like em, %, or rem."
                  },
                  {
                    "type": "sentence",
                    "text": "•This method is more flexible and allows users to adjust text size according to their preferences."
                  },
                  {
                    "type": "sentence",
                    "text": "Example 1: Absolute Font Sizes"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body { font-size: 16px; } h1 { font-size: 40px; } h2 { font-size: 30px; } p { font-size: 14px; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Absolute Font Sizes</title><link rel=\"stylesheet\" href=\"styles-absolute.css\"></head><body><h1>Heading 1</h1><h2>Heading 2</h2><p>This is a paragraph with absolute font size.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Explanation:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Body Font Size:</strong> Sets the base font size for the body to 16 pixels. This is the reference size for any absolute sizes."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Heading 1 (h1):</strong> Has a fixed font size of 40 pixels. Regardless of browser settings or screen size, this size remains 40 pixels."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Heading 2 (h2):</strong> Has a fixed font size of 30 pixels. It will always display as 30 pixels tall."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Paragraph (p):</strong> Has a fixed font size of 14 pixels. This size is consistent and does not scale with user settings."
                  },
                  {
                    "type": "sentence",
                    "text": "Example 2: Relative Font Sizes"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body { font-size: 100%; } h1 { font-size: 2.5em; } h2 { font-size: 1.875em; } p { font-size: 0.875em; }",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Relative Font Sizes</title><link rel=\"stylesheet\" href=\"styles-relative.css\"></head><body><h1>Heading 1</h1><h2>Heading 2</h2><p>This is a paragraph with relative font size.</p></body></html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Explanation:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Body Font Size:</strong> Set to 100%, which usually equals 16 pixels. This acts as the base size for relative calculations."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Heading 1 (h1):</strong> Set to 2.5 times the base font size (2.5em). If the body font size is 16 pixels, h1 will be 40 pixels (2.5 * 16px)."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Heading 2 (h2):</strong> Set to 1.875 times the base font size (1.875em). If the body font size is 16 pixels, h2 will be 30 pixels (1.875 * 16px)."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Paragraph (p):</strong> Set to 0.875 times the base font size (0.875em). If the body font size is 16 pixels, p will be 14 pixels (0.875 * 16px)."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Font Weight",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>font-weight</strong> property in CSS is used to control the thickness or boldness of the text on a webpage. This property allows you to adjust the appearance of text to make it lighter or bolder."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the font-weight property is:"
                  },
                  {
                    "type": "snippet",
                    "code": "font-weight: normal | bold | bolder | lighter | number | initial | inherit;",
                    "text": "The syntax for the font-weight property includes keywords, numeric values, and special values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Font Weight Values</strong> Keywords:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>normal:</strong> Default weight, equivalent to 400."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>bold:</strong> A bold weight, equivalent to 700."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>bolder:</strong> Makes the text bolder than its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>lighter:</strong> Makes the text lighter than its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "Numeric Values:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>100:</strong> Ultra-thin text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>200:</strong> Extra-light text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>300:</strong> Light text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>400:</strong> Normal text (standard weight)."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>500:</strong> Medium weight text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>600:</strong> Semi-bold text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>700:</strong> Bold text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>800:</strong> Extra-bold text."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>900:</strong> Ultra-bold text."
                  },
                  {
                    "type": "sentence",
                    "text": "Special Values:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>initial:</strong> Resets the weight to the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>inherit:</strong> Inherits the weight from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "Here is an example that demonstrates the use of different font weights in HTML and CSS:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;700;900&display=swap\");\n\nbody {\n    font-family: \"Roboto\", sans-serif;\n}\n\n.weight-100 {\n    font-weight: 100; /* Ultra-thin text */\n}\n\n.weight-300 {\n    font-weight: 300; /* Light text */\n}\n\n.weight-400 {\n    font-weight: 400; /* Normal text */\n}\n\n.weight-700 {\n    font-weight: 700; /* Bold text */\n}\n\n.weight-900 {\n    font-weight: 900; /* Ultra-bold text */\n}",
                    "supportingcode": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Simple Font Weight Example</title></head><body><p class=\"weight-100\">This is ultra-thin text (weight 100).</p><p class=\"weight-300\">This is light text (weight 300).</p><p class=\"weight-400\">This is normal text (weight 400).</p><p class=\"weight-700\">This is bold text (weight 700).</p><p class=\"weight-900\">This is ultra-bold text (weight 900).</p></body></html>",
                    "text": "This CSS setup shows how different font-weight values affect text thickness using the Roboto font."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Font Stretch",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>font-stretch</strong> property allows you to adjust the width of text, making it appear either narrower or wider. This can help in creating a specific visual style or fitting text into a design."
                  },
                  {
                    "type": "sentence",
                    "text": "Here's how to use different <strong>font-stretch</strong> values:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: \"Arial\", sans-serif;\n}\n\n/* Narrower text */\np.ultra-condensed {\n    font-stretch: ultra-condensed; /* Extremely narrow text */\n}\n\np.extra-condensed {\n    font-stretch: extra-condensed; /* Very narrow text */\n}\n\np.condensed {\n    font-stretch: condensed; /* Narrow text */\n}\n\np.semi-condensed {\n    font-stretch: semi-condensed; /* Slightly narrow text */\n}\n\n/* Default width text */\np.normal {\n    font-stretch: normal; /* Standard width text */\n}\n\n/* Wider text */\np.semi-expanded {\n    font-stretch: semi-expanded; /* Slightly wider text */\n}\n\np.expanded {\n    font-stretch: expanded; /* Wider text */\n}\n\np.extra-expanded {\n    font-stretch: extra-expanded; /* Very wide text */\n}\n\np.ultra-expanded {\n    font-stretch: ultra-expanded; /* Extremely wide text */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Font Stretch Demonstration</title>\n</head>\n<body>\n    <p class=\"ultra-condensed\">This text is ultra-condensed.</p>\n    <p class=\"extra-condensed\">This text is extra-condensed.</p>\n    <p class=\"condensed\">This text is condensed.</p>\n    <p class=\"semi-condensed\">This text is semi-condensed.</p>\n    <p class=\"normal\">This text is normal width.</p>\n    <p class=\"semi-expanded\">This text is semi-expanded.</p>\n    <p class=\"expanded\">This text is expanded.</p>\n    <p class=\"extra-expanded\">This text is extra-expanded.</p>\n    <p class=\"ultra-expanded\">This text is ultra-expanded.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. HTML:"
                  },
                  {
                    "type": "sentence",
                    "text": "• Each paragraph <strong><p></strong> element is given a class that applies a specific <strong>font-stretch</strong> value."
                  },
                  {
                    "type": "sentence",
                    "text": "2. CSS:"
                  },
                  {
                    "type": "sentence",
                    "text": "A. <strong>font-stretch</strong> Values:"
                  },
                  {
                    "type": "sentence",
                    "text": " <strong>• ultra-condensed:</strong> Makes text extremely narrow."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• extra-condensed:</strong> Makes text very narrow."
                  },
                  {
                    "type": "sentence",
                    "text": " <strong>• condensed:</strong> Makes text narrow."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• semi-condensed:</strong> Makes text slightly narrow."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• normal:</strong> Standard text width."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• semi-expanded:</strong> Makes text slightly wider."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• expanded:</strong> Makes text wider."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• extra-expanded:</strong> Makes text very wide."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• ultra-expanded:</strong> Makes text extremely wide."
                  },
                  {
                    "type": "sentence",
                    "text": "b.  <strong>Visual Output:</strong> Each paragraph displays text with varying widths, from very narrow to very wide, based on the <strong>font-stretch</strong> value applied."
                  },
                  {
                    "type": "sentence",
                    "text": "• Note: The effectiveness of <strong>font-stretch</strong> depends on whether the chosen font supports the specified width variations. If not, the property may not have any visible effect."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Text Color Guide",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>color</strong> property in CSS is used to specify the color of text on a webpage. You can define colors using different formats."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: Arial, sans-serif;\n}\n\n/* Named Color */\nh1.named-color {\n    color: green; /* Using a named color */\n}\n\n/* Hexadecimal Color */\nh1.hex-color {\n    color: #ff6347; /* Using a hex color code */\n}\n\n/* RGB Color */\nh1.rgb-color {\n    color: rgb(255, 99, 71); /* Using RGB color format */\n}\n\n/* RGBA Color */\nh1.rgba-color {\n    color: rgba(255, 99, 71, 0.6); /* Using RGBA color format with transparency */\n}\n\n/* HSL Color */\nh1.hsl-color {\n    color: hsl(120, 100%, 50%); /* Using HSL color format */\n}\n\n/* HSLA Color */\nh1.hsla-color {\n    color: hsla(120, 100%, 50%, 0.4); /* Using HSLA color format with transparency */\n}\n\n/* Contrast Examples */\np.good-contrast {\n    color: #333; /* Dark text color */\n    background-color: #f2f2f2; /* Light background color for good contrast */\n}\n\np.poor-contrast {\n    color: #a6a6a6; /* Light text color */\n    background-color: #d9d9d9; /* Light background color, poor contrast */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Text Color Examples</title>\n</head>\n<body>\n    <h1 class=\"named-color\">This text uses a named color.</h1>\n    <h1 class=\"hex-color\">This text uses a hex color.</h1>\n    <h1 class=\"rgb-color\">This text uses an RGB color.</h1>\n    <h1 class=\"rgba-color\">This text uses an RGBA color.</h1>\n    <h1 class=\"hsl-color\">This text uses an HSL color.</h1>\n    <h1 class=\"hsla-color\">This text uses an HSLA color.</h1>\n    <p class=\"good-contrast\">This text has good contrast with its background.</p>\n    <p class=\"poor-contrast\">This text has poor contrast with its background.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Named Color:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": " •Syntax: color: color-name; Example: color: green; "
                  },
                  {
                    "type": "sentence",
                    "text": " • Description: Uses a predefined color name (e.g., 'green'). Easy to use but limited to predefined colors."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Hexadecimal Color:</strong>"
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: #RRGGBB; or color: #RGB; Example: color: #ff6347; "
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Uses a hex code to define the color. The code consists of six hex digits representing red, green, and blue."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>RGB Color:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: rgb(R, G, B); Example: color: rgb(255, 99, 71); "
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Defines color using red, green, and blue values, each ranging from 0 to 255."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>RGBA Color:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: rgba(R, G, B, A); Example: color: rgba(255, 99, 71, 0.6); "
                  },
                  {
                    "type": "sentence",
                    "text": "•  Description: Extends RGB with an alpha value (opacity), where 0 is fully transparent and 1 is fully opaque."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>HSL Color:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: hsl(H, S%, L%); Example: color: hsl(120, 100%, 50%); "
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Defines color using hue (angle 0-360), saturation (0%-100%), and lightness (0%-100%)."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>HSLA Color:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: hsla(H, S%, L%, A); Example: color: hsla(120, 100%, 50%, 0.4);"
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Extends HSL with an alpha value (opacity), similar to RGBA."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>Contrast</strong> "
                  },
                  {
                    "type": "sentence",
                    "text": "7. 1<strong>Good Contrast:</strong> "
                  },
                  {
                    "type": "snippet",
                    "text": "• </strong> Syntax: color: #333; background-color: #f2f2f2; "
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Provides high readability with dark text on a light background."
                  },
                  {
                    "type": "sentence",
                    "text": "7. 2<strong>Poor Contrast:"
                  },
                  {
                    "type": "snippet",
                    "text": "• Syntax: color: #a6a6a6; background-color: #d9d9d9; "
                  },
                  {
                    "type": "sentence",
                    "text": "• Description: Low readability due to light text on a light background."
                  }
                ],
                "locked": true
              },
              {
                "title": "Using Custom Fonts",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The CSS <strong>@font-face</strong> property allows us to specify a custom font for our webpage."
                  },
                  {
                    "type": "sentence",
                    "text": "To use a custom font, you need to define it with the <strong>@font-face</strong> rule. This lets you specify the font files you want to use."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "@font-face {\n    font-family: \"CustomFont\";\n    src: url(\"path/to/customfont.woff2\") format(\"woff2\"),\n         url(\"path/to/customfont.woff\") format(\"woff\");\n}\n\nh1 {\n    font-family: \"CustomFont\", sans-serif;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n\n<h1>This is a heading using the CustomFont.</h1>\n<p>This paragraph also uses the CustomFont.</p>\n\n</body>\n</html>",
                    "text": "This CSS code defines a custom font named 'CustomFont' and applies it to the <strong>h1</strong> element."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>@font-face</strong>: Defines the custom font 'CustomFont'."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>font-family</strong>: Names the custom font ('CustomFont')."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>src</strong>: Provides the path to the font files and their formats. Multiple formats ensure compatibility across different browsers."
                  },
                  {
                    "type": "sentence",
                    "text": "Alternative Techniques for Custom Fonts:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. Using the CSS <strong>@import</strong> Rule: The @import rule in CSS allows you to import fonts from an external source, like Google Fonts, directly into your stylesheet."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\");\n\nbody {\n    font-family: \"Roboto\", sans-serif;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n\n<h1>This is a heading using the Roboto font from Google Fonts.</h1>\n<p>This paragraph uses the Roboto font.</p>\n\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\");</strong>: Imports the Roboto font from Google Fonts."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>font-family: \"Roboto\", sans-serif;</strong>: Applies the imported font to the body of the document."
                  },
                  {
                    "type": "sentence",
                    "text": "2. Using the HTML <strong>&lt;link&gt;</strong> Tag: The <link> tag is used to include stylesheets and can also be used to load fonts from external sources, such as Google Fonts."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: \"Roboto\", sans-serif;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n\n<h1>This is a heading using the Roboto font from Google Fonts.</h1>\n<p>This paragraph uses the Roboto font.</p>\n\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Different font formats have specific characteristics and use cases:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>WOFF/WOFF2 (Web Open Font Format):</strong> Commonly used for web fonts due to compression and faster loading times."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>SVG/SVGZ (Scalable Vector Graphics):</strong> Mainly for vector graphics; not recommended for fonts due to limited browser support."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>EOT (Embedded Open Type):</strong> Older format used primarily by Internet Explorer; not widely supported now."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>OTF/TTF (OpenType/TrueType Fonts):</strong> Versatile formats supported by most modern browsers."
                  },
                  {
                    "type": "sentence",
                    "text": "Considerations:"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Performance:</strong> Custom fonts can affect page load times. Use optimized font files to minimize impact."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Fallback Fonts:</strong> Always specify fallback fonts (e.g., sans-serif) to ensure text is readable if the custom font fails to load."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "Which of the following units is used to define an absolute font size in CSS?",
                "options": [
                  "em",
                  "%",
                  "rem",
                  "Px"
                ],
                "correctAnswer": "Px",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the main difference between absolute and relative font sizes in CSS?",
                "options": [
                  "Absolute sizes adjust based on user settings, while relative sizes do not.",
                  "Absolute sizes remain fixed and do not change based on user settings, while relative sizes adjust based on surrounding elements or parent element size.",
                  "Absolute sizes use units like %, em, and rem, while relative sizes use units like px and pt.",
                  "There is no difference; they both function the same way."
                ],
                "correctAnswer": "Absolute sizes remain fixed and do not change based on user settings, while relative sizes adjust based on surrounding elements or parent element size.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which generic font family is described as having characters with small decorative strokes?",
                "options": [
                  "Sans-serif",
                  "Cursive",
                  "Monospace",
                  "Serif"
                ],
                "correctAnswer": "Serif",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property is used to make text bold?",
                "options": [
                  "font-style",
                  "font-weight",
                  "font-variant",
                  "font-family"
                ],
                "correctAnswer": "font-weight",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property would you use to italicize text?",
                "options": [
                  "font-size",
                  "font-family",
                  "font-weight",
                  "Font-style"
                ],
                "correctAnswer": "font-weight",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property changes text to small-caps?",
                "options": [
                  "font-stretch",
                  "font-variant",
                  "font-weight",
                  "Line-height"
                ],
                "correctAnswer": "font-variant",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following CSS values for font-weight is used to make the text lighter than its parent element?",
                "options": [
                  "bold",
                  "700",
                  "lighter",
                  "300"
                ],
                "correctAnswer": "lighter",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the effect of using font-weight: 900; in CSS?",
                "options": [
                  "Sets the text to normal weight.",
                  "Sets the text to ultra-thin weight.",
                  "Sets the text to ultra-bold weight.",
                  "Sets the text to medium weight."
                ],
                "correctAnswer": "Sets the text to ultra-bold weight.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the primary purpose of the font-stretch property in CSS?",
                "options": [
                  "To adjust the color of the text",
                  "To change the weight of the font",
                  "To modify the width of the text, making it narrower or wider",
                  "To set the text decoration style"
                ],
                "correctAnswer": "To modify the width of the text, making it narrower or wider",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS value for font-stretch would make the text appear extremely wide?",
                "options": [
                  "ultra-condensed",
                  "normal",
                  "expanded",
                  "ultra-expanded"
                ],
                "correctAnswer": "ultra-expanded",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following CSS color formats allows you to specify an alpha value for transparency?",
                "options": [
                  "Named Color",
                  "Hexadecimal Color",
                  "RGB Color",
                  "RGBA Color"
                ],
                "correctAnswer": "RGBA Color",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the correct way to specify a color using hexadecimal notation in CSS?",
                "options": [
                  "color: rgb(255, 99, 71);",
                  "color: #ff6347;",
                  "color: hsla(120, 100%, 50%, 0.4);",
                  "color: green;"
                ],
                "correctAnswer": "color: #ff6347;",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS example provides high readability with good contrast between text and background?",
                "options": [
                  "color: #a6a6a6; background-color: #d9d9d9;",
                  "color: #333; background-color: #f2f2f2;",
                  "color: rgba(255, 99, 71, 0.6);",
                  "color: hsl(120, 100%, 50%);"
                ],
                "correctAnswer": "color: #333; background-color: #f2f2f2;",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following statements is correct about the @font-face rule in CSS?",
                "options": [
                  "The @font-face rule is used to import fonts from external sources like Google Fonts.",
                  "The @font-face rule allows you to define custom fonts by specifying the font files and their formats.",
                  "The @font-face rule only works with fonts hosted on the user's computer.",
                  "The @font-face rule automatically applies the custom font to all text on the webpage without additional CSS."
                ],
                "correctAnswer": "The @font-face rule allows you to define custom fonts by specifying the font files and their formats.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the purpose of using the <link> tag in HTML for custom fonts?",
                "options": [
                  "To define custom fonts directly within the HTML document.",
                  "To load external fonts from sources like Google Fonts and apply them via CSS.",
                  "To specify fallback fonts in case the custom font fails to load.",
                  "To optimize font performance by compressing font files."
                ],
                "correctAnswer": "To load external fonts from sources like Google Fonts and apply them via CSS.",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Basic Font Styling",
                "description": "Apply basic font styling to text elements using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Hello World' should use the 'Verdana' font family.\n2. A <p> element with the text 'This is a sample paragraph.' should use the 'Georgia' font family.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Basic Font Styling</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Hello World</h1>\n<p>This is a sample paragraph.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Basic Font Styling</title></head><body><h1>Hello World</h1><p>This is a sample paragraph.</p></body></html>",
                    "required": [
                      "h1 { font-family: Verdana; }",
                      "p { font-family: Georgia; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Applying Font Weight",
                "description": "Style text elements using the font-weight property.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Bold Text Example' should have a font-weight of 700.\n2. A <p> element with the text 'This paragraph is normal weight.' should have a font-weight of 400.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Applying Font Weight</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Bold Text Example</h1>\n<p>This paragraph is normal weight.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Applying Font Weight</title></head><body><h1>Bold Text Example</h1><p>This paragraph is normal weight.</p></body></html>",
                    "required": [
                      "h1 { font-weight: 700; }",
                      "p { font-weight: 400; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Font Weight and Style",
                "description": "Combine font-weight and font-style properties.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Styled Heading' should have a font-weight of 900 and be italic.\n2. A <p> element with the text 'This paragraph is styled with a lighter weight.' should have a font-weight of 200 and be italic.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Font Weight and Style</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Styled Heading</h1>\n<p>This paragraph is styled with a lighter weight.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Font Weight and Style</title></head><body><h1>Styled Heading</h1><p>This paragraph is styled with a lighter weight.</p></body></html>",
                    "required": [
                      "h1 { font-weight: 900; font-style: italic; }",
                      "p { font-weight: 200; font-style: italic; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Font Stretch Property",
                "description": "Apply the font-stretch property to text elements.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Condensed Heading' should have a condensed font-stretch.\n2. A <p> element with the text 'This paragraph has expanded font.' should have an expanded font-stretch.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Font Stretch Property</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Condensed Heading</h1>\n<p>This paragraph has expanded font.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Font Stretch Property</title></head><body><h1>Condensed Heading</h1><p>This paragraph has expanded font.</p></body></html>",
                    "required": [
                      "h1 { font-stretch: condensed; }",
                      "p { font-stretch: expanded; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Combining Font Properties",
                "description": "Apply font-family, font-weight, and font-stretch to different elements.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Complex Font Styling' should use the 'Courier New' font family, a font-weight of 800, and a semi-condensed font-stretch.\n2. A <p> element with the text 'This paragraph combines several font properties.' should use the 'Arial' font family, a font-weight of 300, and an expanded font-stretch.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Combining Font Properties</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Complex Font Styling</h1>\n<p>This paragraph combines several font properties.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Combining Font Properties</title></head><body><h1>Complex Font Styling</h1><p>This paragraph combines several font properties.</p></body></html>",
                    "required": [
                      "h1 { font-family: 'Courier New'; font-weight: 800; font-stretch: semi-condensed; }",
                      "p { font-family: Arial; font-weight: 300; font-stretch: expanded; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 4: Mastering CSS Text Formatting",
            "documents": [
              {
                "title": "CSS: Text Decoration Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The text-decoration property</strong> in CSS allows you to add visual styling to text, such as underlining, overlining, striking through, or applying custom styles."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Usage</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "To apply a simple underline to text, you can use the following CSS rule:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "span {\n  text-decoration: underline;\n}"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong> In this example, the text inside the <strong><span></strong> element is underlined, making it stand out or indicate importance."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-decoration: value | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>underline:</strong> Adds a line below the text."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>overline:</strong> Adds a line above the text."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>line-through:</strong> Adds a line through the middle of the text."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>none:</strong> Removes any text decoration."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> Inherits the decoration from the parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".cc-underline {\n  text-decoration: underline;\n  font-family: 'CodeCraft Sans', Arial, sans-serif;\n}\n\n.cc-line-through {\n  text-decoration: line-through;\n  color: #b00; /* CodeCraft's red color for outdated content */\n}\n\n.cc-overline {\n  text-decoration: overline;\n  font-weight: bold;\n  color: #333; /* Neutral color for emphasis */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello, World!</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n<body>\n  <div class=\"cc-underline\">Learn HTML with CodeCraft</div>\n  <div class=\"cc-line-through\">This content is outdated.</div>\n  <div class=\"cc-overline\">Special Announcement</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Shorthand Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>text-decoration</strong> property can also serve as a shorthand for multiple related properties, including line style, color, and thickness:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-decoration: text-decoration-line text-decoration-color text-decoration-style text-decoration-thickness | initial | inherit;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".cc-advanced-decoration {\n  text-decoration-line: underline overline;\n  text-decoration-style: solid;\n  text-decoration-color: #1e90ff; /* CodeCraft blue for emphasis */\n  text-decoration-thickness: 2px;\n  margin-bottom: 20px; /* Space between elements */\n}\n\n.cc-wavy-decoration {\n  text-decoration-line: underline;\n  text-decoration-style: wavy;\n  text-decoration-color: #ff6347; /* CodeCraft accent color */\n  text-decoration-thickness: 3px;\n  margin-bottom: 20px; /* Space between elements */\n}\n\n.cc-thick-underline {\n  text-decoration-line: underline;\n  text-decoration-style: solid;\n  text-decoration-color: #333; /* Neutral color */\n  text-decoration-thickness: 4px; /* Thicker line for emphasis */\n  margin-bottom: 20px; /* Space between elements */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello, World!</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n<body>\n  <div class=\"cc-advanced-decoration\">Welcome to CodeCraft E-Learning!</div>\n  <div class=\"cc-wavy-decoration\">Check out our latest courses!</div>\n  <div class=\"cc-thick-underline\">Important Update: Please read</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Related Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>text-decoration-line:</strong> Defines the type of line (underline, overline, etc.)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>text-decoration-style:</strong> Specifies the style of the line (solid, wavy, etc.)."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>text-decoration-color:</strong> Sets the color of the line."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>text-decoration-thickness:</strong> Determines the thickness of the decoration line."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> The value for text-decoration-line is mandatory when using the shorthand notation, while other values are optional."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Text Transform Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The text-transform property</strong> in CSS allows you to manipulate the case of text, making it uppercase, lowercase, or capitalizing the first letter of each word."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-transform: none | capitalize | uppercase | lowercase | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Value Descriptions:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> Default value; no transformation is applied."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>capitalize:</strong> Capitalizes the first character of each word."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>uppercase:</strong> Converts all characters to uppercase."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>lowercase:</strong> Converts all characters to lowercase."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inherit:</strong> Inherits the value from the parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* No transformation applied */\np.none {\n  text-transform: none;\n}\n\n/* Capitalizes the first letter of each word */\np.capitalize {\n  text-transform: capitalize;\n}\n\n/* Converts all text to uppercase */\np.uppercase {\n  text-transform: uppercase;\n}\n\n/* Converts all text to lowercase */\np.lowercase {\n  text-transform: lowercase;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello, World!</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n<body>\n  <p class=\"none\">This text will remain unchanged.</p>\n  <p class=\"capitalize\">this text will be capitalized.</p>\n  <p class=\"uppercase\">this text will be in uppercase.</p>\n  <p class=\"lowercase\">THIS TEXT WILL BE IN LOWERCASE.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Descriptions:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> The text remains in its original form."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>capitalize:</strong> Each word's first letter is converted to uppercase."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>uppercase:</strong> All characters are transformed to uppercase, often used for headings."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>lowercase:</strong> All characters are converted to lowercase, useful for a minimalist style."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Text Spacing Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS text spacing properties</strong> help control the amount of space between characters, words, and lines of text, affecting the overall readability and appearance of text content. The key text spacing properties are letter-spacing, word-spacing, text-indent, and line-height."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>CSS letter-spacing Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong> letter-spacing property</strong> adjusts the spacing between each character in a text block."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "letter-spacing: normal | length | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• normal: </strong> Default spacing between characters."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• length:</strong> Defines spacing using units like px, em, %, etc. Negative values are also allowed."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• inherit:</strong> Inherits the spacing value from the parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Widens the space between characters by 3px */\np.positive_value {\n    letter-spacing: 3px;\n}\n\n/* Narrows the space between characters by 3px */\np.negative_value {\n    letter-spacing: -3px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n   <p class=\"positive_value\">Increased letter spacing.</p>\n<p class=\"negative_value\">Decreased letter spacing.</p>\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• positive_value:</strong> Increases the space between each letter by 3px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • negative_value:</strong> Decreases the space between each letter by 3px."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>CSS word-spacing Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong> word-spacing </strong> property controls the space between words in a text block."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "word-spacing: normal | length | initial | inherit;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Widens the space between words by 6px */\np {\n    word-spacing: 6px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n  <p>Increased word spacing.</p>\n\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • word-spacing:</strong> Increases the space between each word by 6px."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>CSS text-indent Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>text-indent </strong>property adjusts the indentation of the first line in a block of text."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-indent: length | initial | inherit;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Indents the first line by 40px */\np {\n    text-indent: 40px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n <p>eLearning, also known as electronic learning or online learning, is the delivery of learning and training through digital resources.</p>\n\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • text-indent: </strong> Indents the first line of the paragraph by 40px."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong> CSS line-height Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>line-height</strong>property controls the height of the line box, affecting the space between lines of text."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "line-height: normal | number | length | initial | inherit;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p.normal-value {\n    line-height: normal;\n}\n\n/* Sets line height to 2 times the current font size */\np.numeric-value {\n    line-height: 2;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n <p class=\"normal-value\">Default line height.</p>\n<p class=\"numeric-value\">Increased line height.</p>\n\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• normal-value: </strong> Uses the default line height."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • numeric-value:</strong> Sets the line height to twice the current font size, improving readability with more vertical space."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> Using a number for line-height is generally preferred over using length values for consistent scaling with the font size."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Text Shadow Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The text-shadow property</strong> in CSS adds shadow effects to text, enhancing its appearance with depth and emphasis. This property allows you to create visually appealing text styles by adding a shadow that can be customized in terms of position, blur, and color."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-shadow: h-shadow v-shadow blur-radius color | none | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Parameters:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>h-shadow:</strong> Horizontal offset of the shadow. Positive values shift the shadow to the right, while negative values shift it to the left."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>v-shadow:</strong> Vertical offset of the shadow. Positive values shift the shadow downwards, while negative values shift it upwards."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>blur-radius:</strong> The amount of blur applied to the shadow. A higher value creates a more blurred shadow."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>color:</strong> The color of the shadow. Can be specified using named colors, hex codes, RGB, RGBA, HSL, or HSLA values."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>none:</strong> Removes any shadow effect."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>inherit:</strong> Inherits the shadow value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> The horizontal and vertical shadow values are required."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n  text-shadow: 1px 1px 2px red;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello, World!</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n</head>\n<body>\n  <h1>Shadowed Heading</h1>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong> In this example, the text-shadow property creates a red shadow that is offset by 1px horizontally and 1px vertically with a 2px blur radius. This adds a subtle shadow effect behind the text."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS text-align Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>text-align </strong>property is used to control the horizontal alignment of text within an element. It affects block-level elements and inline elements within block-level containers."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-align: left | right | center | justify | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>left:</strong> Aligns the text to the left (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>right:</strong> Aligns the text to the right."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>center:</strong> Centers the text horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>justify:</strong> Justifies the text, creating a straight edge on both sides."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inherit:</strong> Inherits the value from its parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".description {\n    text-align: left;\n}\n\n.code-center {\n    text-align: center;\n}\n\n.code-right {\n    text-align: right;\n}\n\n.code-justify {\n    text-align: justify;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n<div class=\"description\">Discover the latest in CodeCraft with our aligned text examples.</div>\n<div class=\"code-center\">Code snippets are centered to ensure readability.</div>\n<div class=\"code-right\">Align code examples to the right for better formatting.</div>\n<div class=\"code-justify\">Justify CodeCraft documentation text for a clean look.</div>\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Descriptions:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .description:</strong> Aligns the text to the left for standard descriptions."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .code-center: </strong>Centers text for better visual appeal in code snippets."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .code-right:</strong> Right-aligns text to fit specific formatting needs."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .code-justify:</strong> Justifies text in documentation for a clean layout."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS text-align-last Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>text-align-last</strong> property specifies the alignment of the last line of text within a block. It works well for justified text."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "text-align-last: auto | left | right | center | justify | start | end | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>auto:</strong> Matches the text-align value. Aligns left if text-align is not set."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>left:</strong> Aligns the last line to the left."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>right:</strong> Aligns the last line to the right."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>center:</strong> Centers the last line."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>justify:</strong> Justifies the last line."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>start:</strong> Aligns to the start (left for LTR, right for RTL)."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>end:</strong> Aligns to the end (right for LTR, left for RTL)."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "9. <strong>inherit:</strong> Inherits the value from its parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".last-left {\n    text-align: justify;\n    text-align-last: left;\n}\n\n.last-center {\n    text-align: justify;\n    text-align-last: center;\n}\n\n.last-right {\n    text-align: justify;\n    text-align-last: right;\n}\n\n.last-justify {\n    text-align: justify;\n    text-align-last: justify;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n  </head>\n  <body>\n<p class=\"last-left\">This is a justified paragraph with the last line aligned to the left.</p>\n<p class=\"last-center\">This text is centered, including the last line.</p>\n<p class=\"last-right\">This text is right-aligned, and so is the last line.</p>\n<p class=\"last-justify\">The last line of this text is also justified for consistency.</p>\n  </body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Descriptions:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong> • .last-left: </strong>Aligns the last line to the left in a justified block."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .last-center: </strong>Centers the last line in a justified block."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>.last-right:</strong> Aligns the last line to the right in a justified block."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• .last-justify:</strong> Justifies the last line for consistency with the rest of the block."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Vertical Align Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The vertical-align property</strong> controls the vertical alignment of inline-level elements relative to the line box. This property does not apply to block-level elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "vertical-align: baseline | length | sub | super | top | text-top | middle | bottom | text-bottom | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>baseline:</strong> Aligns the element with the baseline of the parent element (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>length:</strong> Aligns the element relative to the baseline using a specified length (e.g., px, em). Negative values are allowed."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>sub:</strong> Aligns the element as a subscript relative to the baseline."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>super:</strong> Aligns the element as a superscript relative to the baseline."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>top:</strong> Aligns the top of the element with the top of the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>middle:</strong> Aligns the middle of the element with the middle of the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>bottom:</strong> Aligns the bottom of the element with the bottom of the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>text-top:</strong> Aligns the top of the element with the top of the parent element's font."
                  },
                  {
                    "type": "sentence",
                    "text": "9. <strong>text-bottom:</strong> Aligns the bottom of the element with the bottom of the parent element's font."
                  },
                  {
                    "type": "sentence",
                    "text": "10. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "11. <strong>inherit:</strong> Inherits the value from the parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Container styling */\n.aligned-text {\n  border: 1px solid black;\n  line-height: 2;\n  margin-bottom: 10px; /* Adds spacing between paragraphs */\n}\n\n/* Aligns span to the baseline of the parent element */\n.baseline {\n  vertical-align: baseline;\n}\n\n/* Aligns span 10px relative to the baseline of the parent element */\n.length {\n  vertical-align: 10px;\n}\n\n/* Aligns span to subscript position */\n.sub {\n  vertical-align: sub;\n}\n\n/* Aligns span to superscript position */\n.super {\n  vertical-align: super;\n}\n\n/* Aligns span to the top of the parent element */\n.top {\n  vertical-align: top;\n}\n\n/* Aligns span to the top of the parent element's font */\n.text-top {\n  vertical-align: text-top;\n}\n\n/* Aligns span to the middle of the parent element */\n.middle {\n  vertical-align: middle;\n}\n\n/* Aligns span to the bottom of the parent element */\n.bottom {\n  vertical-align: bottom;\n}\n\n/* Aligns span to the bottom of the parent element's font */\n.text-bottom {\n  vertical-align: text-bottom;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Vertical Align Examples</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <p class=\"aligned-text\">Explore <span class=\"baseline\">CodeCraft</span> with precise vertical alignment examples.</p>\n  <p class=\"aligned-text\">The term <span class=\"super\">Super</span> is used in various contexts.</p>\n  <p class=\"aligned-text\">The word <span class=\"sub\">Sub</span> appears as a subscript.</p>\n  <p class=\"aligned-text\">Compare <span class=\"top\">Top</span> and <span class=\"bottom\">Bottom</span> alignments.</p>\n  <p class=\"aligned-text\">Test <span class=\"text-top\">Text-Top</span> and <span class=\"text-bottom\">Text-Bottom</span> alignments.</p>\n  <p class=\"aligned-text\">This is an example with <span class=\"middle\">Middle</span> alignment.</p>\n  <p class=\"aligned-text\">An example with <span class=\"length\">10px</span> relative to the baseline.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "The above example demonstrates the working of different values of the <strong> vertical-align</strong>property."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Direction Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The CSS direction property</strong> specifies the base direction of text and layout within a block element. This property is especially useful for managing text direction in languages that are read from right to left or for creating specific layout effects."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "direction: ltr | rtl | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>ltr:</strong> Sets the text direction from left to right. This is the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>rtl:</strong> Sets the text direction from right to left."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> Inherits the direction from its parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".ltr-text {\n  border: 1px solid green;\n  padding: 10px;\n  direction: ltr; /* Text flows from left to right */\n}\n\n.rtl-text {\n  border: 1px solid blue;\n  padding: 10px;\n  direction: rtl; /* Text flows from right to left */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>CSS Direction Property Examples</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"ltr-text\">\n    <p>Welcome to CodeCraft, where we explore various coding concepts.</p>\n  </div>\n  <div class=\"rtl-text\">\n    <p>Learn more about our features and tutorials.</p>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>.ltr-text</strong> class applies a left-to-right direction, which is useful for most languages like English."
                  },
                  {
                    "type": "sentence",
                    "text": "• The <strong>.rtl-text</strong> class applies a right-to-left direction, which is useful for languages like Arabic or Hebrew."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note: </strong>By using the <strong>direction</strong> property, you can effectively manage text flow and layout in your web projects to accommodate different language requirements."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What does the text-decoration: underline; property do to the text within an element?",
                "options": [
                  "Adds a line below the text",
                  "Adds a line above the text",
                  "Adds a line through the middle of the text",
                  "Removes any text decoration"
                ],
                "correctAnswer": "Adds a line below the text",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which text-decoration property value would you use to apply a solid line through the middle of the text?",
                "options": [
                  "underline",
                  "overline",
                  "line-through",
                  "none"
                ],
                "correctAnswer": "line-through",
                "points": 2,
                "locked": true
              },
              {
                "question": "When using the shorthand text-decoration property, which value is mandatory?",
                "options": [
                  "text-decoration-line",
                  "text-decoration-color",
                  "text-decoration-style",
                  "text-decoration-thickness"
                ],
                "correctAnswer": "text-decoration-line",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which text-transform property value will leave the text in its original form without any transformation?",
                "options": [
                  "none",
                  "capitalize",
                  "uppercase",
                  "lowercase"
                ],
                "correctAnswer": "none",
                "points": 2,
                "locked": true
              },
              {
                "question": "What effect does the text-transform: capitalize; property have on text?",
                "options": [
                  "Converts all characters to uppercase",
                  "Converts all characters to lowercase",
                  "Capitalizes the first character of each word",
                  "Leaves the text unchanged"
                ],
                "correctAnswer": "Capitalizes the first character of each word",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which letter-spacing value increases the space between characters in a text block?",
                "options": [
                  "normal",
                  "length",
                  "initial",
                  "inherit"
                ],
                "correctAnswer": "length",
                "points": 2,
                "locked": true
              },
              {
                "question": "What effect does the word-spacing: 6px; property have on the text?",
                "options": [
                  "Increases the space between each character by 6px",
                  "Increases the space between each word by 6px",
                  "Decreases the space between each character by 6px",
                  "Decreases the space between each word by 6px"
                ],
                "correctAnswer": "Increases the space between each word by 6px",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property adjusts the indentation of the first line in a block of text?",
                "options": [
                  "letter-spacing",
                  "word-spacing",
                  "text-indent",
                  "line-height"
                ],
                "correctAnswer": "text-indent",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which text-shadow value sets the property to its default value?",
                "options": [
                  "initial",
                  "inherit",
                  "none",
                  "rgba(0,0,0,0)"
                ],
                "correctAnswer": "initial",
                "points": 2,
                "locked": true
              },
              {
                "question": "What effect do positive values for h-shadow and v-shadow have on the shadow?",
                "options": [
                  "Positive values shift the shadow to the right and downwards",
                  "Positive values shift the shadow to the left and upwards",
                  "Positive values increase the blur radius",
                  "Positive values set the shadow color"
                ],
                "correctAnswer": "Positive values shift the shadow to the right and downwards",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which vertical-align value aligns the element with the baseline of the parent element?",
                "options": [
                  "baseline",
                  "top",
                  "middle",
                  "bottom"
                ],
                "correctAnswer": "baseline",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the vertical-align: sub; property do?",
                "options": [
                  "Aligns the element as a superscript relative to the baseline",
                  "Aligns the element as a subscript relative to the baseline",
                  "Aligns the middle of the element with the middle of the parent element",
                  "Aligns the top of the element with the top of the parent element"
                ],
                "correctAnswer": "Aligns the element as a subscript relative to the baseline",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which vertical-align value aligns the top of the element with the top of the parent element's font?",
                "options": [
                  "text-top",
                  "top",
                  "middle",
                  "text-bottom"
                ],
                "correctAnswer": "text-top",
                "points": 2,
                "locked": true
              },
              {
                "question": "What effect does the vertical-align: middle; property have on an inline-level element?",
                "options": [
                  "Aligns the middle of the element with the middle of the parent element",
                  "Aligns the element with the baseline of the parent element",
                  "Aligns the bottom of the element with the bottom of the parent element",
                  "Aligns the top of the element with the top of the parent element"
                ],
                "correctAnswer": "Aligns the middle of the element with the middle of the parent element",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which direction value sets the text direction from right to left?",
                "options": [
                  "ltr",
                  "rtl",
                  "initial",
                  "inherit"
                ],
                "correctAnswer": "rtl",
                "points": 2,
                "locked": true
              },
              {
                "question": "What effect does the direction: ltr; property have on the text?",
                "options": [
                  "Aligns the text direction from right to left",
                  "Sets the text direction from left to right",
                  "Sets the text direction to its default value",
                  "Inherits the direction from its parent element"
                ],
                "correctAnswer": "Sets the text direction from left to right",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Text Decoration Properties",
                "description": "Apply text decoration properties to text elements using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Underlined Heading' should have an underline text decoration.\n2. A <p> element with the text 'This paragraph has a line-through.' should have a line-through text decoration.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Text Decoration Properties</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Underlined Heading</h1>\n<p>This paragraph has a line-through.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Text Decoration Properties</title></head><body><h1>Underlined Heading</h1><p>This paragraph has a line-through.</p></body></html>",
                    "required": [
                      "h1 { text-decoration: underline; }",
                      "p { text-decoration: line-through; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Text Alignment",
                "description": "Apply text alignment properties to text elements using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Centered Heading' should be centered.\n2. A <p> element with the text 'This paragraph is aligned to the right.' should be right-aligned.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Text Alignment</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Centered Heading</h1>\n<p>This paragraph is aligned to the right.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Text Alignment</title></head><body><h1>Centered Heading</h1><p>This paragraph is aligned to the right.</p></body></html>",
                    "required": [
                      "h1 { text-align: center; }",
                      "p { text-align: right; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Text Transform Properties",
                "description": "Apply text transform properties to text elements using CSS.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Uppercase Heading' should use uppercase text transformation.\n2. A <p> element with the text 'This paragraph is capitalized.' should use capitalize text transformation.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Text Transform Properties</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Uppercase Heading</h1>\n<p>This paragraph is capitalized.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Text Transform Properties</title></head><body><h1>Uppercase Heading</h1><p>This paragraph is capitalized.</p></body></html>",
                    "required": [
                      "h1 { text-transform: uppercase; }",
                      "p { text-transform: capitalize; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Text Shadow",
                "description": "Apply text shadow properties to text elements using CSS.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following text elements using CSS:\n1. An <h1> element with the text 'Shadowed Heading' should have a text shadow of 3px 3px 5px rgba(0,0,0,0.3).\n2. A <p> element with the text 'This paragraph has a subtle shadow.' should have a text shadow of 2px 2px 4px rgba(0,0,0,0.5).\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Text Shadow</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Shadowed Heading</h1>\n<p>This paragraph has a subtle shadow.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Text Shadow</title></head><body><h1>Shadowed Heading</h1><p>This paragraph has a subtle shadow.</p></body></html>",
                    "required": [
                      "h1 { text-shadow: 3px 3px 5px rgba(0,0,0,0.3); }",
                      "p { text-shadow: 2px 2px 4px rgba(0,0,0,0.5); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced Text Styling",
                "description": "Apply advanced text styling properties to text elements using CSS.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following text elements using CSS.\n1. For the <h1> element with the text 'Fancy Heading,' apply a text shadow with a horizontal offset of 3px, a vertical offset of 3px, a blur radius of 6px, and a color of rgba(0,0,0,0.4). Additionally, set the text decoration to underline and adjust the letter spacing to 1px.\n2. For the <p> element with the text 'Detailed paragraph with various text styles,' apply a text transform to capitalize the text, set the letter spacing to 0.5px, and apply a text shadow with a horizontal offset of 1px, a vertical offset of 1px, a blur radius of 3px, and a color of rgba(0,0,0,0.2).\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Advanced Text Styling</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<h1>Fancy Heading</h1>\n<p>Detailed paragraph with various text styles.</p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Advanced Text Styling</title></head><body><h1>Fancy Heading</h1><p>Detailed paragraph with various text styles.</p></body></html>",
                    "required": [
                      "h1 { text-shadow: 3px 3px 6px rgba(0,0,0,0.4); text-decoration: underline; letter-spacing: 1px; }",
                      "p { text-transform: capitalize; letter-spacing: 0.5px; text-shadow: 1px 1px 3px rgba(0,0,0,0.2); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 5: Exploring CSS Backgrounds",
            "documents": [
              {
                "title": "CSS: Background Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The CSS background property</strong> allows you to set the background color or image of an element. This property is versatile and can significantly enhance the visual appeal of a web page."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Shorthand for Background Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>background</strong> property can also act as a shorthand for several background-related properties, allowing you to define multiple aspects of an element's background in a single declaration. The syntax for the shorthand property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background: [background-image] [background-position] / [background-size] [background-repeat] [background-attachment] [background-origin] [background-clip] [background-color];"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Components of the Shorthand Property:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>background-image:</strong> Sets an image as the background."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>background-position:</strong> Specifies the position of the background image."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>background-size:</strong> Defines the size of the background image."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>background-repeat:</strong> Controls the repeating behavior of the background image."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>background-attachment:</strong> Specifies whether the background image is fixed or scrolls with the content."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>background-origin:</strong> Determines the positioning area of the background image."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>background-clip:</strong> Defines the area within which the background is visible."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n  background: lightblue;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>CodeCraft Background Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <h1>Welcome to CodeCraft</h1>\n  <p>Explore a world of coding and creativity.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example Description:</strong> In this example, the background of the <strong>&lt;h1&gt;</strong> element is set to light blue, enhancing its visibility and appeal."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background Color Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The CSS <strong>background-color</strong> property is used to define the background color of an HTML element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-color: color-value | transparent | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>color-value:</strong> Specifies the color for the background using named colors (like red), hexadecimal values (like #ff0000), RGB values (like rgb(255, 0, 0)), etc."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>transparent:</strong> Makes the background transparent (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> Inherits the property value from its parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* General styling */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n/* Header section with CodeCraft branding color */\n.header-section {\n  background-color: #1a1a2e; /* Dark blue for header */\n  color: #f8f9fa; /* Light text color */\n  padding: 20px;\n  text-align: center;\n}\n\n/* Courses section with a vibrant color */\n.courses-section {\n  background-color: #16213e; /* Slightly lighter blue */\n  color: #e94560; /* Bright accent color */\n  padding: 20px;\n  margin: 20px 0;\n}\n\n/* Community section with a welcoming color */\n.community-section {\n  background-color: #0f3460; /* Another shade of blue */\n  color: #f8f9fa; /* Light text color */\n  padding: 20px;\n  margin: 20px 0;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>CodeCraft Themed Sections</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"header-section\">\n    <h1>Welcome to CodeCraft</h1>\n  </div>\n  <div class=\"courses-section\">\n    <p>Explore our wide range of coding courses, from beginner to advanced levels.</p>\n  </div>\n  <div class=\"community-section\">\n    <p>Join our community and collaborate with other learners!</p>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• header-section:</strong> Uses a dark blue background to represent the CodeCraft branding. The light text color ensures good contrast and readability."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• courses-section:</strong> The slightly lighter blue background distinguishes this section from the header, while the bright accent color for the text draws attention to the courses offered."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• community-section:</strong> A warm and inviting color scheme encourages users to engage with the community. The consistent use of blue hues maintains a cohesive look across the site."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background Image Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-image property</strong> is a powerful tool for enhancing the visual appeal of elements on a webpage by applying images as backgrounds."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-image: url(image-path) | none | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>url(image-path):</strong> Specifies the URL of the image file to be used as the background."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>none:</strong> Removes any background image."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> Inherits the background image from the parent element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".background-example {\n  height: 100vh; /* Full viewport height */\n  background-image: url(\"https://png.pngtree.com/thumb_back/fh260/back_our/20190617/ourmid/pngtree-blue-technology-e-commerce-learning-education-business-poster-banner-image_123753.jpg\"); /* Path to background image */\n  background-repeat: no-repeat; /* Prevents the image from repeating */\n  background-size: cover; /* Ensures the image covers the entire element */\n  background-position: center; /* Centers the image in the element */\n  color: black; /* Sets text color to ensure readability */\n  text-align: center; /* Centers text horizontally */\n  display: flex; /* Uses flexbox to center content vertically */\n  justify-content: center; /* Centers content horizontally */\n  align-items: center; /* Centers content vertically */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background Image Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"background-example\">\n    <h1>Welcome to CodeCraft</h1>\n    <p>Explore CSS properties and enhance your web design skills.</p>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> In this example, the background-image property applies an image as the background for the .background-example div. The image is set to cover the entire div, does not repeat, and is centered both vertically and horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Additional Properties for Background Image Customization</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>background-repeat:</strong> Specifies whether a background image should repeat. Possible values include repeat, no-repeat, repeat-x, and repeat-y."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>background-attachment:</strong> Determines whether the background image scrolls with the page or remains fixed. Values include scroll (default) and fixed."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>background-size:</strong> Defines the size of the background image. Common values include auto, cover, and contain."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>background-position:</strong> Sets the position of the background image within the element. Values include top left, center center, bottom right, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>background-clip:</strong> Specifies the area within the element where the background image is painted. Values include border-box, padding-box, and content-box."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>background-origin:</strong> Determines the background positioning area. Values include padding-box, border-box, and content-box."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Background-Repeat Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-repeat property</strong> controls how a background image is repeated within an element. This property is essential for creating visually appealing designs and handling different image sizes and layouts."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-repeat: repeat | repeat-x | repeat-y | no-repeat | space | round | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>repeat:</strong> The default value. The background image repeats both horizontally and vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>repeat-x:</strong> The background image repeats only horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>repeat-y:</strong> The background image repeats only vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>no-repeat:</strong> The background image does not repeat. Only one instance of the image is shown."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>space:</strong> The background image repeats, with extra space distributed evenly between images. Images do not overlap or clip."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>round:</strong> The background image repeats, with images stretched or squished to fit the available space."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>initial:</strong> Sets the property to its default value (repeat)."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>inherit:</strong> Inherits the property value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Default Repeat</strong> By default, the background image repeats both horizontally and vertically."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    background-image: url(\"https://img.freepik.com/premium-vector/elearning-concept-laptop-as-book-dark-blue-background-online-education-technology_387612-38.jpg\");\n    background-repeat: repeat; /* Default value, repeats both horizontally and vertically */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Repeat Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Repeat-X</strong> This example shows how to repeat the background image only horizontally."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    background-image: url(\"https://img.freepik.com/premium-vector/elearning-concept-laptop-as-book-dark-blue-background-online-education-technology_387612-38.jpg\");\n    background-repeat: repeat-x; /* Repeats only horizontally */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Repeat-X Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: No-Repeat</strong> This example ensures the background image does not repeat."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    background-image: url(\"https://img.freepik.com/premium-vector/elearning-concept-laptop-as-book-dark-blue-background-online-education-technology_387612-38.jpg\");\n    background-repeat: no-repeat; /* Image does not repeat */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background No-Repeat Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Space</strong> The space value ensures that the background image repeats without clipping, with equal spacing between images."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    height: 100vh; /* Full viewport height */\n    background-image: url(\"https://img.freepik.com/premium-vector/elearning-concept-laptop-as-book-dark-blue-background-online-education-technology_387612-38.jpg\");\n    background-repeat: space; /* Distributes the space evenly between repeated images */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Space Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 5: Round</strong> The round value ensures the background image is resized to fit the available space."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    height: 100vh; /* Full viewport height */\n    background-image: url(\"https://img.freepik.com/premium-vector/elearning-concept-laptop-as-book-dark-blue-background-online-education-technology_387612-38.jpg\");\n    background-repeat: round; /* Resizes the image to fill the background area */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Round Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>background-repeat</strong> property provides control over how background images are repeated within an element. By understanding and applying different values, you can effectively manage the presentation of background images to enhance the visual design of your webpage."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background-Attachment Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-attachment property</strong> in CSS determines how a background image is positioned relative to the viewport or element when scrolling. It can be used to create effects where the background image either scrolls with the content or stays fixed in place."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-attachment: scroll | fixed | local | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>scroll:</strong> The background image scrolls along with the content of the element (default behavior)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>fixed:</strong> The background image remains fixed in place while the content of the element scrolls."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>local:</strong> The background image scrolls with the content of the element itself, not the viewport."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>initial:</strong> Sets the property to its default value (scroll)."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> Inherits the background attachment value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Scrolling Background</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the background image scrolls with the content of the page."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "body {\n  background-image: url('https://campuslabs.in/wp-content/uploads/2020/07/e-learning-bg.jpg');\n  background-attachment: scroll; /* Default value: image scrolls with the content */\n  background-repeat: no-repeat; /* Ensures the image does not repeat */\n  background-size: cover; /* Scales the image to cover the entire background */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background-Attachment Scroll</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> In this example, the background-attachment: scroll property ensures that the background image scrolls along with the page’s content. This is the default behavior where the background image moves in tandem with the scrolling content."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Fixed Background</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Here, the background image remains fixed in place as you scroll through the page."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "body {\n  background-image: url('https://campuslabs.in/wp-content/uploads/2020/07/e-learning-bg.jpg');\n  background-attachment: fixed; /* Background image remains fixed during scrolling */\n  background-repeat: no-repeat; /* Ensures the image does not repeat */\n  background-size: cover; /* Scales the image to cover the entire background */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background-Attachment Fixed</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n  <p>CodeCraft e-learning</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> The background-attachment: fixed property keeps the background image fixed in the viewport. While the content scrolls, the background image stays in a constant position, creating a parallax effect."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Local Background</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the background image scrolls with the content of the element."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".scrolling-content {\n  height: 200px; /* Define a height for the container */\n  overflow: auto; /* Enable scrolling */\n  background-image: url('https://media.licdn.com/dms/image/D4D12AQHL1tmi-7TC4A/article-cover_image-shrink_720_1280/0/1690022978374?e=2147483647&v=beta&t=YwKKeReRpB5gpkENmHGOi4zjgRuaKJqSKJOKXuNTIMc');\n  background-attachment: local; /* Background image scrolls with the container’s content */\n  background-repeat: no-repeat; /* Ensures the image does not repeat */\n  background-size: cover; /* Scales the image to cover the entire background */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background-Attachment Local</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"scrolling-content\">\n    <p>This is a paragraph within a scrolling container.</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>CODECRAFT</p>\n    <p>This is another paragraph within the same container.</p>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> Using background-attachment: local makes the background image scroll with the content of the specific element, rather than the entire page. This is useful for creating effects within scrollable containers."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background-Size Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Background-Size Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>background-size</strong> property is used to control the dimensions of a background image in an element. This property determines how the background image should be scaled and displayed within its container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-size: auto | length | percentage | cover | contain | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>auto:</strong> Uses the original size of the background image (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>length:</strong> Specifies the size of the background image using length values like pixels (px) or em units."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>percentage:</strong> Scales the background image relative to the container’s size."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>cover:</strong> Scales the background image to cover the entire background area while maintaining its aspect ratio."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>contain:</strong> Scales the background image to fit within the background area while maintaining its aspect ratio."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>initial:</strong> Sets the property to its default value (auto)."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>inherit:</strong> Inherits the property value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Using Length Units</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".fixed-size {\n  background-image: url('https://c8.alamy.com/comp/2BKM4PB/e-learning-online-school-vector-background-e-learning-online-courses-text-with-computer-devices-and-school-elements-for-digital-home-education-study-2BKM4PB.jpg');\n  background-size: 300px 200px; /* Set background image width to 300px and height to 200px */\n  background-repeat: no-repeat; /* Prevent image from repeating */\n  width: 400px; /* Container width */\n  height: 300px; /* Container height */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background Size with Length Units</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"fixed-size\">Sample Content</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example sets the background image to a fixed size of 300px by 200px. The <strong>background-size</strong> property adjusts the image dimensions directly."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Covering the Background</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".cover-background {\n  background-image: url('https://www.collegiateparent.com/wp-content/uploads/2020/04/online-learning-terms.jpg');\n  background-size: cover; /* Ensure the image covers the entire container */\n  background-repeat: no-repeat; /* Prevent image from repeating */\n  width: 100vw; /* Full viewport width */\n  height: 100vh; /* Full viewport height */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Background Size Cover</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"cover-background\">Content Area</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> Using <strong>background-size: cover</strong> ensures that the image will stretch to cover the entire element, even if it means cropping part of the image."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background-Clip Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-clip property</strong> in CSS determines which parts of an element’s background (color, image, or gradient) are visible. It controls how the background is applied relative to the element’s box model areas."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-clip: border-box | padding-box | content-box | text | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>border-box:</strong> The background extends to the border edge, including the border area."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>padding-box:</strong> The background is visible up to the padding edge, excluding the border."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>content-box:</strong> The background is confined to the content area of the element."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>text:</strong> The background is clipped to the text, making the background visible only within the text’s area."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>initial:</strong> Resets the property to its default value (border-box)."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inherit:</strong> Inherits the background-clip value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Clipping to border-box</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".clip-border {\n  padding: 15px;\n  border: 10px solid black;\n  background-color: lightblue;\n  background-clip: border-box; /* Background extends to the border edge */\n  text-align: center;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Clip Border Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"clip-border\">Border Box Background</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> In this example, the <strong>background-clip: border-box </strong>ensures the background color covers the entire area up to and including the border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Clipping to padding-box</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".clip-padding {\n  padding: 15px;\n  border: 10px dashed black; /* Dashed border to show break */\n  background-color: lightcoral;\n  background-clip: padding-box; /* Background stops at the padding edge */\n  text-align: center;\n  width: 200px;\n  margin: 20px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Clip Padding Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"clip-padding\">Padding Box Background</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> In this example, <strong>background-clip: padding-box</strong> confines the background color to the padding area, preventing it from extending into the border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Clipping to content-box</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".clip-content {\n  padding: 15px;\n  border: 10px solid black;\n  background-color: lightgreen;\n  background-clip: content-box; /* Background only in the content area */\n  text-align: center;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Clip Content Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"clip-content\">Content Box Background</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> In this example, <strong>background-clip: content-box</strong> restricts the background color to only the content area, excluding padding and borders."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Clipping to text</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".clip-text {\n  background-image: url('https://c0.wallpaperflare.com/preview/746/150/495/computer-concept-education-illustration.jpg');\n  background-clip: text; /* Background only in the text area */\n  -webkit-background-clip: text; /* Browser compatibility */\n  -webkit-text-fill-color: transparent; /* Text color transparent */\n  font-size: 36px;\n  font-weight: bold;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Clip Text</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"clip-text\">Text Clipped Background</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> In this example, <strong>background-clip: text</strong> makes the background image visible only within the text, and the -webkit-background-clip: text property ensures browser compatibility."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background-Origin Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-origin property</strong> defines the positioning area for a background image. It determines where the background image is placed relative to the element’s box model."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-origin: padding-box | border-box | content-box | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>padding-box:</strong> The background image starts from the padding edge of the element. This is the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>border-box:</strong> The background image starts from the border edge, including the padding and border areas."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>content-box:</strong> The background image starts from the content edge, excluding padding and border areas."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>initial:</strong> Sets the property to its default value (padding-box)."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> The property value is inherited from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Background Origin at border-box</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-box {\n    border: 10px solid black;\n    padding: 20px;\n    background-image: url('https://png.pngtree.com/thumb_back/fh260/back_our/20190617/ourmid/pngtree-blue-technology-e-commerce-learning-education-business-poster-banner-image_123753.jpg');\n    background-repeat: no-repeat;\n    background-origin: border-box; /* Background starts from the border edge */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Origin Border Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-box\">Background Origin at Border Box</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> In this example, the <srong>background-origin: border-box</strong> value makes the background image start from the top-left corner of the border area, extending into the padding and content areas."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Background Origin at padding-box</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".padding-box {\n    border: 10px dashed black; /* Dashed border to show break */\n    padding: 20px;\n    background-image: url('https://cdn.elearningindustry.com/wp-content/uploads/2023/02/shutterstock_1449924503.jpg');\n    background-repeat: no-repeat;\n    background-origin: padding-box; /* Background starts from the padding edge */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Origin Padding Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"padding-box\">Background Origin at Padding Box</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> With <strong>background-origin: padding-box</strong>, the background image is positioned starting from the top-left corner of the padding area, excluding the border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Background Origin at content-box</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".content-box {\n    border: 10px solid black;\n    padding: 20px;\n    background-image: url('https://www.shutterstock.com/image-photo/banner-homeschooling-workspace-laptop-stationery-260nw-1887490225.jpg');\n    background-repeat: no-repeat;\n    background-origin: content-box; /* Background starts from the content edge */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Origin Content Box</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"content-box\">Background Origin at Content Box</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> Using <strong>background-origin: content-box</strong>, the background image starts at the top-left corner of the content area, excluding both padding and border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note on background-attachment</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>background-origin</strong> property does not influence the background-attachment property when set to fixed. In such cases, the background image remains fixed relative to the viewport, and the origin setting has no visible effect."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example with background-attachment: fixed:</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".fixed-background {\n    border: 10px solid black;\n    padding: 20px;\n    background-image: url('https://img.freepik.com/free-photo/flat-lay-stationary-arrangement-desk-with-yellow-supplies_23-2148404491.jpg');\n    background-repeat: no-repeat;\n    background-size: cover;\n    background-attachment: fixed; /* Background is fixed relative to the viewport */\n    background-origin: content-box; /* This does not affect the fixed background */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Attachment Fixed</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"fixed-background\">Fixed Background Attachment</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> Even though <strong>background-origin is set to content-box, background-attachment: fixed</strong> keeps the background image fixed relative to the viewport, overriding the origin setting."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Background Position Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The background-position property</strong> is used to specify the position of a background image within its container. This property allows you to align the image horizontally and vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-position: length | percentage | keyword | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>length:</strong> Specifies the position using length units such as px, em, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>percentage:</strong> Positions the image relative to the container's size, with 0% representing the left or top edge and 100% representing the right or bottom edge."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>keyword:</strong> Uses keywords like top, right, bottom, left, and center to position the image."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>initial:</strong> Sets the property to its default value (0% 0%)."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> Inherits the value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Positioning with Length Units</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".position-length {\n  height: 100vh;\n  background-image: url('https://tecnosoluciones.com/wp-content/uploads/2019/03/e-Learning-y-sus-caracteristicas.jpg'); /* Placeholder image URL */\n  background-repeat: no-repeat;\n  background-position: 100px 50px; /* Positions image 100px from the left and 50px from the top */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Position Length Units</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"position-length\">Background Position with Length Units</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> This example positions the background image 100px from the left and 50px from the top of the container. If only one value is specified, it defaults to the center vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Positioning with Percentage Values</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".position-percentage {\n  height: 100vh;\n  background-image: url('https://tecnosoluciones.com/wp-content/uploads/2019/03/e-Learning-y-sus-caracteristicas.jpg'); /* Placeholder image URL */\n  background-repeat: no-repeat;\n  background-position: 10% 50%; /* Positions image 10% from the left and 50% from the top */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Position Percentage</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"position-percentage\">Background Position with Percentage</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> In this example, the image is positioned 10% from the left edge and centered vertically. Percentages are relative to the container’s dimensions."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Positioning with Keywords</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": ".position-keywords {\n  height: 100vh;\n  background-image: url('https://tecnosoluciones.com/wp-content/uploads/2019/03/e-Learning-y-sus-caracteristicas.jpg'); /* Placeholder image URL */\n  background-repeat: no-repeat;\n  background-position: top right; /* Positions image at the top-right corner */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Position Keywords</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"position-keywords\">Background Position with Keywords</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> Here, the background-position property is set using keywords. The image is positioned at the top-right corner of the container."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS: Opacity Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The opacity property</strong> controls the transparency level of an element. It affects the entire element, including its child elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "opacity: number | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>number:</strong> Sets the opacity level from 0.0 (fully transparent) to 1.0 (fully opaque)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>initial:</strong> Resets the property to its default value (1.0)."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>inherit:</strong> Inherits the opacity from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> The value 1.0 corresponds to fully opaque (no transparency)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Examples</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Basic Opacity Adjustment</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".second {\n  opacity: 0.5; /* 50% transparent */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Opacity Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <img class=\"second\" src=\"https://varteq.com/wp-content/uploads/2020/05/e-learning.png\">\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> The image has an opacity of 0.5, making it 50% transparent."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Opacity with Background Color</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    height: 100px;\n    color: white;\n    text-align: center;\n    line-height: 100px;\n    font-size: 20px;\n}\n\n.box1 {\n    background-color: rgba(173, 216, 230, 1); /* Fully opaque light blue */\n}\n\n.box2 {\n    background-color: rgba(173, 216, 230, 0.7); /* 70% opaque light blue */\n}\n\n.box3 {\n    background-color: rgba(173, 216, 230, 0.3); /* 30% opaque light blue */\n}\n\n.box4 {\n    background-color: rgba(173, 216, 230, 0.1); /* 10% opaque light blue */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Opacity Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box box1\">Box 1</div>\n    <div class=\"box box2\">Box 2</div>\n    <div class=\"box box3\">Box 3</div>\n    <div class=\"box box4\">Box 4</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> The div elements have different levels of background opacity with light blue color, and the text remains fully visible due to using RGBA color values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Opacity on Hover</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".hover-image {\n    width: 350px;\n    margin: 8px;\n    opacity: 0.6; /* 60% opaque */\n    transition: opacity 0.3s;\n}\n\n.hover-image:hover {\n    opacity: 1; /* Fully opaque on hover */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hover Opacity Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <img class=\"hover-image\" src=\"https://varteq.com/wp-content/uploads/2020/05/e-learning.png\">\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> The image is semi-transparent initially and becomes fully opaque when hovered over."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "Which value for the background-color property ensures that the background color is not applied and the element's background blends with its parent's background?",
                "options": [
                  "color-value",
                  "transparent",
                  "initial",
                  "inherit"
                ],
                "correctAnswer": "transparent",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value of the background-color property sets the property to its default state?",
                "options": [
                  "color-value",
                  "transparent",
                  "initial",
                  "inherit"
                ],
                "correctAnswer": "initial",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property controls whether a background image repeats or not?",
                "options": [
                  "background-attachment",
                  "background-size",
                  "background-repeat",
                  "background-position"
                ],
                "correctAnswer": "background-repeat",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for the background-attachment property ensures that the background image stays in place while scrolling the page?",
                "options": [
                  "scroll",
                  "fixed",
                  "auto",
                  "cover"
                ],
                "correctAnswer": "fixed",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property specifies the area within an element where the background image is painted?",
                "options": [
                  "background-origin",
                  "background-clip",
                  "background-position",
                  "background-size"
                ],
                "correctAnswer": "background-clip",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for the background-repeat property ensures that the background image repeats only horizontally?",
                "options": [
                  "repeat",
                  "repeat-x",
                  "no-repeat",
                  "round"
                ],
                "correctAnswer": "repeat-x",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for the background-repeat property prevents the background image from repeating and shows only one instance of the image?",
                "options": [
                  "space",
                  "no-repeat",
                  "repeat-y",
                  "repeat"
                ],
                "correctAnswer": "no-repeat",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value of the background-attachment property makes the background image scroll with the content of the specific element, not the viewport?",
                "options": [
                  "fixed",
                  "scroll",
                  "local",
                  "inherit"
                ],
                "correctAnswer": "local",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value of the background-attachment property is used to apply the default scrolling behavior for a background image?",
                "options": [
                  "fixed",
                  "scroll",
                  "local",
                  "inherit"
                ],
                "correctAnswer": "scroll",
                "points": 2,
                "locked": true
              },
              {
                "question": "What CSS property is used to control the dimensions of a background image applied to an element?",
                "options": [
                  "background-position",
                  "background-repeat",
                  "background-size",
                  "background-attachment"
                ],
                "correctAnswer": "background-size",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for the background-clip property ensures that the background extends to the border edge, including the border area?",
                "options": [
                  "content-box",
                  "padding-box",
                  "border-box",
                  "initial"
                ],
                "correctAnswer": "border-box",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for the background-clip property makes the background visible up to the padding edge, excluding the border?",
                "options": [
                  "content-box",
                  "padding-box",
                  "border-box",
                  "inherit"
                ],
                "correctAnswer": "padding-box",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property defines the positioning area for a background image relative to the element’s box model?",
                "options": [
                  "background-size",
                  "background-clip",
                  "background-origin",
                  "background-repeat"
                ],
                "correctAnswer": "background-origin",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property value type uses keywords like top, right, bottom, left, and center to position the background image?",
                "options": [
                  "keyword",
                  "length",
                  "percentage",
                  "color"
                ],
                "correctAnswer": "keyword",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property controls the transparency level of an element, affecting the entire element including its child elements?",
                "options": [
                  "background-color",
                  "border-color",
                  "opacity",
                  "visibility"
                ],
                "correctAnswer": "opacity",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Solid Background Color and Centered Text",
                "description": "Apply a solid background color and center text properties to a `<div>` element using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following `<div>` element:\n1. Create a `<div>` with the class 'solid-background'. Apply a solid background color of lightblue to it.\n2. The `<div>` should have a height of 200px and a width of 300px.\n3. Center the text horizontally and vertically inside the `<div>`.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Solid Background Color</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<div class=\"solid-background\">Centered Text</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Solid Background Color</title></head><body><div class=\"solid-background\">Centered Text</div></body></html>",
                    "required": [
                      ".solid-background { background-color: lightblue; height: 200px; width: 300px; display: flex; align-items: center; justify-content: center; text-align: center; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Background Image Without Repeat",
                "description": "Add a background image to a `<div>` and ensure it does not repeat using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following `<div>` element:\n1. Use the class 'background-image' to apply a background image with the URL 'https://png.pngtree.com/thumb_back/fh260/background/20220522/pngtree-e-learning-course-banner-online-tutor-image_1375102.jpg'.\n2. Ensure the background image is set to not repeat, cover the entire `<div>`, and be centered.\n3. The `<div>` should have a height of 300px and a width of 400px.\n4. Add the text 'Hello CodeCraft' inside the `<div>`, and make the text color white.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Image Example</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"background-image\">Hello CodeCraft</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Background Image Example</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"background-image\">Hello CodeCraft</div>\n</body>\n</html>",
                    "required": [
                      ".background-image { background-image: url('https://png.pngtree.com/thumb_back/fh260/background/20220522/pngtree-e-learning-course-banner-online-tutor-image_1375102.jpg'); background-repeat: no-repeat; background-size: cover; background-position: center; height: 300px; width: 400px; display: flex; align-items: center; justify-content: center; color: white; text-align: center; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Gradient Background",
                "description": "Apply a gradient background to a `<div>` using CSS.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following `<div>` element:\n1. Create a `<div>` with the class 'gradient-overlay'. Apply a linear gradient background from red to yellow.\n2. The `<div>` should have a height of 300px and a width of 400px.\n3. Add the text 'CodeCraft' inside the `<div>`, and make the text bold and black.\n4. Ensure the text is centered both horizontally and vertically within the `<div>`.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Gradient Overlay</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<div class=\"gradient-overlay\">CodeCraft</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Gradient Overlay</title></head><body><div class=\"gradient-overlay\">CodeCraft</div></body></html>",
                    "required": [
                      ".gradient-overlay { background: linear-gradient(to right, red, yellow); height: 300px; width: 400px; display: flex; align-items: center; justify-content: center; color: black; text-align: center; font-weight: bold; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Tiled Background and Absolute Text Positioning",
                "description": "Apply a tiled background image and position text absolutely within a `<div>` using CSS.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following elements:\n1. Create a `<div>` with the class 'tiled-background'. Apply a tiled background image with the URL 'https://png.pngtree.com/thumb_back/fh260/background/20220522/pngtree-e-learning-course-banner-online-tutor-image_1375102.jpg'.\n2. Ensure the background image repeats to cover the entire `<div>`.\n3. Inside the 'tiled-background' div, position a `<p>` element with the class 'absolute-text' absolutely. Center the text horizontally and vertically within the `<div>`.\n4. The `<div>` should have a height of 200px and a width of 300px.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html>\n<head>\n<title>Tiled Background and Absolute Text</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n<div class=\"tiled-background\">\n  <p class=\"absolute-text\">Centered Text</p>\n</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Tiled Background and Absolute Text</title></head><body><div class=\"tiled-background\"><p class=\"absolute-text\">Centered Text</p></div></body></html>",
                    "required": [
                      ".tiled-background { background-image: url('https://png.pngtree.com/thumb_back/fh260/background/20220522/pngtree-e-learning-course-banner-online-tutor-image_1375102.jpg'); background-repeat: repeat; height: 200px; width: 300px; position: relative; }",
                      ".absolute-text { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced Background Opacity and Shadow Effects",
                "description": "Create a layout using multiple `<div>` elements with different background opacity levels, border-radius, and shadow effects to demonstrate advanced CSS techniques.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following elements to create a visually complex layout.\nFirst, create a <div> with the class container.\nInside this <div>, include four child <div> elements, each with the class box.\nFor each box, apply a different background color with varying opacity using rgba.\nThe colors to use are: rgba(255, 99, 71, 1) for the first box, rgba(255, 99, 71, 0.7) for the second box, rgba(255, 99, 71, 0.5) for the third box, and rgba(255, 99, 71, 0.3) for the fourth box.\nThe container <div> should be styled with a maximum width of 600px, centered horizontally on the page with margin: auto, and include padding of 20px around the boxes.\nEach box should have a height of 100px, white text that is centered both horizontally and vertically, a border-radius of 10px, and a box-shadow of 0 4px 8px rgba(0, 0, 0, 0.3) for a subtle 3D effect.\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advanced Background Opacity Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box box1\">Box 1</div>\n        <div class=\"box box2\">Box 2</div>\n        <div class=\"box box3\">Box 3</div>\n        <div class=\"box box4\">Box 4</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html><head><title>Advanced Background Opacity Example</title></head><body><div class=\"container\"><div class=\"box box1\">Box 1</div><div class=\"box box2\">Box 2</div><div class=\"box box3\">Box 3</div><div class=\"box box4\">Box 4</div></div></body></html>",
                    "required": [
                      ".container { max-width: 600px; margin: 0 auto; padding: 20px; }",
                      ".box { height: 100px; color: white; text-align: center; line-height: 100px; font-size: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin: 10px; }",
                      ".box1 { background-color: rgba(255, 99, 71, 1); }",
                      ".box2 { background-color: rgba(255, 99, 71, 0.7); }",
                      ".box3 { background-color: rgba(255, 99, 71, 0.5); }",
                      ".box4 { background-color: rgba(255, 99, 71, 0.3); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 6:Understanding CSS Gradients",
            "documents": [
              {
                "title": "CSS: Gradient Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS gradient</strong>s allow for smooth transitions between two or more colors, enhancing the visual appeal of backgrounds, borders, and other elements on a webpage."
                  },
                  {
                    "type": "sentence",
                    "text": "There are three main types of gradients in CSS:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Linear Gradients</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Radial Gradients</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Conic Gradients</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Linear Gradient</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>linear-gradient()</strong> function creates a smooth linear transition between two or more colors. This property can be used to add depth and dimension to elements. For instance:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".example {\n    height: 200px;\n    background: linear-gradient(lightblue, blue);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linear Gradient Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"example\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> This example creates a linear gradient that transitions from light blue at the top to blue at the bottom. The gradient is applied to a div element with a height of 200px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax and Direction</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the <strong>linear-gradient()</strong> function is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-image: linear-gradient(direction, color1, color2, ...);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• direction:</strong> Specifies the direction of the gradient.<strong>\n•color1, color2, ...:</strong> The colors to transition between.\nThe default gradient flows from top to bottom, but this can be changed using keywords or angle values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Using Keywords for Direction</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>gradient's direction</strong> can be specified using keywords like to left, to right, to top, and to bottom. Here are some examples:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    height: 100px;\n    border: 1px solid black;\n    margin-bottom: 20px;\n}\n\n.box1 {\n    background-image: linear-gradient(to bottom, lightblue, blue);\n}\n\n.box2 {\n    background-image: linear-gradient(to top, lightblue, blue);\n}\n\n.box3 {\n    background-image: linear-gradient(to right, lightblue, blue);\n}\n\n.box4 {\n    background-image: linear-gradient(to left, lightblue, blue);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Keyword Direction Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box box1\"></div>\n    <div class=\"box box2\"></div>\n    <div class=\"box box3\"></div>\n    <div class=\"box box4\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> These examples demonstrate using different directions for linear gradients. The gradients flow from one edge to another, using light blue and blue."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Diagonal Gradients</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Diagonal gradients</strong> can be created by combining horizontal and vertical direction keywords:"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    height: 100px;\n    border: 1px solid black;\n    margin-bottom: 20px;\n    color: white; /* Make text visible against the gradient */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 16px;\n    font-weight: bold;\n}\n\n/* Diagonal from top-left to bottom-right */\n.box1 {\n    background-image: linear-gradient(to bottom right, lightblue, blue);\n}\n\n/* Diagonal from bottom-right to top-left */\n.box2 {\n    background-image: linear-gradient(to top left, lightblue, blue);\n}\n\n/* Diagonal from bottom-left to top-right */\n.box3 {\n    background-image: linear-gradient(to top right, lightblue, blue);\n}\n\n/* Diagonal from top-right to bottom-left */\n.box4 {\n    background-image: linear-gradient(to bottom left, lightblue, blue);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Diagonal Gradient Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box box1\">Top Left to Bottom Right</div>\n    <div class=\"box box2\">Bottom Right to Top Left</div>\n    <div class=\"box box3\">Bottom Left to Top Right</div>\n    <div class=\"box box4\">Top Right to Bottom Left</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> This example demonstrates diagonal gradients flowing in various directions with a transition from light blue to blue."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Repeating Linear Gradients</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Repeating linear gradients</strong> can be created using the repeating-linear-gradient() function, which repeats a linear gradient pattern."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".repeating-box {\n    height: 100px;\n    border: 1px solid black;\n    background-image: repeating-linear-gradient(\n        lightblue,\n        blue 10%,\n        lightblue 20%\n    );\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Repeating Linear Gradient Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box repeating-box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> This example uses repeating-linear-gradient() to create a pattern that repeats every 20% of the element's width, alternating between light blue and blue."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Multiple Colors in a Gradient</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Gradients can transition smoothly between more than two colors."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".multiple-colors {\n    height: 100px;\n    border: 1px solid black;\n    background-image: linear-gradient(to right, lightblue, red, yellow);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Multiple Colors Gradient Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box multiple-colors\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Description:</strong> In this example, a gradient transitions from light blue to red and then to yellow, creating a smooth color transition across the width of the element."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Radial Gradients",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS radial gradients</strong> create a smooth transition of colors radiating outward from a central point. They are useful for creating circular or elliptical color effects. In this lesson, we'll explore various ways to utilize radial gradients in CSS, including shapes, sizes, positions, and multiple color stops."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Radial Gradient Basics</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Radial gradients are defined using the <strong>radial-gradient()</strong> function. By default, the gradient is elliptical and extends from the center of the element. Here's the basic syntax:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-image: radial-gradient(shape size at position, start-color, ..., last-color);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•shape:</strong> Defines the shape of the gradient (e.g., circle or ellipse)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•size:</strong> Defines the size of the gradient (e.g., farthest-side, closest-corner)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•position:</strong> Defines the position of the gradient's center (e.g., 50% 50% or 100px)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•start-color:</strong> The starting color of the gradient."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•last-color:</strong> The ending color of the gradient."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Examples</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Basic Radial Gradient</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-basic {\n    height: 200px;\n    width: 300px;\n    background-image: radial-gradient(yellow, purple);\n    color: white;\n    text-align: center;\n    line-height: 200px;\n    font-size: 24px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Radial Gradient</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-basic\">Radial Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example demonstrates a radial gradient that transitions from yellow at the center to purple at the edges."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Radial Gradient with Different Shapes</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-ellipse, .gradient-circle {\n    height: 200px;\n    width: 300px;\n    color: white;\n    text-align: center;\n    line-height: 200px;\n    font-size: 24px;\n}\n\n.gradient-ellipse {\n    background-image: radial-gradient(ellipse, green, blue);\n}\n\n.gradient-circle {\n    background-image: radial-gradient(circle, green, blue);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Shapes</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-ellipse\">Ellipse Gradient</div>\n    <div class=\"gradient-circle\">Circle Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example demonstrates radial gradients with different shapes. The ellipse gradient extends in an elliptical shape, while the circle gradient is perfectly circular."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Radial Gradient with Different Sizes</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-farthest-side, .gradient-closest-side {\n    height: 200px;\n    width: 300px;\n    color: white;\n    text-align: center;\n    line-height: 200px;\n    font-size: 24px;\n}\n\n.gradient-farthest-side {\n    background-image: radial-gradient(circle farthest-side, blue, red);\n}\n\n.gradient-closest-side {\n    background-image: radial-gradient(circle closest-side, blue, red);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Sizes</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-farthest-side\">Farthest Side Gradient</div>\n    <div class=\"gradient-closest-side\">Closest Side Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> Here, the farthest-side gradient stretches to the farthest edge of the element, while the closest-side gradient shrinks to fit the closest edge."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Radial Gradient with Length Units</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-100px, .gradient-200px {\n    height: 200px;\n    width: 300px;\n    color: white;\n    text-align: center;\n    line-height: 200px;\n    font-size: 24px;\n}\n\n.gradient-100px {\n    background-image: radial-gradient(circle 100px, blue, red);\n}\n\n.gradient-200px {\n    background-image: radial-gradient(circle 200px, blue, red);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Length Units</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-100px\">100px Radius</div>\n    <div class=\"gradient-200px\">200px Radius</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example shows radial gradients with specific sizes defined in pixels. The gradient has a radius of 100px and 200px, affecting how the colors transition."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Radial Gradient with Different Positions</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-pixel, .gradient-percentage {\n    height: 200px;\n    width: 300px;\n    color: white;\n    text-align: center;\n    line-height: 200px;\n    font-size: 24px;\n}\n\n.gradient-pixel {\n    background-image: radial-gradient(circle 100px at 100px, blue, red);\n}\n\n.gradient-percentage {\n    background-image: radial-gradient(circle 100px at 80% 20%, blue, red);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Positions</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-pixel\">Position: 100px</div>\n    <div class=\"gradient-percentage\">Position: 80% 20%</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example demonstrates how the position of the radial gradient can be adjusted using pixels and percentages. The gradient’s center is positioned at specific points within the element."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Radial Gradient with Multiple Colors</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-multi-colors {\n    height: 300px;\n    width: 300px;\n    background-image: radial-gradient(circle, red, blue, black);\n    color: white;\n    text-align: center;\n    line-height: 300px;\n    font-size: 24px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Multiple Colors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-multi-colors\">Multiple Colors Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example shows a radial gradient with multiple colors. The gradient transitions from red in the center to blue and then to black at the edges."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>Radial Gradient with Color Stops</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-color-stops {\n    height: 300px;\n    width: 300px;\n    background-image: radial-gradient(circle, red 20%, blue 40%, black 60%);\n    color: white;\n    text-align: center;\n    line-height: 300px;\n    font-size: 24px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Radial Gradient Color Stops</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-color-stops\">Color Stops Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example demonstrates a radial gradient with specific color stop values. The colors change at designated percentages from the center, providing a controlled transition."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>Repeating Radial Gradient</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-repeating {\n    height: 300px;\n    width: 300px;\n    background-image: repeating-radial-gradient(circle, red 20%, blue 40%);\n    color: white;\n    text-align: center;\n    line-height: 300px;\n    font-size: 24px;\n}",
                    "supportngcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Repeating Radial Gradient</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-repeating\">Repeating Radial Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example illustrates the repeating-radial-gradient() function. It creates a repeating pattern with radial gradients transitioning from red to blue."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Conic Gradients",
                "content": [
                  {
                    "type": "sentence",
                    "text": "A <strong>conic gradient</strong> is a type of gradient that creates color transitions rotated around a central point. It can be used to create pie charts, color wheels, and other circular color effects. This lesson will cover the syntax and various examples of using conic gradients."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "background-image: conic-gradient([from angle] [at position,] color [degree], color [degree], ...);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•from angle:</strong> Specifies the starting angle for the gradient (optional)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•at position:</strong> Specifies the center point of the gradient (optional, default is center)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•color:</strong> The colors to be used in the gradient."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•degree:</strong> The angle at which each color ends (optional, default spreads colors equally)."
                  },
                  {
                    "type": "sentence",
                    "text": "If no degree is specified, the colors are distributed evenly around the center point."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Examples</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. Conic Gradient with Three Colors"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-three-colors {\n  height: 300px;\n  width: 300px;\n  background-image: conic-gradient(#ff69b4, #ba55d3, #00ced1);\n  color: white;\n  text-align: center;\n  line-height: 300px;\n  font-size: 24px;\n  border-radius: 50%;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Conic Gradient Three Colors</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"gradient-three-colors\">Conic Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation: </strong>This example shows a conic gradient with three colors: pink, purple, and teal. The colors transition smoothly around the central point."
                  },
                  {
                    "type": "sentence",
                    "text": "2. Conic Gradient with Specified Angles"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-specified-angles {\n  height: 300px;\n  width: 300px;\n  background-image: conic-gradient(#ff4500 45deg, #32cd32 90deg, #1e90ff 210deg);\n  color: white;\n  text-align: center;\n  line-height: 300px;\n  font-size: 24px;\n  border-radius: 50%;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Conic Gradient - Specified Angles</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"gradient-specified-angles\">Specified Angles</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> In this example, each color's transition angle is specified. The gradient starts with orange-red, transitions to lime green at 45 degrees, and then to dodger blue at 210 degrees."
                  },
                  {
                    "type": "sentence",
                    "text": "3. Repeating Conic Gradient"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gradient-repeating {\n  height: 300px;\n  width: 300px;\n  background-image: repeating-conic-gradient(#ff69b4 0deg 10deg, #00ced1 10deg 20deg, #ba55d3 20deg 30deg);\n  color: white;\n  text-align: center;\n  line-height: 300px;\n  font-size: 24px;\n  border-radius: 50%;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Repeating Conic Gradient</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"gradient-repeating\">Repeating Gradient</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example uses the repeating-conic-gradient() function to create a repeating pattern. The gradient repeats every 30 degrees, transitioning between pink, teal, and purple."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Gradient Functions</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•conic-gradient():</strong> Creates a conic gradient with color transitions around a center point. You must define at least two colors."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•linear-gradient():</strong> Produces a linear gradient that transitions between colors from top to bottom (or in a specified direction). At least two colors are required."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•radial-gradient():</strong> Generates a radial gradient with colors radiating from the center to the edges. At least two colors must be defined."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•repeating-conic-gradient():</strong> Repeats a conic gradient, creating a cyclical pattern of colors."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•repeating-linear-gradient():</strong> Repeats a linear gradient, allowing for continuous repetition of the color pattern."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•repeating-radial-gradient():</strong> Repeats a radial gradient, creating a recurring radial pattern."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "Which CSS function creates a smooth linear transition between two or more colors?",
                "options": [
                  "radial-gradient()",
                  "conic-gradient()",
                  "linear-gradient()",
                  "repeating-linear-gradient()"
                ],
                "correctAnswer": "linear-gradient()",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the default direction of the gradient in the linear-gradient() function if no direction is specified?",
                "options": [
                  "Left to Right",
                  "Top to Bottom",
                  "Diagonal from Top Left to Bottom Right",
                  "Bottom to Top"
                ],
                "correctAnswer": "Top to Bottom",
                "points": 2,
                "locked": true
              },
              {
                "question": "How would you define a diagonal gradient that transitions from the top left corner to the bottom right corner?",
                "options": [
                  "linear-gradient(to top right, lightblue, blue)",
                  "linear-gradient(to bottom right, lightblue, blue)",
                  "linear-gradient(to top left, lightblue, blue)",
                  "linear-gradient(to bottom left, lightblue, blue)"
                ],
                "correctAnswer": "linear-gradient(to bottom right, lightblue, blue)",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS function creates a smooth transition of colors radiating outward from a central point?",
                "options": [
                  "linear-gradient()",
                  "radial-gradient()",
                  "conic-gradient()",
                  "repeating-linear-gradient()"
                ],
                "correctAnswer": "radial-gradient()",
                "points": 2,
                "locked": true
              },
              {
                "question": "In the radial-gradient() function, what shape option would you use to create a perfectly circular gradient?",
                "options": [
                  "ellipse",
                  "circle",
                  "square",
                  "polygon"
                ],
                "correctAnswer": "circle",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does the circle farthest-side size value affect the radial gradient?",
                "options": [
                  "It stretches the gradient to the farthest edge of the element.",
                  "It shrinks the gradient to fit the closest edge of the element.",
                  "It creates a gradient with a fixed size of 100px.",
                  "It creates a gradient with a repeating pattern."
                ],
                "correctAnswer": "It stretches the gradient to the farthest edge of the element.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property is used to define the specific color stops in a radial gradient?",
                "options": [
                  "background-position",
                  "background-size",
                  "background-repeat",
                  "color stops"
                ],
                "correctAnswer": "color stops",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the \"from angle\" specify in a CSS radial gradient?",
                "options": [
                  "The shape of the gradient",
                  "The starting angle for the gradient",
                  "The size of the gradient",
                  "The center point of the gradient"
                ],
                "correctAnswer": "The starting angle for the gradient",
                "points": 2,
                "locked": true
              },
              {
                "question": "In a CSS radial gradient, what does the \"at position\" value define?",
                "options": [
                  "The colors used in the gradient",
                  "The ending angle of each color",
                  "The center point of the gradient",
                  "The shape of the gradient"
                ],
                "correctAnswer": "The center point of the gradient",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the default behavior of color distribution in a CSS radial gradient if no specific degrees are specified?",
                "options": [
                  "Colors are distributed based on the gradient's shape",
                  "Colors are distributed based on the gradient's size",
                  "Colors are spread equally",
                  "Colors are placed at random intervals"
                ],
                "correctAnswer": "Colors are spread equally",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Soft Gradient Background",
                "description": "Design a `<div>` element with a soft, elegant linear gradient background.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the <div> element with the class gradient-box. Apply a linear gradient background that transitions from light lavender (#E0BBE4) to deep purple (#D291BC).\n1 The <div> should have a height of 300px.\n2 Add border-radius: 10px; and box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); for a more refined appearance.\n3 All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Soft Gradient Background</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-box\"></div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Soft Gradient Background</title></head><body><div class=\"gradient-box\"></div></body></html>",
                    "required": [
                      ".gradient-box { height: 300px; background: linear-gradient(to bottom, #E0BBE4, #D291BC); border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Colorful Radial Gradient",
                "description": "Apply a vibrant radial gradient to a `<div>` element.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the <div> element with the class gradient-box. Apply a radial gradient background that transitions from bright orange (#FFA500) at the center to pink (#FF69B4) and purple (#8A2BE2) at the edges.\n1 The <div> should have a height of 300px.\n2 Add border-radius: 10px; and box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); for enhanced visual appeal.\n3 All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Colorful Radial Gradient</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-box\"></div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Colorful Radial Gradient</title></head><body><div class=\"gradient-box\"></div></body></html>",
                    "required": [
                      ".gradient-box { height: 300px; background: radial-gradient(circle, #FFA500, #FF69B4, #8A2BE2); border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Diagonal Linear Gradient with Overlay",
                "description": "Create a diagonal linear gradient with an overlay effect on a `<div>` element.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the <div> element with the class gradient-box. Apply a diagonal linear gradient background that transitions from light teal (rgba(0, 128, 128, 0.8)) to dark blue (rgba(0, 0, 139, 0.8)). The gradient should transition diagonally at 135 degrees.\n1 Add a subtle overlay effect using semi-transparent white (rgba(255, 255, 255, 0.1)).\n2 The <div> should have a height of 300px.\n3 Add border-radius: 10px; and box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); for a polished look.\n4 All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Diagonal Gradient with Overlay</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-box\"></div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Diagonal Gradient with Overlay</title></head><body><div class=\"gradient-box\"></div></body></html>",
                    "required": [
                      ".gradient-box { height: 300px; background: linear-gradient(135deg, rgba(0, 128, 128, 0.8), rgba(0, 0, 139, 0.8)), radial-gradient(circle, rgba(255, 255, 255, 0.1), rgba(0, 0, 0, 0.2)); border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Triangular Gradient Pattern",
                "description": "Create a background with a triangular gradient pattern.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the <div> element with the class gradient-box. Apply a repeating linear gradient background that transitions from coral (#FF6347) to gold (#FFD700) with a triangular pattern. The gradient should repeat diagonally at a 45-degree angle, with each color stop extending for 20 pixels. The coral color should cover the first 20 pixels, and the gold color should cover the next 20 pixels, creating a pattern that repeats every 40 pixels.\n1 Add border-radius: 10px; and box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); to enhance the styling.\n2 The <div> should have a height of 300px.\n3 All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Triangular Gradient Pattern</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gradient-box\"></div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Triangular Gradient Pattern</title></head><body><div class=\"gradient-box\"></div></body></html>",
                    "required": [
                      ".gradient-box { height: 300px; background: repeating-linear-gradient(45deg, #FF6347, #FF6347 20px, #FFD700 20px, #FFD700 40px); border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Complex Multi-Directional Gradient with Shapes",
                "description": "Design a `<div>` element with multiple overlapping gradients and geometric shapes using CSS.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the <div> element with the class complex-gradient-box. Apply multiple gradients including a diagonal linear gradient, a radial gradient, and an additional linear gradient to create a complex, multi-directional gradient effect. The diagonal linear gradient should transition from light pink (#FF7E5F) to light orange (#FEB47B) diagonally from the top left to the bottom right.\n1 The radial gradient should transition from light teal (#6CC4C2) at the center to deep purple (#8E2DE2) at the edges.\n2 The additional linear gradient should transition from bright red (#FF6F61) to dark pink (#D74177) diagonally from the bottom left to the top right.\n3 Use background-blend-mode: multiply; to blend these gradients. Ensure the <div> has a height of 300px, a border-radius: 10px;, and a box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); for a polished look.\n4 The <div> should have position: relative; for positioning overlaying shapes.\n5 Add geometric shapes (circles and triangles) using absolute positioning. The circle should have a diameter of 100px, a background color of golden yellow (#FFD700), and be positioned at top: 20px; left: 20px;. The triangle should have a base of 100px, a height of 100px, a background color of coral (#FF6347), and be positioned at top: 120px; left: 120px;.\n6 All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Complex Multi-Directional Gradient with Shapes</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"complex-gradient-box\">\n        <div class=\"shape circle\"></div>\n        <div class=\"shape triangle\"></div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Complex Multi-Directional Gradient with Shapes</title></head><body><div class=\"complex-gradient-box\"><div class=\"shape circle\"></div><div class=\"shape triangle\"></div></div></body></html>",
                    "required": [
                      ".complex-gradient-box { height: 300px; background: linear-gradient(to bottom right, #FF7E5F, #FEB47B), radial-gradient(circle, #6CC4C2, #8E2DE2), linear-gradient(to top left, #FF6F61, #D74177); background-blend-mode: multiply; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); position: relative; }",
                      ".shape { position: absolute; }",
                      ".shape.circle { width: 100px; height: 100px; background: #FFD700; border-radius: 50%; top: 20px; left: 20px; }",
                      ".shape.triangle { width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid #FF6347; top: 120px; left: 120px; position: absolute; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 7: CSS Border Essentials",
            "documents": [
              {
                "title": "CSS Borders",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The CSS border properties</strong> allow you to define the style, width, and color of an element's border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Borders on All Sides:</strong> Apply borders to all sides of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Red Bottom Border:</strong> Specify a border only on the bottom of an element and set its color."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Rounded Borders:</strong> Use border-radius to make borders rounded."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Blue Left Border:</strong> Set a border on a specific side of an element and customize its color."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Border Style</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>border-style</strong> property specifies the type of border to display."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>dotted: </strong>defines a dotted border."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>dashed: </strong> defines a dashed border."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>solid:</strong> defines a solid border."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>double:</strong> defines a double border."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>groove:</strong> defines a 3D grooved border; the appearance depends on the border-color value."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>ridge:</strong> defines a 3D ridged border; the effect depends on the border-color value."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>inset:</strong> defines a 3D inset border; the effect depends on the border-color value."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>outset:</strong> defines a 3D outset border; the effect depends on the border-color value."
                  },
                  {
                    "type": "sentence",
                    "text": "9. <strong>none:</strong> specifies no border."
                  },
                  {
                    "type": "sentence",
                    "text": "10. <strong>hidden:</strong> defines a hidden border, similar to none but used in different contexts."
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>border-style</strong> property can be set with one to four values, corresponding to the top, right, bottom, and left borders."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Borders on All Sides</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-all {\n    border: 2px solid black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Borders on All Sides</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-all\">Borders on All Sides</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Red Bottom Border</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-bottom {\n    border-bottom: 2px solid red;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Red Bottom Border</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-bottom\">Red Bottom Border</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Rounded Borders</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-rounded {\n    border: 2px solid black;\n    border-radius: 15px;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rounded Borders</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-rounded\">Rounded Borders</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Blue Left Border</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-left {\n    border-left: 2px solid blue;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blue Left Border</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-left\">Blue Left Border</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Different Border Styles</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p {\n    padding: 10px;\n    margin: 10px 0;\n}\n\n.dotted {border-style: dotted;}\n.dashed {border-style: dashed;}\n.solid {border-style: solid;}\n.double {border-style: double;}\n.groove {border-style: groove;}\n.ridge {border-style: ridge;}\n.inset {border-style: inset;}\n.outset {border-style: outset;}\n.none {border-style: none;}\n.hidden {border-style: hidden;}\n.mix {border-style: dotted dashed solid double;}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Different Border Styles</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"dotted\">Dotted Border</p>\n    <p class=\"dashed\">Dashed Border</p>\n    <p class=\"solid\">Solid Border</p>\n    <p class=\"double\">Double Border</p>\n    <p class=\"groove\">Groove Border</p>\n    <p class=\"ridge\">Ridge Border</p>\n    <p class=\"inset\">Inset Border</p>\n    <p class=\"outset\">Outset Border</p>\n    <p class=\"none\">No Border</p>\n    <p class=\"hidden\">Hidden Border</p>\n    <p class=\"mix\">Mixed Borders</p>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Border Width",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>The border-width</strong> property in CSS allows you to define the width of the borders around an element."
                  },
                  {
                    "type": "sentence",
                    "text": "You can specify the width in units like pixels (px), points (pt), centimeters (cm), or use pre-defined values such as thin, medium, and thick."
                  },
                  {
                    "type": "sentence",
                    "text": "This property can be applied to all four borders individually or collectively."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Border Width Basics:</strong> The border-width property accepts one to four values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•One Value:</strong> applies the same width to all four borders."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Two Values:</strong> The first value applies to the top and bottom borders, while the second value applies to the left and right borders."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Three Values:</strong> The first value applies to the top border, the second to the left and right borders, and the third to the bottom border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Four Values:</strong> applies specific widths to the top, right, bottom, and left borders respectively."
                  },
                  {
                    "type": "sentence",
                    "text": "You can use specific size units or pre-defined values."
                  },
                  {
                    "type": "snippet",
                    "text": "The syntax for border-width is:",
                    "code": "border-width: [top-width] [right-width] [bottom-width] [left-width];code"
                  },
                  {
                    "type": "sentence",
                    "text": "Alternatively, you can use:",
                    "code": "border-width: thin | medium | thick;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Single Border Width</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-single {\n    border: 5px solid black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Single Border Width</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-single\">Single Border Width</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example sets a border width of 5 pixels for all four sides of the element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Different Widths for Different Borders</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-multiple {\n    border-width: 2px 4px 6px 8px;\n    border-style: solid;\n    border-color: black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Different Border Widths</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-multiple\">Different Border Widths</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example sets different border widths for each side: 2px for the top, 4px for the right, 6px for the bottom, and 8px for the left."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Using Pre-defined Values</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-predefined {\n    border-width: medium;\n    border-style: solid;\n    border-color: black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pre-defined Border Widths</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-predefined\">Pre-defined Border Widths</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example uses the pre-defined value medium to set a border width."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Multiple Borders with Different Sizes</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-combined {\n    border-width: 1px 2px 3px 4px;\n    border-style: solid;\n    border-color: black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Combined Border Widths</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-combined\">Combined Border Widths</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example combines various border widths with the border-width property, setting 1px for the top, 2px for the right, 3px for the bottom, and 4px for the left borders."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Border Color",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong> border-color </strong> property in CSS is used to set the color of the borders of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "This property can specify colors using names, HEX values, RGB values, HSL values, or the keyword transparent."
                  },
                  {
                    "type": "sentence",
                    "text": "If not explicitly set, the border color inherits the color of the element."
                  },
                  {
                    "type": "snippet",
                    "text": "<strong>Syntax:</strong> ",
                    "code": "border-color: color | transparent;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• color:</strong> specifies the color value in any format such as color name, HEX, RGB, and HSL."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• transparent:</strong> sets the border color to be transparent."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example CSS Styles:</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\n.example {\n    border-style: solid;\n    padding: 10px;\n    margin-bottom: 20px;\n}\n\n.border-single {\n    border-color: red; /* Color name */\n    border-width: 2px;\n}\n\n.border-hex {\n    border-color: #ff0000; /* HEX value */\n    border-width: 2px;\n}\n\n.border-rgb {\n    border-color: rgb(255, 0, 0); /* RGB value */\n    border-width: 2px;\n}\n\n.border-hsl {\n    border-color: hsl(0, 100%, 50%); /* HSL value */\n    border-width: 2px;\n}\n\n.border-transparent {\n    border-color: transparent; /* Transparent border */\n    border-width: 2px;\n}\n\n.border-specific {\n    border-width: 2px;\n    border-style: solid;\n    border-color: red green blue yellow; /* red top, green right, blue bottom, yellow left */\n}\n\nh2 {\n    margin-top: 30px;\n    border-bottom: 2px solid #ccc;\n    padding-bottom: 5px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Border Color Examples</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>CSS Border Color Examples</h1>\n\n    <h2>1. Single Color</h2>\n    <div class=\"example border-single\">Single Border Color (Red)</div>\n\n    <h2>2. HEX Value</h2>\n    <div class=\"example border-hex\">HEX Border Color (#ff0000)</div>\n\n    <h2>3. RGB Value</h2>\n    <div class=\"example border-rgb\">RGB Border Color (rgb(255, 0, 0))</div>\n\n    <h2>4. HSL Value</h2>\n    <div class=\"example border-hsl\">HSL Border Color (hsl(0, 100%, 50%))</div>\n\n    <h2>5. Transparent Border</h2>\n    <div class=\"example border-transparent\">Transparent Border</div>\n\n    <h2>6. Specific Side Colors</h2>\n    <div class=\"example border-specific\">Specific Side Border Colors (Top: Red, Right: Green, Bottom: Blue, Left: Yellow)</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>1. Single Color:</strong> The border color is set to red."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>2. HEX Value:</strong> The border color is specified using the HEX value #ff0000."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>3. RGB Value:</strong> The border color is specified using the RGB value rgb(255, 0, 0)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>4. HSL Value:</strong> The border color is specified using the HSL value hsl(0, 100%, 50%)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>5. Transparent Border:</strong> The border color is set to transparent."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>6. Specific Side Colors:</strong> The border colors are set specifically: red for the top, green for the right, blue for the bottom, and yellow for the left."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Border Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>CSS border shorthand</strong> property allows you to set the border of an element in a single declaration."
                  },
                  {
                    "type": "sentence",
                    "text": "It defines the border's width, style, and color."
                  },
                  {
                    "type": "snippet",
                    "text": "<strong>Syntax:</strong> The syntax for the border shorthand property is: ",
                    "code": "border: border-width border-style border-color;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-width:</strong> Specifies the width of the border, which can be set using length units (e.g., 2px, 4px) or keywords (thin, medium, thick)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-style:</strong> Specifies the style of the border, with options including solid, dashed, dotted, double, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-color:</strong> Specifies the color of the border, which can be set using color names (e.g., red), HEX values (e.g., #ff0000), RGB values (e.g., rgb(255,0,0)), or HSL values (e.g., hsl(0, 100%, 50%))."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example CSS Styles:</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Basic styling for paragraphs */\np {\n    padding: 4px;\n    margin: 10px 0;\n}\n\n/* Solid border example */\n.border-solid {\n    border: 2px solid orange;\n}\n\n/* Dashed border example */\n.border-dashed {\n    border: 4px dashed green;\n}\n\n/* Dotted border example */\n.border-dotted {\n    border: 2px dotted black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Border Examples</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>CSS Border Property Examples</h1>\n\n    <h2>1. Solid Border</h2>\n    <p class=\"border-solid\">This paragraph has a solid border.</p>\n\n    <h2>2. Dashed Border</h2>\n    <p class=\"border-dashed\">This paragraph has a dashed border.</p>\n\n    <h2>3. Dotted Border</h2>\n    <p class=\"border-dotted\">This paragraph has a dotted border.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>How It Works:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. The declaration <strong>border: 2px solid orange;</strong> means the border is 2 pixels wide, solid, and orange."
                  },
                  {
                    "type": "sentence",
                    "text": "2. The declaration <strong>border: 4px dashed green;</strong> means the border is 4 pixels wide, dashed, and green."
                  },
                  {
                    "type": "sentence",
                    "text": "3. The declaration <strong>border: 2px dotted black;</strong> means the border is 2 pixels wide, dotted, and black."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Border Image Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>border-image</strong> property in CSS allows you to use an image or gradient as the border of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "This property gives you more creative control over the appearance of the border compared to solid colors."
                  },
                  {
                    "type": "snippet",
                    "text": "<strong>Syntax:</strong> The syntax for the border-image property is: ",
                    "code": "border-image: source slice / width / outset repeat;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•source:</strong> Specifies the URL of the image or gradient."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•slice:</strong> Defines how much of the image is used for the border, measured in pixels."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•width:</strong> Sets the width of the border image."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•outset:</strong> Determines how far the border image extends beyond the border box."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•repeat:</strong> Controls how the image is repeated, with possible values being repeat, round, or space."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Using an Image for the Border</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n    border: solid; /* Required to show the border image */\n    border-image: url(\"https://img.freepik.com/premium-vector/geometric-background-bg-shape-background-square-background-polygonal-background-abstract-bg_634868-12.jpg\") 50 / 20px;\n    padding: 20px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Image Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>CSS Border Image Example</h1>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Using a Linear Gradient for the Border</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p {\n    border: 20px solid; /* Required to show the border image */\n    border-image: linear-gradient(to right, orange, red) 30;\n    padding: 12px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Gradient Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p>CSS Border Image with Gradient</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>How It Works:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-image-source:</strong> Sets the image or gradient to use for the border, specified in the source part of the syntax."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-image-slice:</strong> Determines how the image is sliced, defining the thickness of the image used for the border."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-image-width:</strong> Specifies the width of the border image, determining how thick the border will be."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong•>border-image-outset:</strong> Defines how far the border image extends beyond the element’s border box, which is optional."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•border-image-repeat:</strong> Controls how the image is repeated within the border, with options including repeat, round, and space."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Border-Radius Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>border-radius</strong> property in CSS is used to create rounded corners on an element’s border."
                  },
                  {
                    "type": "sentence",
                    "text": "It can be used to round individual corners or create circles and ellipses."
                  },
                  {
                    "type": "snippet",
                    "text": "<strong>Syntax:</strong> The syntax for the border-radius property is:",
                    "code": "border-radius: value | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•value:</strong> Specifies the radius of the border (e.g., 10px, 20%)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•initial:</strong> Sets the property to its default value (0)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•inherit:</strong> Inherits the property value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Basic Border Radius</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p {\n    border: 6px solid black;\n    padding: 12px;\n    background-color: skyblue;\n}\n\n.border-radius-4px {\n    border-radius: 4px;\n}\n\n.border-radius-12px {\n    border-radius: 12px;\n}\n\n.border-radius-percentage {\n    border-radius: 20%;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Radius Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"border-radius-4px\">Border Radius 4px</p>\n    <p class=\"border-radius-12px\">Border Radius 12px</p>\n    <p class=\"border-radius-percentage\">Border Radius 20%</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example shows different border-radius values: 4px, 12px, and 20%. Each value rounds the corners of the paragraphs to different extents."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Circular Shape</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".circle {\n    width: 150px;\n    height: 150px;\n    background-color: skyblue;\n    border: 8px solid black;\n    border-radius: 150px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Radius Circle Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"circle\">Circle</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> A div with equal width and height (150px) and a border-radius of 150px creates a perfect circle."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Elliptical Shape</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".ellipse {\n    width: 300px;\n    height: 150px;\n    background-color: skyblue;\n    border: 8px solid black;\n    border-radius: 50% / 45%;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Radius Ellipse Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"ellipse\">Ellipse</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> This example uses border-radius: 50% / 45% to create an elliptical shape with horizontal and vertical radii."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Border Radius Shorthand</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div {\n    width: 80px;\n    height: 60px;\n    background-color: skyblue;\n    border: 4px solid black;\n}\n\n.one-value {\n    border-radius: 12px;\n}\n\ntwo-value {\n    border-radius: 18px 30px;\n}\n\n.three-value {\n    border-radius: 12px 20px 4px;\n}\n\n.four-value {\n    border-radius: 12px 16px 28px 20px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Border Radius Shorthand Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"one-value\">One Value</div>\n    <div class=\"two-value\">Two Values</div>\n    <div class=\"three-value\">Three Values</div>\n    <div class=\"four-value\">Four Values</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The shorthand property border-radius allows specifying values for all four corners or combinations thereof, creating varied rounded effects."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What does the border-style property in CSS specify?",
                "options": [
                  "The width of the border",
                  "The color of the border",
                  "The type of border to display",
                  "The radius of the border"
                ],
                "correctAnswer": "The type of border to display",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which border-style value would create a 3D grooved effect?",
                "options": [
                  "solid",
                  "double",
                  "groove",
                  "dashed"
                ],
                "correctAnswer": "groove",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-radius property do?",
                "options": [
                  "Defines the style of the border",
                  "Sets the color of the border",
                  "Specifies the width of the border",
                  "Makes the borders rounded"
                ],
                "correctAnswer": "Makes the borders rounded",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-width property in CSS allow you to define?",
                "options": [
                  "Specifies the style of the border",
                  "Sets the color of the border",
                  "Defines the width of the borders around an element",
                  "Determines the rounded corners of the border"
                ],
                "correctAnswer": "Defines the width of the borders around an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-color property do in CSS?",
                "options": [
                  "Defines the style of the border",
                  "Sets the width of the border",
                  "Sets the color of the borders",
                  "Applies a gradient to the border"
                ],
                "correctAnswer": "Sets the color of the borders",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which keyword can be used with border-color to make the border completely invisible?",
                "options": [
                  "solid",
                  "transparent",
                  "dotted",
                  "black"
                ],
                "correctAnswer": "transparent",
                "points": 2,
                "locked": true
              },
              {
                "question": "What formats can be used to specify colors in the border-color property?",
                "options": [
                  "Only HEX values",
                  "Only color names",
                  "HEX values, RGB values, HSL values, or color names",
                  "Only RGB values"
                ],
                "correctAnswer": "HEX values, RGB values, HSL values, or color names",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border shorthand property in CSS specify?",
                "options": [
                  "Only the border color",
                  "Only the border style",
                  "The border's width, style, and color",
                  "Only the border width"
                ],
                "correctAnswer": "The border's width, style, and color",
                "points": 2,
                "locked": true
              },
              {
                "question": "How is the border width specified in the border shorthand property?",
                "options": [
                  "Using length units or keywords",
                  "Only using keywords",
                  "Only using length units",
                  "Only using percentages"
                ],
                "correctAnswer": "Using length units or keywords",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the correct syntax to set a border that is 4 pixels wide, dashed, and green?",
                "options": [
                  "border: 4px dashed green;",
                  "border: dashed 4px green;",
                  "border: green dashed 4px;",
                  "border: 4px green dashed;"
                ],
                "correctAnswer": "border: 4px dashed green;",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does the border color get specified in the border shorthand property?",
                "options": [
                  "Using color names, HEX values, RGB values, or HSL values",
                  "Only using HEX values",
                  "Only using color names",
                  "Only using RGB values"
                ],
                "correctAnswer": "Using color names, HEX values, RGB values, or HSL values",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-image-source property do?",
                "options": [
                  "Sets the image or gradient to use for the border",
                  "Specifies the width of the border image",
                  "Determines how the image is sliced",
                  "Defines how far the border image should extend beyond the element’s border box"
                ],
                "correctAnswer": "Sets the image or gradient to use for the border",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-image-slice property determine?",
                "options": [
                  "The thickness of the image used for the border",
                  "How far the border image should extend beyond the element’s border box",
                  "The width of the border image",
                  "How the image is repeated within the border"
                ],
                "correctAnswer": "The thickness of the image used for the border",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the border-radius property do?",
                "options": [
                  "Creates rounded corners on an element’s border",
                  "Sets the color of the border",
                  "Defines the style of the border",
                  "Specifies the width of the border"
                ],
                "correctAnswer": "Creates rounded corners on an element’s border",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for border-radius sets the property to its default value?",
                "options": [
                  "value",
                  "initial",
                  "inherit",
                  "transparent"
                ],
                "correctAnswer": "initial",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Basic Border Application",
                "description": "Apply a simple border to a `<div>` element.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the `<div>` element to have a border of 3px solid green. Ensure the border is visible around the `<div>` by adding padding of 15px and a margin of 10px.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Border</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>This is a simple border.</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Basic Border</title></head><body><div>This is a simple border.</div></body></html>",
                    "required": [
                      "div { border: 3px solid green; padding: 15px; margin: 10px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Rounded Borders",
                "description": "Create a `<div>` element with rounded corners.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the `<div>` element to have a border of 4px solid blue and a border-radius of 15px. Add padding of 20px and a margin of 10px.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rounded Borders</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>This border is rounded.</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Rounded Borders</title></head><body><div>This border is rounded.</div></body></html>",
                    "required": [
                      "div { border: 4px solid blue; border-radius: 15px; padding: 20px; margin: 10px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Different Border Styles",
                "description": "Apply different border styles to multiple `<div>` elements.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style three `<div>` elements with different border styles:\n1. Apply a 2px dotted border and a border color of black to the first `<div>`.\n2. Apply a 2px dashed border and a border color of black to the second `<div>`.\n3. Apply a 2px solid border and a border color of black to the third `<div>`.\nAdd padding of 10px and margin of 5px to each `<div>`.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Different Border Styles</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>This is a dotted border.</div>\n    <div>This is a dashed border.</div>\n    <div>This is a solid border.</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Different Border Styles</title></head><body><div>This is a dotted border.</div><div>This is a dashed border.</div><div>This is a solid border.</div></body></html>",
                    "required": [
                      "div:nth-of-type(1) { border: 2px dotted black; padding: 10px; margin: 5px; }\ndiv:nth-of-type(2) { border: 2px dashed black; padding: 10px; margin: 5px; }\ndiv:nth-of-type(3) { border: 2px solid black; padding: 10px; margin: 5px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Different Border Widths",
                "description": "Apply different border widths to each side of a `<div>` element.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the `<div>` element to have different border widths:\n1. Set the top border to 5px.\n2. Set the right border to 10px.\n3. Set the bottom border to 15px.\n4. Set the left border to 20px.\nApply a solid border style and a black border color. Add padding of 15px.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Different Border Widths</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>This has different border widths on each side.</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Different Border Widths</title></head><body><div>This has different border widths on each side.</div></body></html>",
                    "required": [
                      "div { border-width: 5px 10px 15px 20px; border-style: solid; border-color: black; padding: 15px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Complex Border Layout with CSS Grid",
                "description": "Design a layout using CSS Grid with various border styles and widths.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the `<div>` container to use CSS Grid with three rows and three columns. /n1\n2. Apply different border styles and widths to each of the nine child `<div>` elements:\n   - Use solid, dotted, dashed, and double styles.\n   - First `<div>`: Use a solid border with a width of 3px and a color of red.\n   - Second `<div>`: Use a dotted border with a width of 2px and a color of blue.\n   - Third `<div>`: Use a dashed border with a width of 4px and a color of green.\n   - Fourth `<div>`: Use a double border with a width of 5px and a color of orange.\n   - Fifth `<div>`: Use a solid border with a width of 2px and a color of purple.\n   - Sixth `<div>`: Use a dotted border with a width of 3px and a color of brown.\n   - Seventh `<div>`: Use a dashed border with a width of 4px and a color of pink.\n   - Eighth `<div>`: Use a double border with a width of 5px and a color of grey.\n   - Ninth `<div>`: Use a solid border with a width of 6px and a color of black. /n2\n3. Add a border to the grid container itself with a width of 5px and a color of black.\n4. Include responsive adjustments using media queries for screen sizes 600px or less to change the grid layout to two columns and six rows.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Complex Border Layout</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"grid-container\">\n        <div>This is item 1</div>\n        <div>This is item 2</div>\n        <div>This is item 3</div>\n        <div>This is item 4</div>\n        <div>This is item 5</div>\n        <div>This is item 6</div>\n        <div>This is item 7</div>\n        <div>This is item 8</div>\n        <div>This is item 9</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Complex Border Layout</title></head><body><div class=\"grid-container\"><div>This is item 1</div><div>This is item 2</div><div>This is item 3</div><div>This is item 4</div><div>This is item 5</div><div>This is item 6</div><div>This is item 7</div><div>This is item 8</div><div>This is item 9</div></div></body></html>",
                    "required": [
                      ".grid-container { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(3, 1fr); gap: 10px; border: 5px solid black; }\ndiv { border: 2px solid; padding: 10px; }\ndiv:nth-child(1) { border-style: solid; border-width: 3px; border-color: red; }\ndiv:nth-child(2) { border-style: dotted; border-width: 2px; border-color: blue; }\ndiv:nth-child(3) { border-style: dashed; border-width: 4px; border-color: green; }\ndiv:nth-child(4) { border-style: double; border-width: 5px; border-color: orange; }\ndiv:nth-child(5) { border-style: solid; border-width: 2px; border-color: purple; }\ndiv:nth-child(6) { border-style: dotted; border-width: 3px; border-color: brown; }\ndiv:nth-child(7) { border-style: dashed; border-width: 4px; border-color: pink; }\ndiv:nth-child(8) { border-style: double; border-width: 5px; border-color: grey; }\ndiv:nth-child(9) { border-style: solid; border-width: 6px; border-color: black; }\n@media (max-width: 600px) { .grid-container { grid-template-columns: repeat(2, 1fr); grid-template-rows: repeat(6, 1fr); } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 8: Understanding CSS Layout Models",
            "documents": [
              {
                "title": "CSS Width / Height Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "CSS width and height properties are used to specify the size (width and height) of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Basic Width and Height</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "h1 {\n    width: 210px;\n    height: 200px;\n    background-color: skyblue;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Width/Height Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>CSS Width/Height Example</h1>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The h1 element has a fixed width of 210px and a height of 200px, with a sky blue background color."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "<strong>CSS width/height Syntax:</strong> The syntax of the width and height properties is as follows:",
                    "code": "width/height: auto | length | percentage | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•auto:</strong> The browser calculates the height and width (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•length:</strong> Specifies the height/width in units like px, cm, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•percentage:</strong> Sets the width and height as a percentage of the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•inherit:</strong> Inherits the value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "The width and height of an element can be defined in absolute units (fixed measurements) or relative units (based on the size of parent elements)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Auto Value</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div {\n    width: auto;\n    height: auto;\n    background-color: green;\n    margin-bottom: 12px;\n}\n\nspan {\n    width: auto;\n    height: auto;\n    background-color: pink;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Auto Value Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>Auto Width</div>\n    <span>Auto Width</span>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The div element expands to fill the horizontal space, while the span element adjusts its width based on its content."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Using Percentage Values</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".parent {\n    width: 500px;\n    height: 300px;\n    background-color: lightblue;\n}\n\n.child {\n    width: 50%;\n    height: 50%;\n    background-color: lightgreen;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Percentage Width/Height Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"parent\">\n        <div class=\"child\">50% of Parent</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .parent div is set to 500px wide and 300px high. The .child div is 50% of the parent's width and height."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Max-Width and Min-Height</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".flexible-size {\n    max-width: 300px;\n    min-height: 100px;\n    background-color: lightcyan;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Max-Width/Min-Height Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"flexible-size\">Flexible Size</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The div element's width will not exceed 300px due to max-width, and its height will not be less than 100px due to min-height."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Box Model Overview",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The CSS box model is a crucial concept for understanding the layout and spacing of elements in a web page."
                  },
                  {
                    "type": "sentence",
                    "text": "It describes the structure of elements as rectangular boxes consisting of content, padding, border, and margin."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n    font-family: Arial, sans-serif;\n}\n\n.box {\n    width: 400px;\n    height: 200px;\n    padding: 30px;  /* Padding */\n    border: 20px solid #008080;  /* Border */\n    margin: 40px;  /* Margin */\n    background-color: #fff;\n    box-sizing: content-box;\n    position: relative;\n}\n\n.content {\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    line-height: 140px;\n    color: #888;\n    position: relative;\n    z-index: 1;\n}\n\n.box::before, .box::after {\n    content: '';\n    position: absolute;\n    border: 1px dashed #888;\n    pointer-events: none;\n}\n\n.box::before {\n    top: -40px;\n    left: -40px;\n    right: -40px;\n    bottom: -40px;\n}\n\n.box::after {\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-color: transparent transparent #888 transparent;\n}\n\n.box::after {\n    top: 30px;\n    left: 30px;\n    right: 30px;\n    bottom: 30px;\n}\n\n.content::after {\n    content: 'Content';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border: 1px dashed #888;\n    box-sizing: border-box;\n}\n\n.label {\n    position: absolute;\n    font-size: 14px;\n    color: #888;\n    background-color: #fff;\n    padding: 2px 5px;\n}\n\n.label-margin {\n    top: -20px;\n    left: 50%;\n    transform: translateX(-50%);\n}\n\n.label-border {\n    top: 50%;\n    left: -70px;\n    transform: translateY(-50%);\n}\n\n.label-padding {\n    top: 50%;\n    right: -70px;\n    transform: translateY(-50%);\n}\n\n.content {\n    position: relative;\n    z-index: 1;\n}\n\n.content::before {\n    content: 'Content';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 14px;\n    color: #888;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box Model</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\">\n        <div class=\"label label-margin\">Margin</div>\n        <div class=\"label label-border\">Border</div>\n        <div class=\"label label-padding\">Padding</div>\n        <div class=\"content\">Content</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Components of the Box Model: Content: The actual data, such as text or images, displayed within the element."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Content:</strong> The actual data, such as text or images, displayed within the element."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Padding:</strong> The transparent space between the content and the border."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Border:</strong> The line surrounding the padding and content, defining the edge of the element."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Margin:</strong> The transparent area outside the border, providing space between elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Understanding Width and Height in the Box Model:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The width and height properties in CSS define the size of the content box only.The total size of an element, including padding and border, is calculated as follows:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "Total Width = Content Width + Padding (Left & Right) + Border (Left & Right)\nTotal Height = Content Height + Padding (Top & Bottom) + Border (Top & Bottom)"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box-model-example {\n    width: 400px;\n    height: 80px;\n    border: 10px solid black;\n    padding: 15px;\n    background-color: yellow;\n    background-clip: content-box;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box Model Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box-model-example\">Content Box</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .box-model-example div has a width of 400px and a height of 80px, but the total width and height include padding and border."
                  },
                  {
                    "type": "sentence",
                    "text": "Thus, the total width is 450px and the total height is 130px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Box Model with Inline Elements:</strong> Inline elements, by default, do not have a set width and height and occupy space based on their content."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".text {\n    width: 350px;\n    border: 1px solid black;\n}\n\n.inline-box {\n    width: 100px;\n    height: 40px;\n    border: 5px solid black;\n    padding: 10px;\n    margin: 10px;\n    background-color: yellow;\n    display: inline-block;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Inline Box Model Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"text\">This is a paragraph with an <span class=\"inline-box\">inline box</span> example.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .inline-box span has a total width of 130px and a total height of 70px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong>The box-sizing property can alter the default box model behavior by including padding and border in the element's total width and height calculations."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Box-Sizing Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The box-sizing property in CSS defines how the total width and height of an element are calculated."
                  },
                  {
                    "type": "sentence",
                    "text": "By default, the width and height of an element apply only to its content area, not including padding or borders."
                  },
                  {
                    "type": "sentence",
                    "text": "The box-sizing property lets you control whether padding and borders are included in the element's total width and height."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the box-sizing property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "box-sizing: content-box | border-box | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>content-box:</strong> This is the default value. It specifies that the width and height properties include only the content of the element, not the padding or border."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>border-box:</strong> This value includes the padding and border in the width and height of the element. This makes it easier to control the element's total size."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>initial:</strong> Sets the property to its default value, which is content-box."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> The element will inherit the box-sizing value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Width and Height Without Box-Sizing</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "By default, the <strong>box-sizing</strong> property is set to <strong>content-box.</strong> This means that the width and height of an element are applied to its content area only."
                  },
                  {
                    "type": "sentence",
                    "text": "Padding and borders are added outside of this content area, which can increase the total size of the element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".content-box-example {\n    width: 300px;\n    height: 200px;\n    padding: 20px;\n    border: 10px solid black;\n    margin: 20px;\n    box-sizing: content-box; /* default value */\n    background-color: skyblue;\n    background-clip: content-box;\n    overflow: auto;\n}\n\n.content-box-example p {\n    margin: 0;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box-Sizing Content Box Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"content-box-example\">\n        Content Box\n        <p>This paragraph is inside the content box. Notice how the padding and border are added outside the content area, increasing the overall size of the element.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Actual Size Calculation:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "Actual Width: 10px (border) + 20px (padding) + 300px (content) + 20px (padding) + 10px (border) = 360px"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "Actual Height: 10px (border) + 20px (padding) + 200px (content) + 20px (padding) + 10px (border) = 260px"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the <strong>div</strong> will have an actual width of 360px and an actual height of 260px due to the additional padding and borders."
                  },
                  {
                    "type": "sentence",
                    "text": "When you use <strong>box-sizing: border-box</strong>, the padding and border are included within the width and height specified for the element."
                  },
                  {
                    "type": "sentence",
                    "text": "This ensures that the element's total size remains consistent regardless of padding or border width."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".border-box-example {\n    width: 300px;\n    height: 200px;\n    padding: 20px;\n    border: 10px solid black;\n    margin: 20px;\n    box-sizing: border-box;\n    background-color: yellow;\n    background-clip: content-box;\n    overflow: auto;\n}\n\n.border-box-example p {\n    margin: 0;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box-Sizing Border Box Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"border-box-example\">\n        Border Box\n        <p>This paragraph is inside the border box. Notice how the padding and border are included within the specified width and height, keeping the overall size consistent.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "•Total Width: 300px (width includes padding and border)"
                  },
                  {
                    "type": "sentence",
                    "text": "•Total Height: 200px (height includes padding and border)"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the div will maintain an exact width of 300px and height of 200px, including the padding and border within these dimensions."
                  },
                  {
                    "type": "sentence",
                    "text": "Using <strong>border-box</strong> simplifies the process of designing elements as it allows you to set the size of an element and include padding and border within that size."
                  },
                  {
                    "type": "sentence",
                    "text": "This approach often results in more predictable and consistent layouts, which can be particularly useful for responsive designs."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Padding Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The padding property in CSS controls the space between an element's content and its border."
                  },
                  {
                    "type": "sentence",
                    "text": "It provides extra space within an element, affecting how the content is positioned relative to the border."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the padding property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "padding: length | percentage | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>length:</strong> Defines the padding in length units such as px, pt, em, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>percentage:</strong> Defines the padding in percentage (%). The percentage is based on the width of the containing block."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>inherit:</strong> Inherits the padding value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> The padding property does not accept negative values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example: CSS Padding Property</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    border: 4px solid black;\n    background-color: yellow;\n    background-clip: content-box;\n}\n\np.first {\n    padding: 20px;\n}\n\np.second {\n    padding: 40px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Padding Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"first\">This paragraph has 20px padding.</p>\n    <p class=\"second\">This paragraph has 40px padding.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>In this example</strong>, the paragraphs display different padding sizes. The <strong>background-clip: content-box;</strong> ensures the background color is applied only to the content area, allowing you to visualize the padding effect."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> The percentage unit for padding is not recommended as it can lead to unexpected changes in padding size if the parent width changes."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Padding Constituent Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The padding property can be broken down into individual sides:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•padding-top:</strong> Adds padding to the top side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•padding-right:</strong> Adds padding to the right side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•padding-bottom:</strong> Adds padding to the bottom side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•padding-left:</strong> Adds padding to the left side"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    border: 4px solid black;\n    padding-top: 30px;\n    padding-right: 80px;\n    padding-bottom: 40px;\n    padding-left: 20px;\n    background-color: yellow;\n    background-clip: content-box;\n}\n",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Padding Individual Side Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p>Padding applied to individual sides.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example shows how padding can be applied to each side of an element individually."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Padding as a Shorthand Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The padding property can be used as shorthand to set padding for one to four sides of an element:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•One value:</strong> Applies to all four sides."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Two values:</strong> First value applies to top and bottom, second to left and right."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Three values:</strong> First value applies to top, second to left and right, third to bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Four values:</strong> Applies to top, right, bottom, and left respectively."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np.one-value {\n    padding: 30px;\n}\n\np.two-value {\n    padding: 10px 40px;\n}\n\np.three-value {\n    padding: 10px 80px 5px;\n}\n\np.four-value {\n    padding: 40px 15px 5px 30px;\n}\n\np {\n    border: 4px solid black;\n    background-color: yellow;\n    background-clip: content-box;\n}\n",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Padding Shorthand Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"one-value\">Padding of 30px applied to all sides.</p>\n    <p class=\"two-value\">Padding of 10px top/bottom and 40px left/right.</p>\n    <p class=\"three-value\">Padding of 10px top, 80px left/right, 5px bottom.</p>\n    <p class=\"four-value\">Padding of 40px top, 15px right, 5px bottom, 30px left.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, different padding values are applied using shorthand notation, demonstrating how padding can be set for various sides."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> Padding affects the overall width and height of an element. This can lead to unexpected layouts if not considered."
                  },
                  {
                    "type": "sentence",
                    "text": "You can use the box-sizing property to manage padding within the specified width and height."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Margin Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The margin property in CSS creates space around an element, outside its border."
                  },
                  {
                    "type": "sentence",
                    "text": "This space is used to separate elements from each other and from the edges of their containers."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the margin property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "margin: auto | length | percentage | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>auto:</strong> The browser calculates the margin automatically. This value is often used for centering elements horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>length:</strong> Defines the margin in length units such as px, pt, em, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>percentage:</strong> Defines the margin in percentage (%). This percentage is relative to the width of the containing block."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> Inherits the margin value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "Note: The margin property can accept negative values, reducing the margin space in the specified direction."
                  },
                  {
                    "type": "sentence",
                    "text": "The default value of the margin property is 0."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: CSS Margin Property</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\nh1 {\n    border: 4px solid black;\n    margin: 50px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Margin Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>This is a heading with a margin.</h1>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Here, the margin property adds a 50px space around the border of the h1 element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: CSS Margin with Percentage</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The percentage value for margin is relative to the size of the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "This can lead to different spacing effects depending on the parent’s dimensions."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\ndiv {\n    width: 400px;\n    height: 100px;\n    border: 2px solid black;\n}\n\np.margin {\n    margin: 5%;\n    border: 4px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Margin Percentage Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div>\n        <p class=\"margin\">Paragraph with 5% margin relative to div.</p>\n    </div>\n    <p class=\"margin\">Paragraph with 5% margin relative to the body.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the margin space is different for the paragraphs due to their relative percentages to their parent elements."
                  },
                  {
                    "type": "sentence",
                    "text": "The first paragraph’s margin is relative to the div element, while the second paragraph’s margin is relative to the body element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Margin Constituent Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The margin property can also be specified for individual sides:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•margin-top:</strong> Adds a margin to the top side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•margin-right:</strong> Adds a margin to the right side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•margin-bottom:</strong> Adds a margin to the bottom side"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•margin-left:</strong> Adds a margin to the left side;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    border: 4px solid black;\n    margin-top: 30px;\n    margin-right: 80px;\n    margin-bottom: 25px;\n    margin-left: 40px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Margin Individual Sides Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p>Paragraph with individual margins.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example demonstrates how to apply margins to individual sides of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Margin as Shorthand Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The margin property can also be used as shorthand to set margins for one to four sides of an element:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•One value:</strong> Applies to all four sides."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Two values:</strong> The first value applies to the top and bottom, and the second to the left and right."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Three values:</strong> The first value applies to the top, the second to the left and right, and the third to the bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Four values:</strong> Applies to the top, right, bottom, and left respectively."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\nh2 {\n    margin: 40px 60px 80px 30px;\n    background-color: orange;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Margin Shorthand Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h2>Heading with different margin values.</h2>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example uses the shorthand notation for margins, applying different values to each side."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Note:</strong> Margins can be negative, which pulls the element closer to its neighbors or its container's edge."
                  },
                  {
                    "type": "sentence",
                    "text": "Be cautious with negative margins as they can create overlapping content."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Outline Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The outline property in CSS is used to draw a line outside the border of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "Unlike borders, outlines do not affect the element's size or layout, and they are used primarily for adding visual emphasis."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the outline property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "outline: outline-width outline-style outline-color;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>outline-width:</strong> Specifies the width of the outline."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>outline-style:</strong> Specifies the style of the outline."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>outline-color:</strong> Specifies the color of the outline."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: CSS Outline Property</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\nh1 {\n    border: 10px solid black;\n    outline: 10px solid teal; /* Changed color to teal */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Outline Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>This is a heading with an outline.</h1>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the outline property adds a 10px solid teal line outside the border of the h1 element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Outline Style</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    padding: 8px;\n}\n\np.solid {\n    outline-style: solid;\n    outline-color: crimson; /* Changed color to crimson */\n}\n\np.dotted {\n    outline-style: dotted;\n    outline-color: royalblue; /* Changed color to royalblue */\n}\n\np.dashed {\n    outline-style: dashed;\n    outline-color: darkorange; /* Changed color to darkorange */\n}\n\np.none {\n    outline-style: none;\n}\n\np.hidden {\n    outline-style: hidden;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Outline Style Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"solid\">Solid outline</p>\n    <p class=\"dotted\">Dotted outline</p>\n    <p class=\"dashed\">Dashed outline</p>\n    <p class=\"none\">No outline</p>\n    <p class=\"hidden\">Hidden outline</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example demonstrates various styles for the outline-style property with different colors: crimson, royalblue, and darkorange."
                  },
                  {
                    "type": "sentence",
                    "text": "The hidden value hides the outline but keeps the space it would occupy, while none removes it completely."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Outline Width</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The outline-width property specifies the width of the outline. It accepts length units (e.g., px, em) or keywords (thin, medium, thick)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Outline Width</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    padding: 8px;\n    outline-style: solid;\n}\n\np.first {\n    outline-width: 4px;\n    outline-color: limegreen; /* Changed color to limegreen */\n}\n\np.second {\n    outline-width: 8px;\n    outline-color: mediumvioletred; /* Changed color to mediumvioletred */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Outline Width Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"first\">Outline width: 4px</p>\n    <p class=\"second\">Outline width: 8px</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example shows different outline widths using 4px and 8px with colors limegreen and mediumvioletred."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Outline Color</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The outline-color property specifies the color of the outline. It can use color names, HEX, RGB, HSL, etc."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Outline Color</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\np {\n    outline-style: solid;\n    outline-width: 8px;\n    padding: 8px;\n}\n\np.first {\n    outline-color: violet; /* Changed color to violet */\n}\n\np.second {\n    outline-color: gold; /* Changed color to gold */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Outline Color Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <p class=\"first\">Outline color: violet</p>\n    <p class=\"second\">Outline color: gold</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example shows how to set different outline colors using violet and gold."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Box-Shadow Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The box-shadow property adds shadow effects to elements. It allows you to create depth and emphasis by applying shadows around an element’s frame."
                  },
                  {
                    "type": "sentence",
                    "text": "The syntax for the box-shadow property is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "box-shadow: horizontal-offset vertical-offset blur-radius spread-radius color | inset | none;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>horizontal-offset:</strong> Distance of the shadow horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>vertical-offset:</strong> Distance of the shadow vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>blur-radius:</strong> Radius of the shadow blur."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>spread-radius:</strong> Size of the shadow expansion."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>color:</strong> Color of the shadow."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inset:</strong> Moves the shadow inside the element."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f5f5f5;\n    margin: 20px;\n    text-align: center;\n}\n\n.shadow-example {\n    background-color: #ffffff;\n    padding: 20px;\n    border: 1px solid #ddd;\n    margin: 20px auto;\n    width: 200px;\n    height: 100px;\n    line-height: 100px;\n    color: #333;\n    font-size: 16px;\n}\n\n.horizontal-offset {\n    box-shadow: 15px 0 10px rgba(0, 0, 0, 0.5);\n}\n\n.vertical-offset {\n    box-shadow: 0 15px 10px rgba(0, 0, 0, 0.5);\n}\n\n.blur-radius {\n    box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.5);\n}\n\n.spread-radius {\n    box-shadow: 10px 10px 10px 5px rgba(0, 0, 0, 0.5);\n}\n\n.inset-shadow {\n    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);\n}\n\n.no-shadow {\n    box-shadow: none;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Box-Shadow Property Examples</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <h1>CSS Box-Shadow Property Examples</h1>\n\n    <div class=\"shadow-example horizontal-offset\">Horizontal Offset</div>\n    <div class=\"shadow-example vertical-offset\">Vertical Offset</div>\n    <div class=\"shadow-example blur-radius\">Blur Radius</div>\n    <div class=\"shadow-example spread-radius\">Spread Radius</div>\n    <div class=\"shadow-example inset-shadow\">Inset Shadow</div>\n    <div class=\"shadow-example no-shadow\">No Shadow</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation of examples:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Horizontal Offset:</strong> 15px shadow offset to the right, no vertical offset, with a 10px blur radius."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Vertical Offset:</strong> 15px shadow offset downward, no horizontal offset, with a 10px blur radius."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Blur Radius:</strong> Shadow with 10px horizontal and vertical offset, with a 20px blur radius."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Spread Radius:</strong> Shadow with 10px horizontal and vertical offset, 10px blur radius, and 5px spread radius."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Inset Shadow:</strong> Shadow placed inside the element with 0px offset, 10px blur radius."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•No Shadow:</strong> No shadow is applied."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What do the width and height properties in CSS specify?",
                "options": [
                  "The position of an element",
                  "The size of an element",
                  "The color of an element",
                  "The font style of an element"
                ],
                "correctAnswer": "The size of an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value for width and height in CSS allows the size to be determined by the browser automatically?",
                "options": [
                  "percentage",
                  "auto",
                  "initial",
                  "inherit"
                ],
                "correctAnswer": "auto",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which component of the CSS Box Model represents the actual data displayed within the element?",
                "options": [
                  "Content",
                  "Padding",
                  "Border",
                  "Margin"
                ],
                "correctAnswer": "Content",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which part of the CSS Box Model is responsible for creating space between the element's content and its border?",
                "options": [
                  "Content",
                  "Padding",
                  "Border",
                  "Margin"
                ],
                "correctAnswer": "Padding",
                "points": 2,
                "locked": true
              },
              {
                "question": "How is the actual width of an element calculated when using the CSS Box Model?",
                "options": [
                  "10px (border) + 20px (padding) + 300px (content) + 20px (padding) + 10px (border) = 360px",
                  "10px (border) + 20px (padding) + 200px (content) + 20px (padding) + 10px (border) = 260px",
                  "20px (padding) + 300px (content) + 20px (padding) = 340px",
                  "10px (border) + 300px (content) + 10px (border) = 320px"
                ],
                "correctAnswer": "10px (border) + 20px (padding) + 300px (content) + 20px (padding) + 10px (border) = 360px",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the box-sizing property in CSS control?",
                "options": [
                  "How the total width and height of an element are calculated, including or excluding padding and borders",
                  "The color of the borders around an element",
                  "The font size within the content area of an element",
                  "The margin space outside the border of an element"
                ],
                "correctAnswer": "How the total width and height of an element are calculated, including or excluding padding and borders",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the padding property in CSS control?",
                "options": [
                  "The space between an element's content and its border",
                  "The space between an element's border and its margin",
                  "The color of the border surrounding the element",
                  "The width of the content area inside the element"
                ],
                "correctAnswer": "The space between an element's content and its border",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the correct syntax for the padding property in CSS?",
                "options": [
                  "padding: length | percentage | inherit;",
                  "padding: width | style | color;",
                  "padding: border-width | border-style | border-color;",
                  "padding: margin | border | content;"
                ],
                "correctAnswer": "padding: length | percentage | inherit;",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the margin property in CSS create?",
                "options": [
                  "Space around an element, outside its border",
                  "Space within an element, between the content and its border",
                  "The color of the border surrounding the element",
                  "The width of the content area inside the element"
                ],
                "correctAnswer": "Space around an element, outside its border",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the correct syntax for the margin property in CSS?",
                "options": [
                  "margin: auto | length | percentage | inherit;",
                  "margin: width | style | color;",
                  "margin: border-width | border-style | border-color;",
                  "margin: padding | border | content;"
                ],
                "correctAnswer": "margin: auto | length | percentage | inherit;",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the outline property in CSS do?",
                "options": [
                  "Draws a line outside the border of an element",
                  "Changes the width of the border surrounding the element",
                  "Adds space between the content and the border of the element",
                  "Defines the color of the element's background"
                ],
                "correctAnswer": "Draws a line outside the border of an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which property specifies the width of the outline in CSS?",
                "options": [
                  "outline-width",
                  "outline-style",
                  "outline-color",
                  "outline-spacing"
                ],
                "correctAnswer": "outline-width",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the box-shadow property in CSS do?",
                "options": [
                  "Adds shadow effects around an element",
                  "Changes the border style of an element",
                  "Alters the size of an element's font",
                  "Sets the background color of an element"
                ],
                "correctAnswer": "Adds shadow effects around an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which part of the box-shadow property specifies the shadow's color?",
                "options": [
                  "Horizontal offset",
                  "Vertical offset",
                  "Color",
                  "Blur radius"
                ],
                "correctAnswer": "Color",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does the box-shadow property affect an element's appearance?",
                "options": [
                  "Adds a shadow with specified offsets, blur, and color",
                  "Alters the size of the element",
                  "Changes the element's text color",
                  "Adjusts the element's padding"
                ],
                "correctAnswer": "Adds a shadow with specified offsets, blur, and color",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Box Sizing with Content",
                "description": "Apply CSS to style a box with specific dimensions, padding, and border radius. The box should have a fixed width and height, a background color, and properly adjust the content inside.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following div element using CSS:\n1. The div should have a fixed width of 250px and a height of 180px.\n2. Apply a background color of #ADD8E6 (light blue).\n3. Ensure the content inside the div adjusts properly using the `box-sizing` property.\n4. Add 15px of padding inside the box.\n5. Apply a border-radius of 8px to make the corners rounded.\n6. Set the text color inside the div to #333 .\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box Sizing with Content</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\">\n        <p>This is a paragraph inside the box. The content is adjusted within a fixed size.</p>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Box Sizing with Content</title></head><body><div class=\"box\"><p>This is a paragraph inside the box. The content is adjusted within a fixed size.</p></div></body></html>",
                    "required": [
                      ".box { width: 250px; height: 180px; background-color: #ADD8E6; padding: 15px; box-sizing: border-box; border-radius: 8px; color: #333; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Percentage-Based Dimensions with Content",
                "description": "Understand percentage-based width and height with meaningful content inside the boxes.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Create a CSS stylesheet to style a parent and child div element:\n\n1. The parent div should be 500px wide and 350px high, with a background color of #87CEEB, 20px padding, and a border-radius of 8px. Set the text color inside the parent div to white.\n2. The child div should be 60% of the parent’s width and height, with a background color of #4682B4, 10px padding, and a border-radius of 6px. Ensure the text color inside the child div is also white.\n\nEnsure that the `box-sizing` property is used appropriately to include padding and border in the element's total width and height. Use `position: relative;` for the parent div and `position: absolute;` for the child div to ensure proper positioning.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Percentage Dimensions with Content</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"parent\">\n        <p>This is the parent box with fixed dimensions. The child box adapts to a percentage of this size.</p>\n        <div class=\"child\">\n            <p>This is the child box. It scales according to the parent box's size.</p>\n        </div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Percentage Dimensions with Content</title></head><body><div class=\"parent\"><p>This is the parent box with fixed dimensions. The child box adapts to a percentage of this size.</p><div class=\"child\"><p>This is the child box. It scales according to the parent box's size.</p></div></div></body></html>",
                    "required": [
                      ".parent { width: 500px; height: 350px; background-color: #87CEEB; padding: 20px; box-sizing: border-box; border-radius: 8px; position: relative; color: white; }",
                      ".child { width: 60%; height: 60%; background-color: #4682B4; padding: 10px; box-sizing: border-box; border-radius: 6px; position: absolute;  color: white; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Box Model with Padding, Border, and Content",
                "description": "Apply CSS to manage the box model properties, including padding, border, and content area.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Set the <div> element to have the following styles:\n\n1. The <div> should have a width of 350px and a height of 250px.\n2. Apply 20px padding inside the <div>.\n3. Add a 10px solid border with the color #333.\n4. Set the background color of the <div> to #00BFFF.\n5. Ensure the text color inside the <div> is white.\n6. Ensure that the box model uses the 'border-box' box-sizing property to include padding and border in the element's total width and height.\n7. Apply a border-radius of 8px to round the corners of the <div>.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Box Model with Padding and Border</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box-model\">\n        <p>This box has padding and a border. Notice the spacing between the content and the box edges.</p>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Box Model with Padding and Border</title></head><body><div class=\"box-model\"><p>This box has padding and a border. Notice the spacing between the content and the box edges.</p></div></body></html>",
                    "required": [
                      ".box-model { width: 350px; height: 250px; padding: 20px; border: 10px solid #333; background-color: #00BFFF; color: white; box-sizing: border-box; border-radius: 8px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Flexbox Layout with Content",
                "description": "Create a responsive layout using Flexbox to align and style boxes within a container.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the provided HTML layout using CSS to achieve the following:\n\n1. Center the container horizontally and vertically within the viewport using Flexbox. The body should have a background color of #f0f8ff, use `height: 100vh` to ensure full viewport height, and have `margin: 0` to remove default margins.\n2. The container should have a fixed width of 500px and evenly space the boxes within it using Flexbox.\n3. Ensure that the boxes within the container are consistently sized with a width and height of 120px.\n4. Style each box with a light blue background color (#ADD8E6), rounded corners with a border radius of 6px, and 15px padding around the content.\n5. The boxes should use `box-sizing: border-box` to include padding and border in the element's total width and height.\n6. The text inside the boxes should be centered and have a color of #333.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flexbox Layout with Content</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box\">\n            <p>Content of Box 1</p>\n        </div>\n        <div class=\"box\">\n            <p>Content of Box 2</p>\n        </div>\n        <div class=\"box\">\n            <p>Content of Box 3</p>\n        </div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Flexbox Layout with Content</title></head><body><div class=\"container\"><div class=\"box\"><p>Content of Box 1</p></div><div class=\"box\"><p>Content of Box 2</p></div><div class=\"box\"><p>Content of Box 3</p></div></div></body></html>",
                    "required": [
                      "body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f0f8ff; }",
                      ".container { display: flex; justify-content: space-between; width: 500px; }",
                      ".box { width: 120px; height: 120px; background-color: #ADD8E6; text-align: center; padding: 15px; box-sizing: border-box; color: #333; border-radius: 6px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced Responsive Layout with CSS Grid, Content, and Highlighted Text",
                "description": "Create an advanced responsive grid layout with highlighted text using CSS.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following HTML layout using CSS to achieve the following:\n\n1. Centering and Background: Center the grid container horizontally and vertically within the viewport. The body should have a background color of #f0f8ff, use `height: 100vh` to ensure it covers the full viewport height, and have `margin: 0` to remove any default margins. The font used throughout the page should be Arial, sans-serif.\n\n2. Grid Layout: Use CSS Grid to create a responsive layout for the grid container. Display three columns on large screens, two columns on medium screens (up to 768px wide), and one column on small screens (up to 480px wide). Use `repeat()` to simplify the column definitions.\n\n3. Spacing and Sizing: Ensure the grid container has a gap of 20px between grid items. Set the container width to 90% of the viewport width, with a maximum width of 1000px. Apply `box-sizing: border-box` to the grid container to include padding and border in its total width and height.\n\n4. Grid Item Styling: Each grid item should have a light blue background color (#87CEEB), white text color, 20px padding, an 8px border-radius for rounded corners, and a subtle box-shadow with `0 4px 8px rgba(0, 0, 0, 0.1)` for a clean look. Ensure the text within each grid item is centered and has a line-height of 1.6 for better readability.\n\n5. Highlighted Text: Within each grid item, highlighted text should have a background color of #FFFF99, a text color of #333, 2px vertical padding, 4px horizontal padding, and 3px border-radius to make it stand out.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advanced Responsive Grid with Highlighted Content</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"grid-container\">\n        <div class=\"grid-item\">\n            <p>Item 1: This paragraph contains <span class=\"highlight\">highlighted text</span> that stands out within the grid item.</p>\n        </div>\n        <div class=\"grid-item\">\n            <p>Item 2: Here is another paragraph with some <span class=\"highlight\">important content highlighted</span> for emphasis.</p>\n        </div>\n        <div class=\"grid-item\">\n            <p>Item 3: The grid layout is responsive, and this <span class=\"highlight\">highlighted portion</span> of text will adapt to different screen sizes.</p>\n        </div>\n        <div class=\"grid-item\">\n            <p>Item 4: Each grid item contains a paragraph, and certain words or phrases are <span class=\"highlight\">highlighted</span> for visibility.</p>\n        </div>\n        <div class=\"grid-item\">\n            <p>Item 5: The use of <span class=\"highlight\">highlighted text</span> can help draw attention to key points in the content.</p>\n        </div>\n        <div class=\"grid-item\">\n            <p>Item 6: This responsive grid layout showcases <span class=\"highlight\">highlighting techniques</span> within paragraphs.</p>\n        </div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Advanced Responsive Grid with Highlighted Content</title></head><body><div class=\"grid-container\"><div class=\"grid-item\"><p>Item 1: This paragraph contains <span class=\"highlight\">highlighted text</span> that stands out within the grid item.</p></div><div class=\"grid-item\"><p>Item 2: Here is another paragraph with some <span class=\"highlight\">important content highlighted</span> for emphasis.</p></div><div class=\"grid-item\"><p>Item 3: The grid layout is responsive, and this <span class=\"highlight\">highlighted portion</span> of text will adapt to different screen sizes.</p></div><div class=\"grid-item\"><p>Item 4: Each grid item contains a paragraph, and certain words or phrases are <span class=\"highlight\">highlighted</span> for visibility.</p></div><div class=\"grid-item\"><p>Item 5: The use of <span class=\"highlight\">highlighted text</span> can help draw attention to key points in the content.</p></div><div class=\"grid-item\"><p>Item 6: This responsive grid layout showcases <span class=\"highlight\">highlighting techniques</span> within paragraphs.</p></div></div></body></html>",
                    "required": [
                      "body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f0f8ff; font-family: Arial, sans-serif; }",
                      ".grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; width: 90%; max-width: 1000px; padding: 20px; box-sizing: border-box; }",
                      ".grid-item { background-color: #87CEEB; color: white; padding: 20px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); text-align: center; line-height: 1.6; }",
                      ".highlight { background-color: #FFFF99; color: #333; padding: 2px 4px; border-radius: 3px; }",
                      "@media (max-width: 768px) { .grid-container { grid-template-columns: repeat(2, 1fr); } }",
                      "@media (max-width: 480px) { .grid-container { grid-template-columns: 1fr; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 9: CSS Layouts: Display and Position Properties",
            "documents": [
              {
                "title": "CSS Display Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>display</strong> property in CSS controls the layout behavior of an element. It can define how an element is rendered on the page, affecting its visibility and the flow of other elements around it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "display: value;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>inline:</strong> Makes the element behave like an inline element."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>block:</strong> Makes the element behave like a block-level element."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>inline-block:</strong> Combines characteristics of inline and block elements."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>flex:</strong> Makes the element a flex container for flexible layouts."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>grid:</strong> Makes the element a grid container for complex layouts."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>none:</strong> Hides the element and removes it from the document flow."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Inline Display</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: 'Arial', sans-serif;\n    background-color: #fafafa;\n    margin: 20px;\n}\n\n.container {\n    width: 80%;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.box {\n    border: 2px solid #333;\n    padding: 10px;\n    margin: 10px 0;\n    background-color: #ffffff;\n    color: #333;\n    text-align: center;\n}\n\n.before {\n    background-color: #e0f2f1;\n}\n\n.after {\n    display: inline;\n    background-color: #c8e6c9;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Display Property</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Before Applying display: inline</h2>\n        <div class=\"box before\">This is the first box.</div>\n        <div class=\"box before\">This is the second box.</div>\n\n        <h2>After Applying display: inline</h2>\n        <div class=\"box after\">This is the first box.</div>\n        <div class=\"box after\">This is the second box.</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Before Applying display:</strong> inline: Displays the boxes as block elements, each occupying the full width of its container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•After Applying display:</strong> inline: Changes the display property to inline, causing the boxes to line up horizontally."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: CSS Display Block</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    font-family: 'Verdana', sans-serif;\n    background-color: #f9f9f9;\n    margin: 20px;\n    color: #333;\n}\n\n.container {\n    width: 75%;\n    max-width: 800px;\n    margin: auto;\n}\n\n.element {\n    border: 2px solid #444;\n    padding: 8px;\n    margin: 5px;\n    background-color: #e3f2fd;\n    display: inline-block;\n}\n\n.updated {\n    display: block;\n    background-color: #bbdefb;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Display Property</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Before Applying display: block</h2>\n        <span class=\"element\">This is the first span element.</span>\n        <span class=\"element\">This is the second span element.</span>\n\n        <h2>After Applying display: block</h2>\n        <span class=\"element updated\">This is the first span element.</span>\n        <span class=\"element updated\">This is the second span element.</span>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Before Applying display:</strong> block: The span elements are displayed as inline-block by default, aligning horizontally and fitting only the necessary width."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•After Applying display:</strong> block: The display: block property changes the span elements to block-level, making them stack vertically and span the full width of their container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: CSS Display Inline Block</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "span {\n    width: 60px;\n    height: 30px;\n    padding: 10px;\n    margin: 20px;\n    border: 2px solid black;\n    background-color: greenyellow;\n}\n\nspan.adjusted {\n    display: inline-block;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Display Property</title>\n</head>\n<body>\n    <h2>Before Applying display: inline-block</h2>\n    <p>\n        Observe how the <span>span</span> element, styled with a green-yellow background, does not respect width and height settings. Padding does not affect surrounding elements, and vertical margins are ineffective.\n    </p>\n\n    <h2>After Applying display: inline-block</h2>\n    <p>\n        Notice the difference with the <span class=\"adjusted\">span</span> element, now with <code>display: inline-block</code>. It properly handles width and height, padding affects surrounding content, and vertical margins are now visible.\n    </p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Before Applying display:</strong> inline-block: The span element is styled with a green-yellow background but does not respect the width, height, and vertical margins due to its default inline behavior."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•After Applying display:</strong> inline-block: The span element with display: inline-block now respects the width and height, and padding pushes surrounding elements away. The vertical margins also become effective."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: CSS Display Flex</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".item {\n    border: 2px solid black;\n    padding: 10px;\n    margin: 5px;\n    background-color: lightblue;\n}\n\n.container-before {\n    border: 2px dashed red;\n    padding: 10px;\n}\n\n.container-after {\n    display: flex;\n    border: 2px dashed green;\n    padding: 10px;\n}\n\n.container-after .item {\n    background-color: lightcoral;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Display Flex</title>\n</head>\n<body>\n    <h2>Before Applying display: flex</h2>\n    <div class=\"container-before\">\n        <div class=\"item\">Item 1</div>\n        <div class=\"item\">Item 2</div>\n        <div class=\"item\">Item 3</div>\n    </div>\n\n    <h2>After Applying display: flex</h2>\n    <div class=\"container-after\">\n        <div class=\"item\">Item 1</div>\n        <div class=\"item\">Item 2</div>\n        <div class=\"item\">Item 3</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Before Applying display:</strong> flex: In this setup, the container-before class defines a container with div elements styled as individual items. The items are displayed as block-level elements, stacking vertically with space between them."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•After Applying display:</strong> flex: When the display: flex property is applied to the container-after class, the container's child div elements (item class) are laid out in a horizontal row by default. Flexbox enables flexible alignment and spacing between items."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Position Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>position</strong> property controls the placement of an element on a webpage. This property, combined with the top, right, bottom, and left properties, determines the exact position of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "position: value;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values for position:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>static:</strong> Default positioning. Elements flow naturally in the document layout."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>relative:</strong> Positioned relative to its normal position. Allows for adjustments with top, right, bottom, and left."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>absolute:</strong> Positioned relative to its nearest positioned ancestor (non-static). Removed from the document flow."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>fixed:</strong> Positioned relative to the viewport. Remains fixed in place during scrolling."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>sticky:</strong> Combines relative and fixed positioning. Sticks to a defined position when scrolled to a certain point."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: CSS Static Position</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p.static {\n    position: static;\n    top: 20px; /* No effect */\n    right: 20px; /* No effect */\n    bottom: 20px; /* No effect */\n    left: 20px; /* No effect */\n    border: 2px solid black;\n    padding: 10px;\n    background-color: lightcoral;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Position Static</title>\n</head>\n<body>\n    <h2>Static Position</h2>\n    <p class=\"static\">This paragraph is positioned statically. The top, right, bottom, and left properties do not affect its position.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Static positioning:</strong> The static value is the default positioning behavior. Elements are placed according to the normal document flow. The top, right, bottom, and left properties have no effect."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: CSS Relative Position</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p.relative {\n    position: relative;\n    top: 30px;\n    left: 20px;\n    border: 2px solid black;\n    padding: 10px;\n    background-color: skyblue;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Position Relative</title>\n</head>\n<body>\n    <h2>Relative Position</h2>\n    <p class=\"relative\">This paragraph is positioned relatively, moved 30px down and 20px to the right from its normal position.</p>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Relative positioning:</strong> The relative value positions the element relative to its normal position. The element retains its space in the document flow, but can be moved with top, right, bottom, and left properties."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: CSS Absolute Position</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    position: relative;\n    border: 2px solid blue;\n    padding: 20px;\n    background-color: lightgray;\n}\n\np.absolute {\n    position: absolute;\n    top: 40px;\n    left: 50px;\n    border: 2px solid black;\n    padding: 10px;\n    background-color: lightyellow;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Position Absolute</title>\n</head>\n<body>\n    <h2>Absolute Position</h2>\n    <div class=\"container\">\n        <p class=\"absolute\">This paragraph is positioned absolutely, 40px from the top and 50px from the left of its positioned ancestor.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Absolute positioning:</strong> The absolute value removes the element from the document flow and positions it relative to the nearest positioned ancestor. If no such ancestor exists, it is positioned relative to the initial containing block (usually the viewport)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: CSS Fixed Position</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p.fixed {\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    border: 2px solid black;\n    padding: 10px;\n    background-color: lightblue;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Position Fixed</title>\n</head>\n<body>\n    <h2>Fixed Position</h2>\n    <p class=\"fixed\">This paragraph remains fixed at the top right of the viewport while scrolling.</p>\n    <div style=\"height: 1500px;\">Scroll down to see the fixed position in action.</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Fixed positioning:</strong> The fixed value positions the element relative to the viewport. It stays in place even when the page is scrolled."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 5: CSS Sticky Position</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "p.sticky {\n    position: sticky;\n    top: 10px;\n    border: 2px solid black;\n    padding: 10px;\n    background-color: lightgoldenrodyellow;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Position Sticky</title>\n</head>\n<body>\n    <h2>Sticky Position</h2>\n    <p class=\"sticky\">This paragraph sticks to the top of the viewport once you scroll past it.</p>\n    <div style=\"height: 1500px;\">Scroll down to see the sticky position in action.</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•Sticky positioning:</strong> The sticky value combines relative and fixed positioning. The element is treated as relative until it reaches a specified scroll position, then it becomes fixed."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS z-index Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>z-index</strong> property in CSS is used to control the stacking order of positioned elements. When elements overlap, z-index determines which element appears on top."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "z-index: auto | number | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>auto:</strong> The default value. The stacking order is based on the element’s position in the HTML document."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>number:</strong> Defines the stacking order. Higher numbers are placed above lower numbers. Negative values are also allowed."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>initial:</strong> Resets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>inherit:</strong> Inherits the z-index value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Key Points:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Positional Requirement:</strong> The z-index property only applies to positioned elements (position: relative, absolute, fixed, or sticky)."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Stacking Context:</strong> The stacking order of an element is influenced by its z-index and its parent’s z-index. Elements with higher z-index values stack on top of elements with lower values."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Basic Stacking Order</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.box {\n    position: absolute;\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    font-size: 20px;\n}\n\n.blue {\n    background-color: blue;\n    top: 50px;\n    left: 50px;\n    z-index: 3;\n}\n\n.green {\n    background-color: green;\n    top: 100px;\n    left: 100px;\n    z-index: 5;\n}\n\n.red {\n    background-color: red;\n    top: 150px;\n    left: 150px;\n    z-index: 1;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS z-index Example</title>\n</head>\n<body>\n    <div class=\"box blue\">Blue Box (z-index: 3)</div>\n    <div class=\"box green\">Green Box (z-index: 5)</div>\n    <div class=\"box red\">Red Box (z-index: 1)</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the green box, with the highest z-index value of 5, will appear on top of the blue and red boxes. The red box, with the lowest z-index, will be at the bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Using Negative Values</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.box {\n    position: absolute;\n    width: 200px;\n    height: 200px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: white;\n    font-size: 20px;\n}\n\n.green {\n    background-color: green;\n    top: 50px;\n    left: 50px;\n    z-index: 3;\n}\n\n.orange {\n    background-color: orange;\n    top: 100px;\n    left: 100px;\n    z-index: -4;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS z-index Negative Value</title>\n</head>\n<body>\n    <div class=\"box green\">Green Box (z-index: 3)</div>\n    <div class=\"box orange\">Orange Box (z-index: -4)</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the orange box has a negative z-index value, so it is stacked below the green box."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Nested Elements</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n}\n\n.parent {\n    position: relative;\n    width: 300px;\n    height: 150px;\n    background-color: greenyellow;\n    z-index: 2;\n    padding: 20px;\n}\n\n.child {\n    position: absolute;\n    width: 200px;\n    height: 100px;\n    background-color: skyblue;\n    z-index: 5;\n    top: 20px;\n    left: 20px;\n}\n\n.outer {\n    position: relative;\n    width: 200px;\n    height: 100px;\n    background-color: orange;\n    z-index: 3;\n    margin-top: -50px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS z-index Nested Example</title>\n</head>\n<body>\n    <div class=\"parent\">\n        Parent (z-index: 2)\n        <div class=\"child\">Child (z-index: 5)</div>\n    </div>\n    <div class=\"outer\">Outer (z-index: 3)</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this nested example, despite the child having a higher z-index value (5) than the outer element (3), it remains beneath the outer element because the stacking context is limited to the parent element."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Overflow Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>overflow</strong> property controls what happens when content overflows the box of its containing element. It's crucial for managing how elements handle excess content."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "overflow: visible | hidden | scroll | auto | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>visible:</strong> The content will overflow the container and be visible outside of it. This is the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>hidden:</strong> The overflowing content will be clipped, and it will not be visible outside the container."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>scroll:</strong> Scrollbars are added to the container, allowing users to scroll through the overflowing content."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>auto:</strong> Scrollbars are added only if necessary (i.e., when the content overflows the container)."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inherit:</strong> Inherits the value from the parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Overflow Visible</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    height: 100px;\n    width: 300px;\n    background-color: lightgray;\n    border: 2px solid black;\n    overflow: visible; /* Default value */\n}\n\np {\n    font-size: 16px;\n    margin: 0;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Overflow: Visible</title>\n</head>\n<body>\n    <div class=\"container visible\">\n        <p>\n            This content overflows the container. \"Programming is not just about typing code. \n            It involves thinking, planning, and understanding how to piece together a puzzle of logic \n            to create functional software.\" — Inspired by Charles M. Strauss\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the content overflows the container and is visible outside of it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Overflow Hidden</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    height: 100px;\n    width: 300px;\n    background-color: lightcoral;\n    border: 2px solid black;\n    overflow: hidden;\n}\n\np {\n    font-size: 16px;\n    margin: 0;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Overflow: Hidden</title>\n</head>\n<body>\n    <div class=\"container hidden\">\n        <p>\n            This content is clipped and hidden. \"The hidden overflow property ensures that any excess \n            content beyond the set boundaries is not displayed, providing a clean layout.\" — Inspired by Charles M. Strauss\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the overflowing content is clipped and hidden from view."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Overflow Scroll</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    height: 100px;\n    width: 300px;\n    background-color: lightblue;\n    border: 2px solid black;\n    overflow: scroll;\n}\n\np {\n    font-size: 16px;\n    margin: 0;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Overflow: Scroll</title>\n</head>\n<body>\n    <div class=\"container scroll\">\n        <p>\n            This content is scrollable. \"Using the scroll overflow property, you can allow users to view \n            all content by scrolling within the container. This is useful for fixed-size areas.\" — Inspired by Charles M. Strauss\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, scrollbars are added to allow users to scroll through the overflowing content."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Overflow Auto</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    height: 100px;\n    width: 300px;\n    background-color: lightgoldenrodyellow;\n    border: 2px solid black;\n    overflow: auto;\n}\n\np {\n    font-size: 16px;\n    margin: 0;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Overflow: Auto</title>\n</head>\n<body>\n    <div class=\"container auto\">\n        <p>\n            This content may have a scrollbar if needed. \"The auto overflow property adds scrollbars only \n            when the content exceeds the container's size, providing a cleaner look when no overflow occurs.\" \n            — Inspired by Charles M. Strauss\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the container may display scrollbars only if the content exceeds its size."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What does the display property in CSS control?",
                "options": [
                  "The layout behavior of an element",
                  "The text color of an element",
                  "The font size of an element",
                  "The border style of an element"
                ],
                "correctAnswer": "The layout behavior of an element",
                "points": 2,
                "locked": true
              },
              {
                "question": "What value makes an element behave like an inline element?",
                "options": [
                  "block",
                  "inline-block",
                  "flex",
                  "inline"
                ],
                "correctAnswer": "inline",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the position property in CSS control?",
                "options": [
                  "The color of an element",
                  "The placement of an element on a webpage",
                  "The font size of an element",
                  "The border style of an element"
                ],
                "correctAnswer": "The placement of an element on a webpage",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which position value allows an element to remain fixed in place during scrolling?",
                "options": [
                  "static",
                  "relative",
                  "absolute",
                  "fixed"
                ],
                "correctAnswer": "fixed",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which elements are affected by the z-index property?",
                "options": [
                  "Non-positioned elements",
                  "Positioned elements",
                  "Inline elements",
                  "Block elements"
                ],
                "correctAnswer": "Positioned elements",
                "points": 2,
                "locked": true
              },
              {
                "question": "What determines the stacking order of elements with z-index?",
                "options": [
                  "The element's margin",
                  "The element's width",
                  "The element's z-index value and its stacking context",
                  "The element's padding"
                ],
                "correctAnswer": "The element's z-index value and its stacking context",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which overflow value allows the content to overflow the container and be visible outside of it?",
                "options": [
                  "hidden",
                  "scroll",
                  "visible",
                  "auto"
                ],
                "correctAnswer": "visible",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the overflow: hidden property do?",
                "options": [
                  "Adds scrollbars to the container",
                  "Makes the overflowing content visible outside the container",
                  "Clips the overflowing content, making it not visible",
                  "Automatically adds scrollbars only when necessary"
                ],
                "correctAnswer": "Clips the overflowing content, making it not visible",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "CSS Display Properties",
                "description": "Style different display properties using CSS.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following elements using CSS to demonstrate different display properties. The requirements are:\n\n1. `.block-element`: This element should use the `block` display property. It should have a light blue background color, 10px padding, and a 10px margin at the bottom. Ensure `box-sizing` is set to `border-box` to include padding and border in the total width and height, and apply a `border-radius` of 5px for rounded corners.\n\n2. `.inline-element`: This element should use the `inline` display property. It should have a light coral background color, 10px padding, and a 10px margin to the right. Ensure `box-sizing` is set to `border-box` and include a `border-radius` of 5px for rounded corners.\n\n3. `.flex-container`: This container should use the `flex` display property. It should have a light green background color, 10px padding, and a 10px gap between flex items. Each `.flex-item` inside should have a light yellow background color, 10px padding, a 1px solid black border, and `box-sizing` set to `border-box` with a `border-radius` of 5px.\n\n4. `.grid-container`: This container should use the `grid` display property with two equal columns. It should have a light pink background color, 10px padding, and a 10px gap between grid items. Each `.grid-item` inside should have a light grey background color, 10px padding, a 1px solid black border, and `box-sizing` set to `border-box` with a `border-radius` of 5px.\n\nEnsure that all CSS styles are written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Display Properties</title>\n</head>\n<body>\n    <div class=\"block-element\">Block Element</div>\n    <div class=\"inline-element\">Inline Element</div>\n    <div class=\"flex-container\">\n        <div class=\"flex-item\">Flex Item 1</div>\n        <div class=\"flex-item\">Flex Item 2</div>\n    </div>\n    <div class=\"grid-container\">\n        <div class=\"grid-item\">Grid Item 1</div>\n        <div class=\"grid-item\">Grid Item 2</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Display Properties</title></head><body><div class=\"block-element\">Block Element</div><div class=\"inline-element\">Inline Element</div><div class=\"flex-container\"><div class=\"flex-item\">Flex Item 1</div><div class=\"flex-item\">Flex Item 2</div></div><div class=\"grid-container\"><div class=\"grid-item\">Grid Item 1</div><div class=\"grid-item\">Grid Item 2</div></div></body></html>",
                    "required": [
                      ".block-element { display: block; background-color: lightblue; padding: 10px; margin-bottom: 10px; box-sizing: border-box; border-radius: 5px; }",
                      ".inline-element { display: inline; background-color: lightcoral; padding: 10px; margin-right: 10px; box-sizing: border-box; border-radius: 5px; }",
                      ".flex-container { display: flex; background-color: lightgreen; padding: 10px; gap: 10px; box-sizing: border-box; border-radius: 5px; }",
                      ".flex-item { background-color: lightyellow; padding: 10px; border: 1px solid black; box-sizing: border-box; border-radius: 5px; }",
                      ".grid-container { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; background-color: lightpink; padding: 10px; box-sizing: border-box; border-radius: 5px; }",
                      ".grid-item { background-color: lightgrey; padding: 10px; border: 1px solid black; box-sizing: border-box; border-radius: 5px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Positioning and Overflow",
                "description": "Apply CSS styles to demonstrate different positioning schemes and handle overflow behavior.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following boxes using CSS:\n\n1. The `.relative-box` should use the `position: relative` property to be positioned relative to its normal position. Apply a light blue background color, 10px padding, a 20px bottom margin, a 1px solid light gray border, and a border-radius of 5px. Ensure `box-sizing` is set to `border-box`.\n\n2. The `.absolute-box` should use the `position: absolute` property to be positioned relative to the nearest positioned ancestor (the `.container` element). Apply a light coral background color, 10px padding, a 1px solid light gray border, and a border-radius of 5px. Ensure `box-sizing` is set to `border-box`. Position it 100px from the top and 20px from the left of its container.\n\n3. The `.fixed-box` should use the `position: fixed` property to be positioned relative to the viewport. Apply a light green background color, 10px padding, a 1px solid light gray border, and a border-radius of 5px. Ensure `box-sizing` is set to `border-box`. Position it 20px from the bottom and 20px from the right of the viewport, with a width of 200px and height of 80px.\n\n4. The `.overflow-box` should demonstrate overflow handling with `overflow: auto`. Apply a light yellow background color, 10px padding, a 1px solid light gray border, and a border-radius of 5px. Ensure `box-sizing` is set to `border-box`. The box should have a width of 100% and a height of 150px to allow scrolling if content exceeds its height.\n\nAdditionally, apply the following styles to the `body`:\n- `font-family: Arial, sans-serif;`\n- `margin: 0;`\n- `padding: 20px;`\n- `background-color: #f0f0f0;`\n\nAlso, style the `.container` class as follows:\n- `position: relative;`\n- `width: 80%;`\n- `margin: 0 auto;`\n- `padding: 20px;`\n- `background-color: #fff;`\n- `border: 2px solid #ddd;`\n- `box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);`\n\nMake sure to include `box-sizing`, `padding`, and `border-radius` properties where applicable. All CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Positioning and Overflow</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"relative-box\">Relative Box: Positioned relative to its normal position.</div>\n        <div class=\"absolute-box\">Absolute Box: Positioned relative to the nearest positioned ancestor.</div>\n        <div class=\"fixed-box\">Fixed Box: Positioned relative to the viewport.</div>\n        <div class=\"overflow-box\">\n            <p>Content inside an overflow box. This content should be long enough to demonstrate scrolling.</p>\n            <p>More content to ensure overflow is visible.</p>\n            <p>Additional content to see how overflow handles multiple paragraphs.</p>\n            <p>Even more content to test the overflow behavior.</p>\n        </div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Positioning and Overflow</title></head><body><div class=\"container\"><div class=\"relative-box\">Relative Box: Positioned relative to its normal position.</div><div class=\"absolute-box\">Absolute Box: Positioned relative to the nearest positioned ancestor.</div><div class=\"fixed-box\">Fixed Box: Positioned relative to the viewport.</div><div class=\"overflow-box\"><p>Content inside an overflow box. This content should be long enough to demonstrate scrolling.</p><p>More content to ensure overflow is visible.</p><p>Additional content to see how overflow handles multiple paragraphs.</p><p>Even more content to test the overflow behavior.</p></div></div></body></html>",
                    "required": [
                      "body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f0f0f0; }",
                      ".container { position: relative; width: 80%; margin: 0 auto; padding: 20px; background-color: #fff; border: 2px solid #ddd; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }",
                      ".relative-box { position: relative; width: 100%; height: 80px; background-color: lightblue; padding: 10px; margin-bottom: 20px; border: 1px solid lightgray; border-radius: 5px; box-sizing: border-box; }",
                      ".absolute-box { position: absolute; top: 100px; left: 20px; width: 100%; height: 80px; background-color: lightcoral; padding: 10px; border: 1px solid lightgray; border-radius: 5px; box-sizing: border-box; }",
                      ".fixed-box { position: fixed; bottom: 20px; right: 20px; width: 200px; height: 80px; background-color: lightgreen; padding: 10px; border: 1px solid lightgray; border-radius: 5px; box-sizing: border-box; }",
                      ".overflow-box { width: 100%; height: 150px; overflow: auto; background-color: lightyellow; padding: 10px; border: 1px solid lightgray; border-radius: 5px; box-sizing: border-box; }",
                      "p { margin: 0 0 10px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced CSS Layout",
                "description": "Apply advanced CSS layout techniques to style and position elements.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following layout using CSS:\n1. The '.grid-container' should be a grid layout with two columns and automatic rows. It should have a gap of 10px between items and a height of 400px.\n2. The '.box1' element should have a background color of lightcoral, a padding of 20px, black text color, a border-radius of 5px, a box-shadow for a subtle 3D effect, and a z-index of 1.\n3. The '.box2' element should be positioned absolutely within the '.grid-container' with a top offset of 50px and a left offset of 50px. It should have a width of 200px, a height of 150px, a background color of lightblue, padding, white text color, a border-radius, a box-shadow, and a z-index of 3.\n4. The '.box3' element should be positioned fixed at the bottom-right corner of the viewport with a bottom offset of 20px and a right offset of 20px. It should have a width of 200px, a height of 100px, a background color of lightgreen, padding, white text color, border-radius, box-shadow, and a z-index of 2.\n5. The '.box4' element should span across both columns, have a background color of lightyellow, include scrollable content, and have padding of 20px. Its text should have no margin. The box should also have the same padding, border-radius of 5px, box-shadow of 0 4px 8px rgba(0, 0, 0, 0.2), and z-index of 0 as the other boxes.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Advanced CSS Layout</title>\n</head>\n<body>\n    <header>\n        <h1>Complex CSS Layout</h1>\n    </header>\n    <main>\n        <section class=\"grid-container\">\n            <div class=\"box1\">Box 1 (static)</div>\n            <div class=\"box2\">Box 2 (absolute)</div>\n            <div class=\"box3\">Box 3 (fixed)</div>\n            <div class=\"box4\">\n                Box 4 (scrollable content)\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam scelerisque urna a urna ultricies, non consequat lorem malesuada. Donec at nisi nec lacus consectetur ullamcorper.</p>\n                <p>Phasellus fringilla diam eu facilisis luctus. Vivamus laoreet arcu nec turpis cursus, a posuere magna cursus. Curabitur scelerisque vestibulum nulla, ac condimentum odio sodales sed.</p>\n                <p>Morbi egestas ligula eget sapien finibus, nec consequat quam dapibus. Integer auctor orci nec lectus suscipit iaculis. In sit amet ante vel sem cursus malesuada euismod ac nisi.</p>\n            </div>\n        </section>\n    </main>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Advanced CSS Layout</title>\n</head>\n<body>\n    <header>\n        <h1>Complex CSS Layout</h1>\n    </header>\n    <main>\n        <section class=\"grid-container\">\n            <div class=\"box1\">Box 1 (static)</div>\n            <div class=\"box2\">Box 2 (absolute)</div>\n            <div class=\"box3\">Box 3 (fixed)</div>\n            <div class=\"box4\">\n                Box 4 (scrollable content)\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam scelerisque urna a urna ultricies, non consequat lorem malesuada. Donec at nisi nec lacus consectetur ullamcorper.</p>\n                <p>Phasellus fringilla diam eu facilisis luctus. Vivamus laoreet arcu nec turpis cursus, a posuere magna cursus. Curabitur scelerisque vestibulum nulla, ac condimentum odio sodales sed.</p>\n                <p>Morbi egestas ligula eget sapien finibus, nec consequat quam dapibus. Integer auctor orci nec lectus suscipit iaculis. In sit amet ante vel sem cursus malesuada euismod ac nisi.</p>\n            </div>\n        </section>\n    </main>\n</body>\n</html>",
                    "required": [
                      ".grid-container { display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: auto; gap: 10px; position: relative; height: 400px; }",
                      ".box1, .box2, .box3, .box4 { padding: 20px; color: black; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }",
                      ".box1 { background-color: lightcoral; z-index: 1; }",
                      ".box2 { background-color: lightblue; position: absolute; top: 50px; left: 50px; width: 200px; height: 150px; z-index: 3; }",
                      ".box3 { background-color: lightgreen; position: fixed; bottom: 20px; right: 20px; width: 200px; height: 100px; z-index: 2; }",
                      ".box4 { background-color: lightyellow; overflow: auto; height: 100%; grid-column: span 2; padding: 20px; border-radius: 5px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); }",
                      ".box4 p { margin: 0; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 10: Understanding CSS Float Property",
            "documents": [
              {
                "title": "CSS Float Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>float</strong> property is used to position an element to the left or right within its containing block, allowing other content to flow around it. This property is commonly used for text wrapping around images or for creating multi-column layouts."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Syntax:</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "float: none | left | right | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> The element does not float. This is the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>left:</strong> The element floats to the left of its containing block."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>right:</strong> The element floats to the right of its containing block."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> The element inherits the float value from its parent."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Important Note:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The float property affects how elements are positioned within a document but does not affect the document's overall layout flow. To restore the normal flow after floating elements, the clear property can be used."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Float None</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".parent {\n    border: 2px solid black;\n    padding: 10px;\n}\n\nimg {\n    width: 100px; /* Image size */\n    height: 120px; /* Image size */\n    float: none; /* Default value */\n}\n\np {\n    font-size: 16px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Float None</title>\n</head>\n<body>\n    <div class=\"parent\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"E-learning image\">\n        <p>\n            This example uses <code>float: none</code>. The image is in the normal flow of the document and is not floated.\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>float: none</code> is in the normal document flow and is not floated."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Float Right</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".parent {\n    border: 2px solid black;\n    padding: 10px;\n}\n\nimg {\n    width: 100px; /* Image size */\n    height: 75px; /* Image size */\n    float: right;\n    margin-left: 10px;\n}\n\np {\n    font-size: 16px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Float Right</title>\n</head>\n<body>\n    <div class=\"parent\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"E-learning image\">\n        <p>\n            This example uses <code>float: right</code>. The image is floated to the right, and the text wraps around it.\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>float: right</code> is moved to the right side of its container, allowing text to wrap around it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Float Left</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".parent {\n    border: 2px solid black;\n    padding: 10px;\n}\n\nimg {\n    width: 100px; /* Image size */\n    height: 75px; /* Image size */\n    float: left;\n    margin-right: 10px;\n}\n\np {\n    font-size: 16px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Float Left</title>\n</head>\n<body>\n    <div class=\"parent\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"E-learning image\">\n        <p>\n            This example uses <code>float: left</code>. The image is floated to the left, and the text wraps around it.\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>float: left</code> is moved to the left side of its container, allowing text to wrap around it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 4: Float with Block Elements</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    border: 2px solid black;\n    padding: 10px;\n    background-color: lightgray;\n}\n\n.float-left {\n    float: left;\n    width: 300px; /* Width is necessary for the float to have an effect */\n    border: 2px solid black;\n    background-color: yellow;\n    padding: 10px;\n    margin-right: 10px; /* Space between the floated element and the text */\n}\n\n.content {\n    overflow: hidden; /* Clears floats within the container */\n}\n\np {\n    font-size: 16px;\n    margin: 10px 0;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <title>CSS Float with Block Elements</title>\n</head>\n<body>\n    <div class=\"container\">\n        <p class=\"float-left\">\n            This paragraph is floated to the left. The surrounding content will wrap around it.\n        </p>\n        <div class=\"content\">\n            <p>\n                Floating block elements like this paragraph allows text to flow around them. In this example, the paragraph with <code>float: left</code> will be pushed to the left side of the container, and the remaining content will wrap around it. This effect is useful for creating magazine-style layouts or when you need content to flow around images or other elements.\n            </p>\n            <p>\n                The <code>float</code> property can be used to control the layout of elements and how content interacts with them. Experiment with different values of the <code>float</code> property to see how it affects the layout.\n            </p>\n        </div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the block-level element with <code>float: left</code> allows text to flow around it. This layout is useful for creating magazine-style layouts or for wrapping text around images."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Clear Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>clear</strong> property controls the behavior of elements that are adjacent to floated elements. It specifies whether an element should be moved below any preceding floated elements, preventing text or other content from wrapping around the floated elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Clear Syntax</strong>"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "clear: none | left | right | both | initial | inherit;"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> Allows the element to float (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>left:</strong> Moves the element below any left-floating elements."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>right:</strong> Moves the element below any right-floating elements."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>both:</strong> Moves the element below any floating elements (both left and right)."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>initial:</strong> Sets the property value to the default value."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>inherit:</strong> Inherits the property value from its parent element."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: CSS Clear None Value</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: right;\n    width: 100px;\n    height: 100px;\n    border: 2px solid orange;\n}\n\np {\n    clear: none; /* Default value; makes no change */\n    border: 2px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Clear None</title>\n</head>\n<body>\n    <div class=\"container\">\n        <img src=\"https://www.learningeverest.com/wp-content/uploads/2019/04/What-is-eLearning.jpg\" alt=\"Sample image\" class=\"float-right\">\n        <p>This paragraph wraps around the floated image.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>clear: none</code> is in the normal document flow and is not affected by floating elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: CSS Clear Left Value</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: left;\n    width: 100px;\n    height: 100px;\n    border: 2px solid orange;\n}\n\np.clear-left {\n    clear: left; /* Clears the left float and moves below it */\n    border: 2px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Clear Left Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <img src=\"https://www.learningeverest.com/wp-content/uploads/2019/04/What-is-eLearning.jpg\" alt=\"Left Floated Image\" class=\"float-left\">\n        <p class=\"clear-left\">This paragraph is cleared to ensure it appears below the left-floated image.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>clear: left</code> is moved below any left-floating elements, ensuring it appears below them."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: CSS Clear Right Value</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: right;\n    width: 100px;\n    height: 100px;\n    border: 2px solid orange;\n}\n\np.clear-right {\n    clear: right; /* Clears the right float and moves below it */\n    border: 2px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>CSS Clear Right Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <img src=\"https://www.teachhub.com/wp-content/uploads/2020/06/eLearning-Resources-to-Teach-Students-Virtually.jpg\" alt=\"Right Floated Image\" class=\"float-right\">\n        <p class=\"clear-right\">This paragraph is cleared to ensure it appears below the right-floated image.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the element with <code>clear: right</code> is moved below any right-floating elements, ensuring it appears below them."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Common Issues with CSS Float</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Collapsing Parent Element:</strong> When all contents are floated, the parent container can collapse. Use the clearfix method to handle this."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img, p {\n    float: right;\n    border: 2px solid orange;\n}\n\nimg {\n    width: 100px;\n    height: 100px;\n}\n\n.parent {\n    padding: 12px;\n    border: 2px solid black;\n    background-color: lightgreen;\n}\n\n.clearfix::after {\n    content: \"\";\n    display: block;\n    clear: both;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Collapsing Parent Example</title>\n</head>\n<body>\n    <div class=\"parent clearfix\">\n        <img src=\"https://www.teachhub.com/wp-content/uploads/2020/06/eLearning-Resources-to-Teach-Students-Virtually.jpg\" alt=\"Image\">\n        <p>This paragraph wraps around the floated image.</p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>2. Overflow Issue:</strong> When a floated element’s height exceeds its parent’s height, it may overflow. Use <code>overflow: auto</code> to handle this."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: right;\n    width: 170px;\n    height: 170px;\n    border: 2px solid orange;\n}\n\n.parent {\n    overflow: auto; /* Expands to contain floating elements */\n    border: 2px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Overflow Example</title>\n</head>\n<body>\n    <div class=\"parent\">\n        <img src=\"https://www.teachhub.com/wp-content/uploads/2020/06/eLearning-Resources-to-Teach-Students-Virtually.jpg\" alt=\"Large Image\">\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Float Property",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>float</strong> property allows you to position elements on the left or right side of their container, creating layouts where text and other elements wrap around the floated element. The floated element is removed from the normal document flow, letting subsequent content flow around it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Float Property Values</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> The element does not float (default value)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>left:</strong> The element floats on the left side of its container."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>right:</strong> The element floats on the right side of its container."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>initial:</strong> Sets the property to its default value."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>inherit:</strong> The element inherits the float property from its parent."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Wrapping Text Around an Image</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: right; /* Floats the image to the right */\n    width: 80px;\n    height: 80px;\n    border: 2px solid black;\n}\n\ndiv.parent {\n    border: 2px solid black;\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Wrap Text Around Image</title>\n</head>\n<body>\n    <div class=\"parent\">\n        <img src=\"https://image.eztalks.com/2021/03-16/14/fcff83e07f193e0d31fa77c138de37de.jpg\" alt=\"Sample Image\">\n        <p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque imperdiet, odio at posuere gravida, erat eros consequat purus, a vehicula felis libero ut justo.\n        </p>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, the image is floated to the right, allowing the text to wrap around it."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Creating an Image Gallery</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "img {\n    float: left; /* Floats images to the left */\n    width: 240px;\n    height: 180px;\n    margin: 2px;\n}\n\ndiv.gallery {\n    border: 4px solid black;\n    overflow: auto; /* Ensures the container expands to fit floated elements */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Image Gallery</title>\n</head>\n<body>\n    <div class=\"gallery\">\n        <img src=\"https://image.eztalks.com/2021/03-16/14/fcff83e07f193e0d31fa77c138de37de.jpg\" alt=\"Gallery Image 1\">\n        <img src=\"https://www.teachhub.com/wp-content/uploads/2020/06/eLearning-Resources-to-Teach-Students-Virtually.jpg\" alt=\"Gallery Image 2\">\n        <img src=\"https://elearningindustry.com/wp-content/uploads/2020/12/the-importance-of-elearning-advantages-and-benefits.png\" alt=\"Gallery Image 3\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, images are floated to the left, creating a gallery layout where images line up next to each other."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Creating a Three-Column Layout</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "header {\n    height: 80px;\n    background-color: #3B5998; /* Facebook Blue */\n    text-align: center;\n}\n\naside {\n    width: 25%;\n    float: left; /* Floats both sidebars to the left */\n    height: 200px;\n    background-color: #FF4500; /* Orange Red */\n    text-align: center;\n}\n\nsection {\n    width: 50%;\n    float: left; /* Floats the main content to the left */\n    height: 200px;\n    background-color: #32CD32; /* Lime Green */\n    text-align: center;\n}\n\nfooter {\n    clear: both; /* Clears both floated sidebars and content */\n    border: 2px solid #000000; /* Black */\n    height: 40px;\n    background-color: #FFD700; /* Gold */\n    text-align: center;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Three Column Layout</title>\n</head>\n<body>\n    <header>\n        <h1>Header</h1>\n    </header>\n    <aside class=\"left-sidebar\">Left Sidebar</aside>\n    <section class=\"main-content\">Main Content</section>\n    <aside class=\"right-sidebar\">Right Sidebar</aside>\n    <footer>Footer</footer>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•</strong> In this example, floats are used to create a three-column layout with a header and footer. The <code>clear: both</code> property in the footer ensures it appears below the floated sidebars and main content."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What does the float: none property value do?",
                "options": [
                  "Positions the element to the left",
                  "Positions the element to the right",
                  "Keeps the element in the normal document flow",
                  "Clips the element so it is not visible"
                ],
                "correctAnswer": "Keeps the element in the normal document flow",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the primary use of the CSS float property?",
                "options": [
                  "To align elements vertically within their container",
                  "To position an element to the left or right and allow content to flow around it",
                  "To change the background color of an element",
                  "To adjust the font size of text within an element"
                ],
                "correctAnswer": "To position an element to the left or right and allow content to flow around it",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the clear property in CSS control?",
                "options": [
                  "The behavior of elements adjacent to floated elements",
                  "The color of an element’s border",
                  "The visibility of an element’s background",
                  "The size of an element’s padding"
                ],
                "correctAnswer": "The behavior of elements adjacent to floated elements",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which clear value ensures an element appears below a left-floated element?",
                "options": [
                  "none",
                  "left",
                  "right",
                  "both"
                ],
                "correctAnswer": "left",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which clear value ensures an element appears below a right-floated element?",
                "options": [
                  "none",
                  "left",
                  "right",
                  "both"
                ],
                "correctAnswer": "right",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the clear property do in CSS?",
                "options": [
                  "Specifies how much space to add around an element.",
                  "Determines whether an element should move below preceding floated elements.",
                  "Sets the font size for an element.",
                  "Adjusts the margin of an element."
                ],
                "correctAnswer": "Determines whether an element should move below preceding floated elements.",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does the float property affect the layout of other content on a webpage?",
                "options": [
                  "It changes the color of the floated element.",
                  "It allows other content to wrap around the floated element.",
                  "It adjusts the size of the floated element.",
                  "It changes the font style of the floated element."
                ],
                "correctAnswer": "It allows other content to wrap around the floated element.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which overflow value will only add scrollbars if necessary when content overflows its container?",
                "options": [
                  "visible",
                  "hidden",
                  "scroll",
                  "auto"
                ],
                "correctAnswer": "auto",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value of the position property makes an element stay fixed in place relative to the viewport during scrolling?",
                "options": [
                  "static",
                  "relative",
                  "absolute",
                  "fixed"
                ],
                "correctAnswer": "fixed",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the default value of the float property?",
                "options": [
                  "none",
                  "left",
                  "right",
                  "initial"
                ],
                "correctAnswer": "none",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "CSS Float Properties",
                "description": "Style a highlighted section within a paragraph using CSS float properties.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the following elements using CSS to demonstrate the use of the `float` property. The requirements are:\n\n1. `.highlight`: This element should float to the right using the `float: right` property. It should have a light blue background color, a width of 200px, 10px padding, a 10px margin on the left side, and a 2px solid black border. Additionally, the text within the `.highlight` element should be center-aligned.\n\n2. `p`: The paragraph element containing the `.highlight` should have a padding of 8px and a 2px solid gray border.\n\nEnsure that all CSS styles are written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Float - Easy</title>\n</head>\n<body>\n    <p>\n        <span class=\"highlight\">CodeCraft is your gateway to mastering web development.</span>\n        At CodeCraft, we believe that learning should be interactive and engaging.\n        Our platform offers a wide range of courses designed to help you build real-world projects and gain practical experience.\n    </p>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Float - Easy</title></head><body><p><span class=\"highlight\">CodeCraft is your gateway to mastering web development.</span> At CodeCraft, we believe that learning should be interactive and engaging. Our platform offers a wide range of courses designed to help you build real-world projects and gain practical experience.</p></body></html>",
                    "required": [
                      ".highlight { float: right; width: 200px; padding: 10px; background-color: lightblue; border: 2px solid black; margin-left: 10px; text-align: center; }",
                      "p { padding: 8px; border: 2px solid gray; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Float - Medium",
                "description": "Apply CSS float properties to images and ensure proper text wrapping and layout using CSS.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the following elements using CSS to achieve a balanced layout with floated images:\n\n1. An `<img>` element with the class `.float-left` should float to the left, have a width of 150px, a 10px margin on the right and bottom, and a 2px solid gray border.\n\n2. An `<img>` element with the class `.float-right` should float to the right, have a width of 150px, a 10px margin on the left and bottom, and a 2px solid gray border.\n\n3. A `<p>` element should have 8px padding, a light gray background color (`#f0f0f0`), and a 2px solid black border.\n\n4. The `.content` container should have an `overflow` property set to `auto` to clear the floated elements and 10px padding.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Float - Medium</title>\n</head>\n<body>\n    <div class=\"content\">\n        <img src=\"https://cdn1.vectorstock.com/i/1000x1000/66/55/hand-waving-gesture-saying-hi-icon-isolated-vector-43626655.jpg\" alt=\"Left Image\" class=\"float-left\" />\n        <img src=\"https://cdn1.vectorstock.com/i/1000x1000/66/55/hand-waving-gesture-saying-hi-icon-isolated-vector-43626655.jpg\" alt=\"Right Image\" class=\"float-right\" />\n        <p>\n            CodeCraft offers an extensive library of courses designed to help you\n            master web development. Whether you're a beginner or an experienced\n            developer, we have the right resources for you. Our interactive\n            lessons cover everything from basic HTML and CSS to advanced\n            JavaScript frameworks. Join CodeCraft today and start building your\n            future in tech!\n        </p>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Float - Medium</title></head><body><div class=\"content\"><img src=\"https://cdn1.vectorstock.com/i/1000x1000/66/55/hand-waving-gesture-saying-hi-icon-isolated-vector-43626655.jpg\" alt=\"Left Image\" class=\"float-left\"><img src=\"https://cdn1.vectorstock.com/i/1000x1000/66/55/hand-waving-gesture-saying-hi-icon-isolated-vector-43626655.jpg\" alt=\"Right Image\" class=\"float-right\"><p>CodeCraft offers an extensive library of courses designed to help you master web development. Whether you're a beginner or an experienced developer, we have the right resources for you. Our interactive lessons cover everything from basic HTML and CSS to advanced JavaScript frameworks. Join CodeCraft today and start building your future in tech!</p></div></body></html>",
                    "required": [
                      ".float-left { float: left; width: 150px; margin-right: 10px; margin-bottom: 10px; border: 2px solid gray; }",
                      ".float-right { float: right; width: 150px; margin-left: 10px; margin-bottom: 10px; border: 2px solid gray; }",
                      "p { padding: 8px; background-color: #f0f0f0; border: 2px solid black; }",
                      ".content { overflow: auto; padding: 10px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Float - Hard",
                "description": "Apply advanced CSS float properties and positioning techniques to manage overlapping elements and clear floats.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the following elements using CSS to demonstrate advanced float and positioning properties:\n\n1. The `.container` element should have 20px padding, a 2px solid black border, overflow set to hidden, a relative position, and a background color of #f8f8f8.\n\n2. The `.box` elements should have a width of 200px, 10px padding, a 2px solid #333 border, and a light blue background color. They should also have a margin-bottom of 20px.\n\n3. The `.box` element with the class `.float-left` should float to the left with a 20px margin on the right.\n\n4. The `.box` element with the class `.float-right` should float to the right with a 20px margin on the left.\n\n5. The `.overlay` element should be positioned absolutely, with a top offset of 60px and centered horizontally in the container. It should have a higher z-index to overlap the floated elements, a width of 300px, 20px padding, a semi-transparent orange background (rgba(255, 165, 0, 0.8)), and a 2px solid black border. The text inside should be centered.\n\n6. The `.clear` element should use `clear: both` to ensure that it clears the floats from the preceding `.box` elements.\n\n7. The `.final-paragraph` element should appear below the floated and positioned elements, with 10px padding, a light gray background color (#e0e0e0), and a 2px solid gray border.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Float - Hard</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box float-left\">\n            <h2>Float Left</h2>\n            <p>This box is floated to the left. It contains some important information.</p>\n        </div>\n        <div class=\"box float-right\">\n            <h2>Float Right</h2>\n            <p>This box is floated to the right. It also contains some important information.</p>\n        </div>\n        <div class=\"overlay\">\n            <h2>Positioned & Z-index</h2>\n            <p>This element is positioned absolutely and has a higher z-index, so it overlaps the floated elements.</p>\n        </div>\n        <div class=\"clear\"></div>\n        <p class=\"final-paragraph\">\n            Below the floated and positioned elements, this paragraph showcases how overflow works with floated elements.\n            Notice how the content adjusts based on the floats and positions above.\n        </p>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Float - Hard</title></head><body><div class=\"container\"><div class=\"box float-left\"><h2>Float Left</h2><p>This box is floated to the left. It contains some important information.</p></div><div class=\"box float-right\"><h2>Float Right</h2><p>This box is floated to the right. It also contains some important information.</p></div><div class=\"overlay\"><h2>Positioned & Z-index</h2><p>This element is positioned absolutely and has a higher z-index, so it overlaps the floated elements.</p></div><div class=\"clear\"></div><p class=\"final-paragraph\">Below the floated and positioned elements, this paragraph showcases how overflow works with floated elements. Notice how the content adjusts based on the floats and positions above.</p></div></body></html>",
                    "required": [
                      ".container { padding: 20px; border: 2px solid black; overflow: hidden; position: relative; background-color: #f8f8f8; }",
                      ".box { width: 200px; padding: 10px; margin-bottom: 20px; border: 2px solid #333; background-color: lightblue; }",
                      ".float-left { float: left; margin-right: 20px; }",
                      ".float-right { float: right; margin-left: 20px; }",
                      ".overlay { position: absolute; top: 60px; left: 50%; transform: translateX(-50%); z-index: 10; width: 300px; padding: 20px; background-color: rgba(255, 165, 0, 0.8); border: 2px solid black; text-align: center; }",
                      ".clear { clear: both; }",
                      ".final-paragraph { padding: 10px; background-color: #e0e0e0; border: 2px solid gray; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 11: CSS Flex Layout",
            "documents": [
              {
                "title": "CSS Flex Layout",
                "content": [
                  {
                    "type": "sentence",
                    "text": "The <strong>CSS flex layout</strong> provides a modern and efficient way to layout, align, and distribute space among elements within a container. This layout system, known as Flexbox, offers more flexibility compared to traditional layout methods using tables, floats, and positioning."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>What is Flexbox?</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Flexbox, or the Flexible Box Layout, is designed to provide a consistent layout structure that adapts to different screen sizes and devices. It simplifies complex layout tasks and ensures responsive design."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex Container and Flex Items</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Flex Container:</strong> To create a flex layout, start by defining a flex container. Any element can be turned into a flex container by applying <code>display: flex</code> to it."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Flex Items:</strong> The elements inside the flex container are called flex items. These items are automatically aligned and distributed within the container according to the flexbox properties."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example of a Flex Container with Three Flex Items</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".flex-container {\n  display: flex;\n  border: 2px solid #663399; /* Purple border */\n  padding: 10px;\n}\n\n.flex-item {\n  background-color: #FF8C00; /* Dark orange */\n  padding: 20px;\n  margin: 5px;\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  flex: 1; /* Flex grow property */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>flex-container</title>\n</head>\n<body>\n    <div class=\"flex-container\">\n  <div class=\"flex-item\">Item 1</div>\n  <div class=\"flex-item\">Item 2</div>\n  <div class=\"flex-item\">Item 3</div>\n</div>\n\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• In this example, the <code>.flex-container</code> is the flex container, and each <code>.flex-item</code> is a flex item. The <code>flex</code> property in the flex items allows them to grow equally within the container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Understanding Flexbox Terminologies</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Main Axis:</strong> The primary axis along which the flex items are arranged. The direction of the main axis is determined by the <code>flex-direction</code> property. If <code>flex-direction: row;</code>, the main axis is horizontal; if <code>flex-direction: column;</code>, the main axis is vertical."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Main Start and Main End:</strong> These refer to the starting and ending points of the main axis. Flex items are positioned from the main start to the main end."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Main Size:</strong> The size of a flex item along the main axis (either width or height, depending on the axis direction)."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Cross Axis:</strong> The perpendicular axis to the main axis. For a horizontal main axis, the cross axis is vertical, and vice versa."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Cross Start and Cross End:</strong> The start and end points along the cross axis."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Cross Size:</strong> The size of a flex item along the cross axis."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flexbox vs. Grid Layout</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "While Flexbox is great for layouts in a single direction (either horizontal or vertical), the CSS Grid Layout provides more powerful capabilities for creating complex layouts in both directions simultaneously."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Flex Container",
                "content": [
                  {
                    "type": "sentence",
                    "text": "A <strong>flex container</strong> is a parent element that holds child elements known as flex items. The flex container's primary purpose is to enable the layout of its children using the Flexbox layout model. This layout model provides various properties to align and distribute space among the flex items efficiently."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex Container Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-direction</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-wrap</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-flow</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>justify-content</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>align-items</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>align-content</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>gap, row-gap, column-gap</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex Direction</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>flex-direction</strong> property specifies the direction in which the flex items are placed in the flex container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Possible values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• row (default):</strong> Arranges items horizontally from left to right."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• row-reverse:</strong> Arranges items horizontally from right to left."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• column:</strong> Arranges items vertically from top to bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• column-reverse:</strong> Arranges items vertically from bottom to top."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* General styling for the page */\nbody {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n/* Flex container styling */\n.container {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\n/* Flex box styling */\n.flex-box {\n    display: flex;\n    gap: 10px;\n    border: 2px solid #000;\n    padding: 10px;\n    background-color: #fff;\n    align-items: center;\n    flex-wrap: wrap; /* Ensure items wrap if necessary */\n}\n\n/* Flex items styling */\n.box {\n    width: 60px;\n    height: 60px;\n    background-color: #ff8c00; /* Dark orange */\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 16px;\n}\n\n/* Label styling */\n.label {\n    flex: 1 100%;\n    margin-bottom: 10px;\n    font-weight: bold;\n    text-align: center;\n}\n\n/* Specific direction classes */\n.row {\n    flex-direction: row;\n}\n\n.row-reverse {\n    flex-direction: row-reverse;\n}\n\n.column {\n    flex-direction: column;\n}\n\n.column-reverse {\n    flex-direction: column-reverse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flex Direction Demo</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"flex-box row\">\n            <div class=\"label\">Flex Direction: row</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n        </div>\n        <div class=\"flex-box row-reverse\">\n            <div class=\"label\">Flex Direction: row-reverse</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n        </div>\n        <div class=\"flex-box column\">\n            <div class=\"label\">Flex Direction: column</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n        </div>\n        <div class=\"flex-box column-reverse\">\n            <div class=\"label\">Flex Direction: column-reverse</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n        </div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Direction: row:</strong> Items are arranged horizontally from left to right."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Direction: row-reverse:</strong> Items are arranged horizontally from right to left."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Direction: column:</strong> Items are arranged vertically from top to bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Direction: column-reverse:</strong> Items are arranged vertically from bottom to top."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex Wrap</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>flex-wrap</strong> property controls whether the flex items are forced into a single line or can wrap onto multiple lines."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Possible values:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong• >nowrap (default):</strong> All flex items will be on one line."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• wrap:</strong> Flex items will wrap onto multiple lines from top to bottom."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• wrap-reverse:</strong> Flex items will wrap onto multiple lines from bottom to top."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* General styling for the page */\nbody {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n/* Flex container styling */\n.container {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n    width: 100%;\n}\n\n/* Flex box styling */\n.flex-box {\n    display: flex;\n    gap: 10px;\n    border: 2px solid #000;\n    padding: 10px;\n    background-color: #fff;\n    flex-wrap: nowrap; /* Default value, will be overridden by specific classes */\n}\n\n/* Flex items styling */\n.box {\n    width: 80px;\n    height: 80px;\n    background-color: #ff8c00; /* Dark orange */\n    color: white;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 16px;\n}\n\n/* Label styling */\n.label {\n    flex: 1 100%;\n    margin-bottom: 10px;\n    font-weight: bold;\n    text-align: center;\n}\n\n/* Specific wrap classes */\n.nowrap {\n    flex-wrap: nowrap;\n}\n\n.wrap {\n    flex-wrap: wrap;\n}\n\n.wrap-reverse {\n    flex-wrap: wrap-reverse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flex Wrap Demo</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"flex-box nowrap\">\n            <div class=\"label\">Flex Wrap: nowrap</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n            <div class=\"box\">Item 4</div>\n            <div class=\"box\">Item 5</div>\n        </div>\n        <div class=\"flex-box wrap\">\n            <div class=\"label\">Flex Wrap: wrap</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n            <div class=\"box\">Item 4</div>\n            <div class=\"box\">Item 5</div>\n        </div>\n        <div class=\"flex-box wrap-reverse\">\n            <div class=\"label\">Flex Wrap: wrap-reverse</div>\n            <div class=\"box\">Item 1</div>\n            <div class=\"box\">Item 2</div>\n            <div class=\"box\">Item 3</div>\n            <div class=\"box\">Item 4</div>\n            <div class=\"box\">Item 5</div>\n        </div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Wrap: nowrap:</strong> Items will not wrap and will stay on one line. If there’s not enough space, the items will overflow the container."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Wrap: wrap:</strong> Items will wrap onto multiple lines from top to bottom if they exceed the container width."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>Flex Wrap: wrap-reverse:</strong> Items will wrap onto multiple lines from bottom to top if they exceed the container width."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Flex Item Properties",
                "content": [
                  {
                    "type": "sentence",
                    "text": "In a <strong>Flexbox layout</strong>, the flex container and its direct child elements (flex items) are aligned and arranged based on the container's properties."
                  },
                  {
                    "type": "sentence",
                    "text": "The following properties adjust the individual flex items within the flexbox container."
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>order</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-grow</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-shrink</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>flex-basis</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• <strong>align-self</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Order Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>order</strong> property specifies the order in which the flex items appear in the flex container."
                  },
                  {
                    "type": "sentence",
                    "text": "By default, all items have an order of 0, and items with a lower order value appear first."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    display: flex;\n    background-color: #f0f0f0;\n    padding: 10px;\n    border: 1px solid #ccc;\n}\n\n.box {\n    padding: 20px;\n    margin: 5px;\n    color: white;\n    background-color: #5a5a5a;\n    text-align: center;\n}\n\n.order1 {\n    order: 1;\n}\n\n.order2 {\n    order: 2;\n}\n\n.order3 {\n    order: 3;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flexbox Properties Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box order3\">Item 1 (order: 3)</div>\n        <div class=\"box order1\">Item 2 (order: 1)</div>\n        <div class=\"box order2\">Item 3 (order: 2)</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex-Grow Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>flex-grow</strong> property specifies how much a flex item will grow relative to the rest of the items inside the flex container."
                  },
                  {
                    "type": "sentence",
                    "text": "A value of 0 means the item will not grow, while a positive number means the item will grow."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    display: flex;\n    background-color: #f0f0f0;\n    padding: 10px;\n    border: 1px solid #ccc;\n}\n\n.box {\n    padding: 20px;\n    margin: 5px;\n    color: white;\n    background-color: #5a5a5a;\n    text-align: center;\n}\n\n.grow1 {\n    flex-grow: 1;\n}\n\n.grow2 {\n    flex-grow: 2;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flexbox Properties Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box grow1\">Item 1 (grow: 1)</div>\n        <div class=\"box grow2\">Item 2 (grow: 2)</div>\n        <div class=\"box grow1\">Item 3 (grow: 1)</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex-Shrink Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>flex-shrink</strong> property specifies how much a flex item will shrink relative to the rest of the flex items when there is not enough space."
                  },
                  {
                    "type": "sentence",
                    "text": "By default, it is set to 1, meaning items shrink equally."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    display: flex;\n    width: 300px;\n    background-color: #f0f0f0;\n    padding: 10px;\n    border: 1px solid #ccc;\n}\n\n.box {\n    padding: 20px;\n    margin: 5px;\n    color: white;\n    background-color: #5a5a5a;\n    text-align: center;\n    width: 150px;\n}\n\n.shrink1 {\n    flex-shrink: 1;\n}\n\n.shrink2 {\n    flex-shrink: 2;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flexbox Properties Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box shrink1\">Item 1 (shrink: 1)</div>\n        <div class=\"box shrink2\">Item 2 (shrink: 2)</div>\n        <div class=\"box shrink1\">Item 3 (shrink: 1)</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Flex-Basis Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>flex-basis</strong> property defines the initial size of the flex item before the remaining space is distributed according to flex-grow and flex-shrink."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    display: flex;\n    background-color: #f0f0f0;\n    padding: 10px;\n    border: 1px solid #ccc;\n}\n\n.box {\n    padding: 20px;\n    margin: 5px;\n    color: white;\n    background-color: #5a5a5a;\n    text-align: center;\n}\n\n.basis100 {\n    flex-basis: 100px;\n}\n\n.basis150 {\n    flex-basis: 150px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flexbox Properties Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box basis100\">Item 1 (basis: 100px)</div>\n        <div class=\"box basis150\">Item 2 (basis: 150px)</div>\n        <div class=\"box basis100\">Item 3 (basis: 100px)</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Align-Self Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>align-self</strong> property allows the default alignment (or the one specified by align-items) to be overridden for individual flex items."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".container {\n    display: flex;\n    background-color: #f0f0f0;\n    padding: 10px;\n    border: 1px solid #ccc;\n    height: 200px; /* Height is necessary to see the align-self effect */\n}\n\n.box {\n    padding: 20px;\n    margin: 5px;\n    color: white;\n    background-color: #5a5a5a;\n    text-align: center;\n    width: 100px;\n}\n\n.align-start {\n    align-self: flex-start;\n}\n\n.align-center {\n    align-self: center;\n}\n\n.align-end {\n    align-self: flex-end;\n}\n\n.align-stretch {\n    align-self: stretch;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"styles.css\">\n    <title>Flexbox Properties Example</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box align-start\">Item 1 (align-self: flex-start)</div>\n        <div class=\"box align-center\">Item 2 (align-self: center)</div>\n        <div class=\"box align-end\">Item 3 (align-self: flex-end)</div>\n        <div class=\"box align-stretch\">Item 4 (align-self: stretch)</div>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "Responsive Layout Using CSS Flexbox",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Flexbox</strong> simplifies creating layouts that adapt to different screen sizes."
                  },
                  {
                    "type": "sentence",
                    "text": "By using Flexbox, you can design responsive layouts that automatically adjust to fit various devices, ensuring an optimal user experience across desktops, tablets, and mobile phones."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Multi-Column Layouts with Flexbox</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Flexbox allows you to create flexible column layouts that adjust based on screen size."
                  },
                  {
                    "type": "sentence",
                    "text": "Here, we'll look at how to set up a three-column layout that adapts to different devices."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Base styles for the flex container */\nmain {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n}\n\n/* Base styles for the columns */\n.column {\n    padding: 20px;\n    color: white;\n    text-align: center;\n}\n\n.column1 {\n    background-color: #f56c6c;\n    flex: 1 1 20%;\n}\n\n.column2 {\n    background-color: #ffbb33;\n    flex: 1 1 60%;\n}\n\n.column3 {\n    background-color: #3bafda;\n    flex: 1 1 20%;\n}\n\n/* Styles for tablets */\n@media screen and (max-width: 768px) {\n    .column1, .column2 {\n        flex: 1 1 50%;\n    }\n\n    .column3 {\n        flex: 1 1 100%;\n    }\n}\n\n/* Styles for mobile devices */\n@media screen and (max-width: 450px) {\n    .column {\n        flex: 1 1 100%;\n    }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Multi-Column Layout</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <main>\n        <div class=\"column column1\">Column 1</div>\n        <div class=\"column column2\">Column 2</div>\n        <div class=\"column column3\">Column 3</div>\n    </main>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Description: This layout initially displays three columns."
                  },
                  {
                    "type": "sentence",
                    "text": "On tablets, it shifts to two columns, and on mobile devices, it switches to a single-column layout."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Image Gallery Using Flexbox</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "Create a responsive image gallery that adjusts to different screen sizes using Flexbox."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Base styles for the image gallery */\n.gallery {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    border: 2px solid #ddd;\n    padding: 10px;\n}\n\n.gallery img {\n    width: calc(33% - 20px);\n    height: auto;\n    border-radius: 8px;\n}\n\n/* Styles for tablets */\n@media screen and (max-width: 768px) {\n    .gallery img {\n        width: calc(50% - 20px);\n    }\n}\n\n/* Styles for mobile devices */\n@media screen and (max-width: 450px) {\n    .gallery img {\n        width: calc(100% - 20px);\n    }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Image Gallery</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"gallery\">\n        <img src=\"https://elearningindustry.com/wp-content/uploads/2019/07/the-benefits-of-elearning.jpg\" alt=\"Image 1\">\n        <img src=\"https://eviet.edu.vn/uploads/57(1)(1).jpg\" alt=\"Image 2\">\n        <img src=\"https://a.storyblok.com/f/262429/1080x1920/35b3fb1bb0/blogpost-e-learnings.jpg\" alt=\"Image 3\">\n        <img src=\"https://www.simplilearn.com/ice9/free_resources_article_thumb/Why_E-Learning_Insights_into_the_World_of_Online_Learning_and_Development.jpg\" alt=\"Image 4\">\n        <img src=\"https://elearningindustry.com/wp-content/uploads/2019/07/the-benefits-of-elearning.jpg\" alt=\"Image 5\">\n        <img src=\"https://elearningindustry.com/wp-content/uploads/2019/07/the-benefits-of-elearning.jpg\" alt=\"Image 6\">\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What is a flex container in CSS Flexbox?",
                "options": [
                  "A child element within a layout that can be aligned and positioned.",
                  "A parent element that enables the layout of its child elements using the Flexbox model.",
                  "A specific type of CSS property that deals with flexible layouts.",
                  "A predefined layout style in CSS."
                ],
                "correctAnswer": "A parent element that enables the layout of its child elements using the Flexbox model.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which value of the flex-direction property arranges flex items horizontally from right to left?",
                "options": [
                  "row",
                  "row-reverse",
                  "column",
                  "column-reverse"
                ],
                "correctAnswer": "row-reverse",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the default value of the flex-wrap property?",
                "options": [
                  "nowrap",
                  "wrap",
                  "wrap-reverse",
                  "wrap-start"
                ],
                "correctAnswer": "nowrap",
                "points": 2,
                "locked": true
              },
              {
                "question": "If you want flex items to wrap onto multiple lines from bottom to top, which flex-wrap value should you use?",
                "options": [
                  "nowrap",
                  "wrap",
                  "wrap-reverse",
                  "no-wrap-reverse"
                ],
                "correctAnswer": "wrap-reverse",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property determines the order of flex items within a flex container?",
                "options": [
                  "order",
                  "flex-order",
                  "order-index",
                  "item-order"
                ],
                "correctAnswer": "order",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does a value of 2 for the flex-grow property indicate about a flex item?",
                "options": [
                  "The item will grow twice as fast as items with a flex-grow value of 1.",
                  "The item will not grow at all.",
                  "The item will grow to double its initial size.",
                  "The item will be the first to grow in the container."
                ],
                "correctAnswer": "The item will grow twice as fast as items with a flex-grow value of 1.",
                "points": 2,
                "locked": true
              },
              {
                "question": "If an item's flex-shrink property is set to 2, what does it mean?",
                "options": [
                  "The item will shrink twice as much as items with a flex-shrink value of 1 when space is limited.",
                  "The item will shrink to half its size.",
                  "The item will not shrink at all.",
                  "The item will shrink first before other items."
                ],
                "correctAnswer": "The item will shrink twice as much as items with a flex-shrink value of 1 when space is limited.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which align-self value stretches a flex item to fill the flex container's cross-axis?",
                "options": [
                  "flex-start",
                  "flex-end",
                  "center",
                  "stretch"
                ],
                "correctAnswer": "stretch",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is one use of Flexbox in responsive design?",
                "options": [
                  "By allowing you to create flexible column layouts that adjust based on screen size.",
                  "By animating elements on a page.",
                  "By creating fixed-width layouts for desktop screens.",
                  "By handling complex grid systems."
                ],
                "correctAnswer": "By allowing you to create flexible column layouts that adjust based on screen size.",
                "points": 2,
                "locked": true
              },
              {
                "question": "How can Flexbox be used to enhance the layout of images on a webpage?",
                "options": [
                  "By creating a responsive image gallery that adjusts to different screen sizes using Flexbox.",
                  "By creating overlapping image effects.",
                  "By forcing images to be displayed in a single column only.",
                  "By automatically resizing images to fit the container."
                ],
                "correctAnswer": "By creating a responsive image gallery that adjusts to different screen sizes using Flexbox.",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "CSS Flexbox - Easy",
                "description": "Create a responsive navigation bar using CSS Flexbox to evenly distribute navigation items and style them appropriately.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "Style the navigation bar and its items using CSS Flexbox:\n\n1. The `.nav-container` element should be a flex container, using `display: flex` and `justify-content: space-around` to evenly distribute its child elements (navigation items). The container should have 10px padding and a background color of #333.\n\n2. Each `.nav-item` should be styled with white text, no underline (text decoration), and 10px padding on the top and bottom and 20px padding on the left and right. The items should have a 1px solid border (#444), 5px border radius, and a background color of #555. The background color should transition to #777 when hovered over, with a smooth effect achieved using `transition: background-color 0.3s`.\n\nAll CSS styles should be written in an external CSS file.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Flexbox - Easy</title>\n</head>\n<body>\n    <header class=\"nav-container\">\n        <a href=\"#\" class=\"nav-item\">Home</a>\n        <a href=\"#\" class=\"nav-item\">About</a>\n        <a href=\"#\" class=\"nav-item\">Services</a>\n        <a href=\"#\" class=\"nav-item\">Contact</a>\n    </header>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Flexbox - Easy</title></head><body><header class=\"nav-container\"><a href=\"#\" class=\"nav-item\">Home</a><a href=\"#\" class=\"nav-item\">About</a><a href=\"#\" class=\"nav-item\">Services</a><a href=\"#\" class=\"nav-item\">Contact</a></header></body></html>",
                    "required": [
                      ".nav-container { display: flex; justify-content: space-around; padding: 10px; background-color: #333; }",
                      ".nav-item { color: white; text-decoration: none; padding: 10px 20px; border: 1px solid #444; border-radius: 5px; background-color: #555; transition: background-color 0.3s; }",
                      ".nav-item:hover { background-color: #777; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Flexbox - Medium",
                "description": "Create a responsive card layout using CSS Flexbox. The cards should wrap onto the next line if necessary and have a gap between them.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "Style the card container and its cards using CSS Flexbox:\n\n1. The `.card-container` element should use `display: flex` and `flex-wrap: wrap` to allow the cards to wrap onto the next line. The gap between cards should be 15px, and the container should have 20px padding with a background color of #f4f4f4.\n\n2. Each `.card` should be styled to have a flexible width that adjusts based on the available space, using `flex: 1 1 calc(33% - 30px)` to account for the gap. The minimum width of each card should be 200px, and each card should have a height of 150px. The cards should be centered within themselves using `display: flex`, `align-items: center`, and `justify-content: center`. Each card should have a white background color (`background-color: #fff`), a 2px solid border with color #ddd, an 8px border radius, and a box-shadow (`box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1)`) for a subtle 3D effect. The text within the cards should be centered.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Flexbox - Medium</title>\n</head>\n<body>\n    <div class=\"card-container\">\n        <div class=\"card\">Card 1</div>\n        <div class=\"card\">Card 2</div>\n        <div class=\"card\">Card 3</div>\n        <div class=\"card\">Card 4</div>\n        <div class=\"card\">Card 5</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Flexbox - Medium</title></head><body><div class=\"card-container\"><div class=\"card\">Card 1</div><div class=\"card\">Card 2</div><div class=\"card\">Card 3</div><div class=\"card\">Card 4</div><div class=\"card\">Card 5</div></div></body></html>",
                    "required": [
                      ".card-container { display: flex; flex-wrap: wrap; gap: 15px; padding: 20px; background-color: #f4f4f4; }",
                      ".card { flex: 1 1 calc(33% - 30px); min-width: 200px; height: 150px; display: flex; align-items: center; justify-content: center; background-color: #fff; border: 2px solid #ddd; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); text-align: center; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Flexbox - Hard",
                "description": "Create a responsive dashboard layout using CSS Flexbox. The layout should include a header, a sidebar, a main content area with flex items, and a footer. Ensure the layout adjusts for different screen sizes.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Style the dashboard layout using CSS Flexbox:\n\n1. The `.dashboard-container` element should use `display: flex` with `flex-direction: column` to stack the header, content, and footer vertically. The container should have a minimum height of 100vh to cover the full viewport height.\n\n2. The `.header` should have a blue background (`background-color: #007bff`), white text, and padding of 20px. It should be centered and full-width.\n\n3. The `.sidebar` should have a dark background (`background-color: #343a40`), white text, and padding of 20px. It should have a fixed width of 250px and should not shrink with `flex-shrink: 0`.\n\n4. The `.content` area should be flexible with `flex: 1` to allow it to grow and take up remaining space in the layout. It should display its items in a flex container with `display: flex` and wrap with `flex-wrap: wrap`. It should have a gap of 15px between items, padding of 20px, and a light background color (`background-color: #f8f9fa`). Ensure that the `.content` area adjusts to fill the available space in the `.dashboard-container` using `flex: 1`.\n\n5. Each `.flex-item` in the `.content` should have a white background (`background-color: #ffffff`), a 1px solid border (`border: 1px solid #dee2e6`), and a border-radius of 8px. It should include a subtle box-shadow (`box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1)`). The item should be flexible with a width of `calc(33% - 30px)` to account for gaps, padding of 20px, and text centered. Ensure that each item has a minimum width of 200px to prevent shrinking too small.\n\n6. Responsive Design:\n   - For screens wider than 768px, the `.dashboard-container` should use `flex-direction: row` to arrange the sidebar and content side by side. The sidebar should have a height of `calc(100vh - 60px)` to fit the viewport height minus the header height. The `.content` should maintain a `flex: 1` property.\n   - For screens 767px wide or smaller, stack `.flex-item` elements vertically with `flex: 1 1 100%`.\n\n7.General Styles:\n   - The `body` should have a margin of 0, use the Arial font-family, and have a background color of `#e9ecef`.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Flexbox - Hard</title>\n</head>\n<body>\n    <div class=\"dashboard-container\">\n        <header class=\"header\">Header</header>\n        <aside class=\"sidebar\">Sidebar</aside>\n        <main class=\"content\">\n            <div class=\"flex-item\">Item 1</div>\n            <div class=\"flex-item\">Item 2</div>\n            <div class=\"flex-item\">Item 3</div>\n            <div class=\"flex-item\">Item 4</div>\n            <div class=\"flex-item\">Item 5</div>\n        </main>\n        <footer class=\"footer\">Footer</footer>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Flexbox - Hard</title></head><body><div class=\"dashboard-container\"><header class=\"header\">Header</header><aside class=\"sidebar\">Sidebar</aside><main class=\"content\"><div class=\"flex-item\">Item 1</div><div class=\"flex-item\">Item 2</div><div class=\"flex-item\">Item 3</div><div class=\"flex-item\">Item 4</div><div class=\"flex-item\">Item 5</div></main><footer class=\"footer\">Footer</footer></div></body></html>",
                    "required": [
                      "body { margin: 0; font-family: Arial, sans-serif; background-color: #e9ecef; }",
                      ".dashboard-container { display: flex; flex-direction: column; min-height: 100vh; }",
                      ".header { background-color: #007bff; color: white; padding: 20px; text-align: center; }",
                      ".sidebar { background-color: #343a40; color: white; padding: 20px; width: 250px; flex-shrink: 0; }",
                      ".content { flex: 1; display: flex; flex-wrap: wrap; gap: 15px; padding: 20px; background-color: #f8f9fa; }",
                      ".flex-item { background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); flex: 1 1 calc(33% - 30px); padding: 20px; text-align: center; min-width: 200px; }",
                      "@media (min-width: 768px) { .dashboard-container { flex-direction: row; } .sidebar { height: calc(100vh - 60px); } .content { flex: 1; } }",
                      "@media (max-width: 767px) { .flex-item { flex: 1 1 100%; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 12: CSS Grid ",
            "documents": [
              {
                "title": "CSS Grid Layout Introduction",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Grid Layout</strong> is a powerful layout system that enables developers to create complex and responsive designs using rows and columns."
                  },
                  {
                    "type": "sentence",
                    "text": "Unlike traditional layout methods like floats or tables, CSS Grid provides a more intuitive way to control both the horizontal and vertical placement of elements on the page."
                  },
                  {
                    "type": "sentence",
                    "text": "With CSS Grid, you can easily create grids with a dynamic number of rows and columns, adjust their sizes, and place items precisely where you want them."
                  },
                  {
                    "type": "sentence",
                    "text": "This makes it possible to design layouts that adapt seamlessly to different screen sizes and resolutions."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Concepts of CSS Grid</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Grid Container:</strong> The parent element that contains the grid items. You define a grid container by setting the display property to grid."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Grid Lines:</strong> The lines that form the boundaries of the rows and columns in the grid. They are used to position grid items."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Grid Cells:</strong> The individual units formed by the intersection of grid rows and columns. Each cell can contain one grid item."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Grid Areas:</strong> A rectangular space bounded by four grid lines. A grid area can cover multiple grid cells."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Grid Gap:</strong> The space between grid rows and columns. It can be used to create gaps between grid items."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* styles.css */\n.grid-container {\n    display: grid;\n    grid-template-columns: 1fr 2fr; /* Two columns with different widths */\n    grid-template-rows: auto 1fr auto; /* Header and footer heights are automatic, main content takes remaining space */\n    grid-template-areas: \n        \"header header\"\n        \"aside main\"\n        \"footer footer\"; /* Layout areas */\n    gap: 10px; /* Space between grid items */\n}\n\n.header {\n    grid-area: header;\n    background-color: #4CAF50; /* Green background */\n    color: white; /* White text color */\n    padding: 20px; /* Padding inside header */\n    text-align: center; /* Centered text */\n}\n\n.main {\n    grid-area: main;\n    background-color: #2196F3; /* Blue background */\n    color: white; /* White text color */\n    padding: 20px; /* Padding inside main content */\n}\n\n.aside {\n    grid-area: aside;\n    background-color: #FFC107; /* Yellow background */\n    color: black; /* Black text color */\n    padding: 20px; /* Padding inside aside */\n}\n\n.footer {\n    grid-area: footer;\n    background-color: #f44336; /* Red background */\n    color: white; /* White text color */\n    padding: 20px; /* Padding inside footer */\n    text-align: center; /* Centered text */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid Layout Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"grid-container\">\n        <header class=\"grid-item header\">Header</header>\n        <main class=\"grid-item main\">Main Content</main>\n        <aside class=\"grid-item aside\">Aside</aside>\n        <footer class=\"grid-item footer\">Footer</footer>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "Grid Container",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>A Grid Container</strong> is an HTML element that organizes its child elements (grid items) into rows and columns. By setting an element to <strong>display: grid</strong>, you turn it into a grid container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Setting Up Your Grid Container</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Basic Setup:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• display: grid:</strong> Converts the element into a grid container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Defining Columns and Rows:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-template-columns:</strong> Specifies the width of columns."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-template-rows:</strong> Specifies the height of rows."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-template-areas:</strong> Defines named areas in the grid."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".grid-container {\n  display: grid;\n  grid-template-columns: 200px 1fr; /* Fixed width sidebar, flexible main */\n  grid-template-rows: auto 1fr auto; /* Dynamic header and footer heights */\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n  gap: 10px; /* Gap between grid items */\n}\n\n.header { grid-area: header; background-color: #f8b400; }\n.sidebar { grid-area: sidebar; background-color: #f85f73; }\n.main { grid-area: main; background-color: #6a8d92; }\n.footer { grid-area: footer; background-color: #f85f73; }",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Grid Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"grid-container\">\n    <div class=\"header\">Header</div>\n    <div class=\"sidebar\">Sidebar</div>\n    <div class=\"main\">Main</div>\n    <div class=\"footer\">Footer</div>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• Columns: 200px 1fr defines a fixed-width sidebar and a flexible-width main content area."
                  },
                  {
                    "type": "sentence",
                    "text": "• Rows: auto 1fr auto specifies that the header and footer heights are dynamic, while the main content expands to fill the remaining space."
                  },
                  {
                    "type": "sentence",
                    "text": "• Areas: Named areas provide descriptive management of the layout."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Adjusting Spacing</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Gaps:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-gap:</strong> Defines the spacing between rows and columns."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".grid-container {\n  display: grid;\n  grid-template-columns: 1fr 1fr; /* Two equal-width columns */\n  grid-template-rows: auto; /* Automatic height based on content */\n  grid-gap: 20px; /* Gap between grid items */\n}\n\n.item1 { background-color: #f8b400; }\n.item2 { background-color: #f85f73; }\n.item3 { background-color: #6a8d92; }",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Grid Item Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"grid-container\">\n    <div class=\"item1\">Item 1</div>\n    <div class=\"item2\">Item 2</div>\n    <div class=\"item3\">Item 3</div>\n  </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Aligning Grid Items</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Alignment Properties:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• justify-items:</strong> Aligns grid items horizontally within their grid cells."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• align-items:</strong> Aligns grid items vertically within their grid cells."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• justify-content:</strong> Aligns the entire grid along the horizontal axis."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• align-content:</strong> Aligns the entire grid along the vertical axis."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".grid-item {\n    background-color: #8ebf42;\n    border: 1px solid #333; /* Border for items */\n    text-align: center;\n    font-size: 20px;\n    padding: 20px; /* Increased padding */\n    transition: background-color 0.2s;\n}\n\n.grid-item:hover {\n    background-color: #7cae39; /* Darker green on hover */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Grid Alignment Example</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"grid-item\">Item 1</div>\n    <div class=\"grid-item\">Item 2</div>\n    <div class=\"grid-item\">Item 3</div>\n    <div class=\"grid-item\">Item 4</div>\n    <div class=\"grid-item\">Item 5</div>\n    <div class=\"grid-item\">Item 6</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Automatic Tracks and Shorthand Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Automatic Tracks:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-auto-columns:</strong> Defines the size of automatically generated columns."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-auto-rows: </strong> Defines the size of automatically generated rows."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Shorthand Property:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid:</strong>  Combines grid-template-rows, grid-template-columns, and grid-template-areas into one property."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "body {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n.grid-container {\n    display: grid;\n    grid-template-columns: repeat(3, 200px); /* Set column width */\n    grid-template-rows: auto repeat(2, 100px); /* First row auto height for headers */\n    justify-items: stretch; /* Stretch items to fill their cells */\n    align-items: center;   /* Align items vertically */\n    grid-gap: 0; /* No gap for a table-like appearance */\n    padding: 20px;\n    border: 2px solid #333;\n    border-radius: 8px;\n    background-color: #fff;\n}\n\n.grid-header {\n    background-color: #4CAF50; /* Header color */\n    color: white;\n    text-align: center;\n    font-size: 24px;\n    padding: 15px 0; /* Padding for header */\n    border-bottom: 2px solid #333; /* Bottom border */\n}\n\n.grid-item {\n    background-color: #8ebf42;\n    border: 1px solid #333; /* Border for items */\n    text-align: center;\n    font-size: 20px;\n    padding: 20px; /* Increased padding */\n    transition: background-color 0.2s;\n}\n\n.grid-item:hover {\n    background-color: #7cae39; /* Darker green on hover */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Grid Automatic Tracks Example</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"grid-container\">\n        <div class=\"grid-header\">Header 1</div>\n        <div class=\"grid-header\">Header 2</div>\n        <div class=\"grid-header\">Header 3</div>\n        <div class=\"grid-item\">1</div>\n        <div class=\"grid-item\">2</div>\n        <div class=\"grid-item\">3</div>\n        <div class=\"grid-item\">4</div>\n        <div class=\"grid-item\">5</div>\n        <div class=\"grid-item\">6</div>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "Grid ConatinerLines",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Grid </strong>: uses horizontal and vertical lines to create a grid. These lines are referred to by their line numbers."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Placing Grid Items with Line Numbers</strong>: Grid items can be positioned using grid line numbers with the following properties:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-column-start</strong>: Defines the starting column line number."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-column-end</strong>: Defines the ending column line number."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-row-start</strong>: Defines the starting row line number."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-row-end</strong>: Defines the ending row line number."
                  },
                  {
                    "type": "sentence",
                    "text": "Values: line-number refers to a numbered grid line, and span <number> allows the grid item to span across the specified number of grid tracks."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n    display: grid;\n    grid-template: 100px 100px 50px / 100px 150px 100px;\n    width: 550px;\n    border: 2px solid black;\n    background-color: lightgrey;\n    padding: 12px;\n}\n\ndiv.item {\n    border: 1px solid black;\n    background-color: lightcoral;\n    text-align: center;\n    padding: 5px;\n    font-weight: bold;\n}\n\ndiv.item-1 {\n    grid-row-start: 1;\n    grid-row-end: 3;\n    background-color: lightblue;\n}\n\ndiv.item-2 {\n    grid-column-start: 2;\n    grid-column-end: 4;\n    background-color: lightgreen;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid - Placing Grid Items</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"item item-1\">Item 1</div>\n        <div class=\"item item-2\">Item 2</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Shorthand Properties</strong>:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• grid-row:</strong> combines grid-row-start and grid-row-end."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>•grid-column:</strong> Combines grid-column-start and grid-column-end."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n    display: grid;\n    grid-template: 100px 100px 100px / 100px 150px 100px;\n    width: 550px;\n    border: 2px solid black;\n    background-color: lightgrey;\n    padding: 12px;\n}\n\ndiv.item {\n    border: 1px solid black;\n    background-color: lightcoral;\n    text-align: center;\n    padding: 5px;\n    font-weight: bold;\n}\n\ndiv.item-1 {\n    grid-row: 1 / 3; /* Spans from row 1 to row 3 */\n    grid-column: 1 / 3; /* Spans from column 1 to column 3 */\n    background-color: lightblue;\n}\n\ndiv.item-2 {\n    grid-row: 2 / 4; /* Spans from row 2 to row 4 */\n    grid-column: 2 / 4; /* Spans from column 2 to column 4 */\n    background-color: lightgreen;\n}\n\ndiv.item-3 {\n    grid-row: 1 / 2; /* Spans from row 1 to row 2 */\n    grid-column: 2 / 4; /* Spans from column 2 to column 4 */\n    background-color: lightyellow;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid - Shorthand Properties</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"item item-1\">Item 1</div>\n        <div class=\"item item-2\">Item 2</div>\n        <div class=\"item item-3\">Item 3</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Spanning Rows and Columns</strong>: The span keyword extends a grid item across a specified number of rows or columns."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n    display: grid;\n    grid-template: 100px 100px 50px / 100px 150px 100px;\n    width: 550px;\n    border: 2px solid black;\n    background-color: lightgrey;\n    padding: 12px;\n}\n\ndiv.item {\n    border: 1px solid black;\n    background-color: lightcoral;\n    text-align: center;\n    padding: 5px;\n    font-weight: bold;\n}\n\ndiv.item-1 {\n    grid-column: 1 / span 3;\n    background-color: lightblue;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid - Spanning Rows and Columns</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"item item-1\">Item 1</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>grid-area Property</strong>: The grid-area property specifies both row and column positions in a single declaration."
                  },
                  {
                    "type": "sentence",
                    "text": "Syntax: grid-area: row-start / column-start / row-end / column-end | item-name;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n    display: grid;\n    grid-template: 100px 100px 100px 100px / 100px 150px 100px 150px;\n    width: 650px;\n    border: 2px solid black;\n    background-color: lightgrey;\n    padding: 12px;\n}\n\ndiv.item {\n    border: 1px solid black;\n    text-align: center;\n    padding: 5px;\n    font-weight: bold;\n}\n\ndiv.item-1 {\n    grid-area: 1 / 1 / 3 / 3; /* from row 1 to row 3, column 1 to column 3 */\n    background-color: lightblue;\n}\n\ndiv.item-2 {\n    grid-area: 2 / 2 / 4 / 4; /* from row 2 to row 4, column 2 to column 4 */\n    background-color: lightgreen;\n}\n\ndiv.item-3 {\n    grid-area: 1 / 3 / 2 / 5; /* from row 1 to row 2, column 3 to column 5 */\n    background-color: lightcoral;\n}\n\ndiv.item-4 {\n    grid-area: 3 / 1 / 4 / 3; /* from row 3 to row 4, column 1 to column 3 */\n    background-color: lightyellow;\n}\n\ndiv.item-5 {\n    grid-area: 3 / 3 / 5 / 5; /* from row 3 to row 5, column 3 to column 5 */\n    background-color: lightpink;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid - grid-area Property</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"item item-1\">Item 1</div>\n        <div class=\"item item-2\">Item 2</div>\n        <div class=\"item item-3\">Item 3</div>\n        <div class=\"item item-4\">Item 4</div>\n        <div class=\"item item-5\">Item 5</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Alignment Properties</strong>: Grid items can be aligned using the following properties:"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• justify-self: </strong>: Controls horizontal alignment within a grid cell."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• align-self:</strong>: Controls vertical alignment within a grid cell."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• place-self:</strong>:  A shorthand for justify-self and align-self."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "div.container {\n    display: grid;\n    grid-template: 100px 100px / 100px 150px 100px;\n    width: 550px;\n    border: 2px solid black;\n    background-color: lightgrey;\n    padding: 12px;\n}\n\ndiv.item {\n    border: 1px solid black;\n    text-align: center;\n    padding: 10px;\n    font-weight: bold;\n}\n\n/* Alignment Properties Examples */\n\n/* Horizontal alignment using justify-self */\ndiv.item-1 {\n    grid-area: 1 / 1 / 2 / 2;\n    background-color: lightblue;\n    justify-self: start; /* Aligns item to the start (left) of its grid cell */\n}\n\ndiv.item-2 {\n    grid-area: 1 / 2 / 2 / 3;\n    background-color: lightgreen;\n    justify-self: center; /* Centers item horizontally within its grid cell */\n}\n\ndiv.item-3 {\n    grid-area: 2 / 1 / 3 / 2;\n    background-color: lightcoral;\n    justify-self: end; /* Aligns item to the end (right) of its grid cell */\n}\n\ndiv.item-4 {\n    grid-area: 2 / 2 / 3 / 3;\n    background-color: lightyellow;\n    justify-self: stretch; /* Stretches item to fill the grid cell horizontally */\n}\n\n/* Vertical alignment using align-self */\ndiv.item-5 {\n    grid-area: 1 / 3 / 2 / 4;\n    background-color: lightpink;\n    align-self: start; /* Aligns item to the start (top) of its grid cell */\n}\n\ndiv.item-6 {\n    grid-area: 2 / 3 / 3 / 4;\n    background-color: lightblue;\n    align-self: center; /* Centers item vertically within its grid cell */\n}\n\ndiv.item-7 {\n    grid-area: 1 / 1 / 2 / 2;\n    background-color: lightgreen;\n    align-self: end; /* Aligns item to the end (bottom) of its grid cell */\n}\n\ndiv.item-8 {\n    grid-area: 2 / 2 / 3 / 3;\n    background-color: lightcoral;\n    align-self: stretch; /* Stretches item to fill the grid cell vertically */\n}\n\n/* Combined alignment using place-self */\ndiv.item-9 {\n    grid-area: 1 / 1 / 2 / 2;\n    background-color: lightyellow;\n    place-self: start end; /* Aligns item to the start horizontally and end vertically */\n}\n\ndiv.item-10 {\n    grid-area: 1 / 2 / 2 / 3;\n    background-color: lightpink;\n    place-self: center center; /* Centers item both horizontally and vertically */\n}\n\ndiv.item-11 {\n    grid-area: 2 / 1 / 3 / 2;\n    background-color: lightblue;\n    place-self: end stretch; /* Aligns item to the end horizontally and stretches vertically */\n}\n\ndiv.item-12 {\n    grid-area: 2 / 2 / 3 / 3;\n    background-color: lightgreen;\n    place-self: stretch start; /* Stretches item horizontally and aligns to the start vertically */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Grid - Alignment Properties Example</title>\n    <link rel=\"stylesheet\" href=\"alignment-properties.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"item item-1\">Item 1</div>\n        <div class=\"item item-2\">Item 2</div>\n        <div class=\"item item-3\">Item 3</div>\n        <div class=\"item item-4\">Item 4</div>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "Responsive Image Gallery Using CSS Grid",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Responsive Image Gallery Using CSS Grid</strong> allows you to create responsive and dynamic layouts that adapt to various screen sizes and devices."
                  },
                  {
                    "type": "sentence",
                    "text": "By using flexible rows and columns, CSS Grid enables the creation of layouts that can easily change based on the viewing context."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example: Responsive Image Gallery</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".gallery {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr); /* Two-column layout */\n    gap: 6px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    background-color: #f9f9f9;\n}\n\n.gallery img {\n    width: 100%;\n    height: auto; /* Maintain aspect ratio */\n    object-fit: cover;\n    display: block;\n}\n\nimg.four-grid-cells {\n    grid-column: span 2;\n}\n\nimg.wide-image {\n    grid-column: span 2;\n}\n\n@media screen and (max-width: 768px) {\n    .gallery {\n        grid-template-columns: 1fr; /* Single column layout for small screens */\n    }\n    img.four-grid-cells, img.wide-image {\n        grid-column: auto;\n    }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Image Gallery</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div class=\"gallery\">\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Unofficial_JavaScript_logo_2.svg/1200px-Unofficial_JavaScript_logo_2.svg.png\" alt=\"JavaScript\" class=\"wide-image\">\n        <img src=\"https://media.licdn.com/dms/image/D5612AQHTGcgR9_RlDg/article-cover_image-shrink_600_2000/0/1705826273539?e=2147483647&v=beta&t=hZkuaC9fOago3ij77UdR45nXktn2C_R9nIwYiEGxVpU\" alt=\"Python\">\n        <img src=\"https://contentstatic.techgig.com/photo/90078629.cms\" alt=\"Java\">\n        <img src=\"https://training.digigrowhub.in/wp-content/uploads/2021/02/do-coding-of-any-program-by-c-plus-plus-perfectly-and-within-time.jpg\" alt=\"C++\" class=\"four-grid-cells\">\n        <img src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190902124355/ruby-programming-language.png\" alt=\"Ruby\">\n        <img src=\"https://impreza.host/wp-content/uploads/2020/02/PHP2.jpg\" alt=\"PHP\">\n        <img src=\"https://bs-uploads.toptal.io/blackfish-uploads/components/blog_post_page/4087150/cover_image/retina_1708x683/cover-0828_AfterAllTheseYearstheWorldisStillPoweredbyCProgramming_Razvan_Newsletter-e85854c3f0bb99704e83139475284901.png\" alt=\"C#\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>.gallery</strong> class sets up a grid layout with two columns for the images."
                  },
                  {
                    "type": "sentence",
                    "text": "Image styles ensure that they maintain their aspect ratio while covering their grid area."
                  },
                  {
                    "type": "sentence",
                    "text": "Media queries adjust the layout to a single column for smaller screens."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What is a Grid Container in CSS Grid Layout?",
                "options": [
                  "The parent element that contains the grid items.",
                  "A boundary line that defines the grid's rows and columns.",
                  "An individual unit formed by the intersection of rows and columns.",
                  "A rectangular space bounded by four grid lines."
                ],
                "correctAnswer": "The parent element that contains the grid items.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What are Grid Lines in CSS Grid Layout?",
                "options": [
                  "The lines that form the boundaries of the rows and columns in the grid.",
                  "The spaces between grid items.",
                  "The individual units formed by the intersection of rows and columns.",
                  "The rectangular spaces that can cover multiple grid cells."
                ],
                "correctAnswer": "The lines that form the boundaries of the rows and columns in the grid.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What defines a Grid Cell in CSS Grid Layout?",
                "options": [
                  "The individual units formed by the intersection of grid rows and columns.",
                  "The spaces between grid rows and columns.",
                  "The parent element that contains the grid items.",
                  "A rectangular space bounded by four grid lines."
                ],
                "correctAnswer": "The individual units formed by the intersection of grid rows and columns.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is a Grid Area in CSS Grid Layout?",
                "options": [
                  "A rectangular space bounded by four grid lines.",
                  "The space between grid rows and columns.",
                  "The lines that form the boundaries of the rows and columns in the grid.",
                  "The parent element that contains the grid items."
                ],
                "correctAnswer": "A rectangular space bounded by four grid lines.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is Grid Gap in CSS Grid Layout?",
                "options": [
                  "The space between grid rows and columns.",
                  "The lines that form the boundaries of the rows and columns in the grid.",
                  "The individual units formed by the intersection of rows and columns.",
                  "A rectangular space bounded by four grid lines."
                ],
                "correctAnswer": "The space between grid rows and columns.",
                "points": 2,
                "locked": true
              },
              {
                "question": "How does CSS Grid Layout improve design flexibility compared to traditional layout methods?",
                "options": [
                  "By allowing precise control over both horizontal and vertical placement of elements using rows and columns.",
                  "By using floats to position elements in a linear flow.",
                  "By creating fixed-width layouts for each element.",
                  "By using absolute positioning for layout control."
                ],
                "correctAnswer": "By allowing precise control over both horizontal and vertical placement of elements using rows and columns.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the display: grid; property do in CSS Grid Layout?",
                "options": [
                  "Converts the element into a grid container.",
                  "Specifies the width of columns.",
                  "Specifies the height of rows.",
                  "Defines named areas in the grid."
                ],
                "correctAnswer": "Converts the element into a grid container.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property specifies the width of columns in a grid container?",
                "options": [
                  "grid-template-columns",
                  "grid-template-rows",
                  "grid-template-areas",
                  "display: grid"
                ],
                "correctAnswer": "grid-template-columns",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "CSS Grid - Easy",
                "description": "Create a grid layout using CSS Grid. The layout should contain a grid container with six grid items. Each grid item should have a consistent style, and the grid container should be styled with borders and padding.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "In the given HTML, provide CSS to style the grid layout with the following specifications:\n\n1. The `.grid-container` should use `display: grid` and define three equal columns with `grid-template-columns: repeat(3, 1fr)`. Ensure there is a gap of 10px between the grid items using `gap: 10px`. Apply padding of 10px to the grid container. Set the background color of the grid container to white (`background-color: #fff`) and add a 2px solid border with color `#ddd`.\n\n2. Each `.grid-item` should have a background color of green (`background-color: #4caf50`), white text, padding of 20px, and center-aligned text. Add a 1px solid border with color `#333` to each grid item.\n\n3. Ensure the grid container and grid items are visually distinct and appropriately spaced according to the given CSS properties.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Grid - Easy</title>\n</head>\n<body>\n    <div class=\"grid-container\">\n        <div class=\"grid-item\">1</div>\n        <div class=\"grid-item\">2</div>\n        <div class=\"grid-item\">3</div>\n        <div class=\"grid-item\">4</div>\n        <div class=\"grid-item\">5</div>\n        <div class=\"grid-item\">6</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Grid - Easy</title></head><body><div class=\"grid-container\"><div class=\"grid-item\">1</div><div class=\"grid-item\">2</div><div class=\"grid-item\">3</div><div class=\"grid-item\">4</div><div class=\"grid-item\">5</div><div class=\"grid-item\">6</div></div></body></html>",
                    "required": [
                      ".grid-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; padding: 10px; background-color: #fff; border: 2px solid #ddd; }",
                      ".grid-item { background-color: #4caf50; color: white; padding: 20px; text-align: center; border: 1px solid #333; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Grid - Medium",
                "description": "Create a responsive layout using CSS Grid. The layout should include a header, navigation, main content area with a nested grid for content and sidebar, and a footer. The layout should adapt to different screen sizes.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "In the given HTML, provide CSS to style the grid layout with the following specifications:\n\n1. The `.layout-container` should use `display: grid` to define the grid layout. Configure the grid with two columns: `grid-template-columns: 1fr 3fr`, where the navigation takes up 1/4 of the width and the main content occupies 3/4. Set up three rows with `grid-template-rows: auto 1fr auto`, where the header and footer have automatic heights, and the main content area is flexible. Use `grid-template-areas` to arrange the layout as follows: the header spans across both columns, navigation occupies the left column, the main content spans the right column, and the footer spans both columns. Add a 10px gap between grid items, apply 10px padding to the container, set the background color to white (`background-color: #fff`), and add a 2px solid border with color `#ccc`.\n\n2. Style the `.header` to span the full width of the grid, with a background color of blue (`background-color: #007bff`), white text, and centered text alignment.\n\n3. Style the `.nav` to occupy the left column, with a dark background color (`background-color: #343a40`), white text, and padding of 20px.\n\n4. The `.main-content` should be a nested grid with two rows (`grid-template-rows: 1fr 2fr`). Add a 10px gap between the rows, set the background color to green (`background-color: #28a745`), with white text and padding of 20px.\n\n5. Inside the `.main-content`, style the `.content` section with a light blue background (`background-color: #17a2b8`) and padding of 20px.\n\n6. Style the `.sidebar` with a yellow background (`background-color: #ffc107`) and padding of 20px.\n\n7. The `.footer` should span the full width of the grid, with a red background color (`background-color: #dc3545`), white text, centered text alignment, and padding of 20px.\n\n8. For screens with a maximum width of 768px, adjust the layout to a single column using `grid-template-columns: 1fr` and rearrange the grid areas so that the header, main content, navigation, and footer stack vertically.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Grid - Medium</title>\n</head>\n<body>\n    <div class=\"layout-container\">\n        <header class=\"header\">Header</header>\n        <nav class=\"nav\">Navigation</nav>\n        <main class=\"main-content\">\n            <section class=\"content\">Content</section>\n            <aside class=\"sidebar\">Sidebar</aside>\n        </main>\n        <footer class=\"footer\">Footer</footer>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Grid - Medium</title></head><body><div class=\"layout-container\"><header class=\"header\">Header</header><nav class=\"nav\">Navigation</nav><main class=\"main-content\"><section class=\"content\">Content</section><aside class=\"sidebar\">Sidebar</aside></main><footer class=\"footer\">Footer</footer></div></body></html>",
                    "required": [
                      ".layout-container { display: grid; grid-template-columns: 1fr 3fr; grid-template-rows: auto 1fr auto; grid-template-areas: 'header header' 'nav main-content' 'footer footer'; gap: 10px; padding: 10px; background-color: #fff; border: 2px solid #ccc; }",
                      ".header { grid-area: header; background-color: #007bff; color: white; padding: 20px; text-align: center; }",
                      ".nav { grid-area: nav; background-color: #343a40; color: white; padding: 20px; }",
                      ".main-content { grid-area: main-content; display: grid; grid-template-rows: 1fr 2fr; gap: 10px; background-color: #28a745; color: white; padding: 20px; }",
                      ".content { background-color: #17a2b8; padding: 20px; }",
                      ".sidebar { background-color: #ffc107; padding: 20px; }",
                      ".footer { grid-area: footer; background-color: #dc3545; color: white; padding: 20px; text-align: center; }",
                      "@media (max-width: 768px) { .layout-container { grid-template-columns: 1fr; grid-template-areas: 'header' 'main-content' 'nav' 'footer'; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "CSS Grid - Hard",
                "description": "Create a complex grid layout using CSS Grid. The layout should include a header, a sidebar, a main content area with nested content, an extra sidebar, and a footer. The layout should adapt to different screen sizes.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "In the given HTML, provide CSS to style the grid layout with the following specifications:\n\n1. The `.complex-grid` container should use `display: grid` to define the grid layout. Configure the grid with three columns (`grid-template-columns: 1fr 2fr 1fr`), where the sidebar and extra sidebar each take up 1/4 of the width, and the main content area takes up 1/2. Set up three rows (`grid-template-rows: auto 1fr auto`), where the header and footer have automatic heights, and the main content area is flexible. Use `grid-template-areas` to arrange the layout: the header spans across all columns, the sidebar occupies the left column, the main content spans the middle column, and the extra sidebar takes up the right column. The footer spans all columns. Add a 10px gap between grid items, apply 10px padding to the container, set the background color to white (`background-color: #fff`), and add a 2px solid border with color `#ddd`.\n\n2. Style the `.header` to span the full width of the grid, with a background color of blue (`background-color: #007bff`), white text, and centered text alignment.\n\n3. Style the `.sidebar` to occupy the left column, with a dark background color (`background-color: #343a40`), white text, and padding of 20px.\n\n4. The `.main-content` should be a nested grid with two rows (`grid-template-rows: 1fr 2fr`). Add a 10px gap between the rows, set the background color to green (`background-color: #28a745`), with white text and padding of 20px. Inside the `.main-content`, style the `.primary-content` with a light blue background (`background-color: #17a2b8`) and padding of 20px. Style the `.secondary-content` with a yellow background (`background-color: #ffc107`) and padding of 20px. Include a nested grid within `.main-content` for `.nested-grid` with three equal columns (`grid-template-columns: repeat(3, 1fr)`) and a 10px gap between the items.\n\n5. Style the `.nested-item` with a grey background (`background-color: #6c757d`), white text, padding of 10px, and center-aligned text.\n\n6. The `.extra-sidebar` should occupy the right column with a grey background color (`background-color: #6c757d`), white text, and padding of 20px.\n\n7. The `.footer` should span the full width of the grid, with a red background color (`background-color: #dc3545`), white text, centered text alignment, and padding of 20px.\n\n8. For screens with a maximum width of 768px, adjust the layout to a single column using `grid-template-columns: 1fr` and rearrange the grid areas so that the header, main content, sidebar, extra sidebar, and footer stack vertically.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>CSS Grid - Hard</title>\n</head>\n<body>\n    <div class=\"complex-grid\">\n        <header class=\"header\">Header</header>\n        <nav class=\"sidebar\">Sidebar</nav>\n        <main class=\"main-content\">\n            <section class=\"primary-content\">Primary Content</section>\n            <section class=\"secondary-content\">Secondary Content</section>\n            <div class=\"nested-grid\">\n                <div class=\"nested-item\">Nested 1</div>\n                <div class=\"nested-item\">Nested 2</div>\n                <div class=\"nested-item\">Nested 3</div>\n            </div>\n        </main>\n        <aside class=\"extra-sidebar\">Extra Sidebar</aside>\n        <footer class=\"footer\">Footer</footer>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>CSS Grid - Hard</title></head><body><div class=\"complex-grid\"><header class=\"header\">Header</header><nav class=\"sidebar\">Sidebar</nav><main class=\"main-content\"><section class=\"primary-content\">Primary Content</section><section class=\"secondary-content\">Secondary Content</section><div class=\"nested-grid\"><div class=\"nested-item\">Nested 1</div><div class=\"nested-item\">Nested 2</div><div class=\"nested-item\">Nested 3</div></div></main><aside class=\"extra-sidebar\">Extra Sidebar</aside><footer class=\"footer\">Footer</footer></div></body></html>",
                    "required": [
                      ".complex-grid { display: grid; grid-template-columns: 1fr 2fr 1fr; grid-template-rows: auto 1fr auto; grid-template-areas: 'header header header' 'sidebar main-content extra-sidebar' 'footer footer footer'; gap: 10px; padding: 10px; background-color: #fff; border: 2px solid #ddd; }",
                      ".header { grid-area: header; background-color: #007bff; color: white; padding: 20px; text-align: center; }",
                      ".sidebar { grid-area: sidebar; background-color: #343a40; color: white; padding: 20px; }",
                      ".main-content { grid-area: main-content; display: grid; grid-template-rows: 1fr 2fr; gap: 10px; background-color: #28a745; color: white; padding: 20px; }",
                      ".primary-content { background-color: #17a2b8; padding: 20px; }",
                      ".secondary-content { background-color: #ffc107; padding: 20px; }",
                      ".nested-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }",
                      ".nested-item { background-color: #6c757d; color: white; padding: 10px; text-align: center; }",
                      ".extra-sidebar { grid-area: extra-sidebar; background-color: #6c757d; color: white; padding: 20px; }",
                      ".footer { grid-area: footer; background-color: #dc3545; color: white; padding: 20px; text-align: center; }",
                      "@media (max-width: 768px) { .complex-grid { grid-template-columns: 1fr; grid-template-areas: 'header' 'main-content' 'sidebar' 'extra-sidebar' 'footer'; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 13: Learn CSS Responsive",
            "documents": [
              {
                "title": "Responsive Web Design",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Responsive web design</strong> is a crucial aspect of modern web development."
                  },
                  {
                    "type": "sentence",
                    "text": "It ensures that websites are accessible and functional across a variety of devices and screen sizes, from large desktop monitors to small smartphones."
                  },
                  {
                    "type": "sentence",
                    "text": "This adaptability is achieved through a combination of flexible layouts, images, and CSS media queries, allowing the design to respond to the user's environment."
                  },
                  {
                    "type": "sentence",
                    "text": "The primary goal of responsive web design is to provide a consistent and optimized user experience regardless of the device being used."
                  },
                  {
                    "type": "sentence",
                    "text": "This approach is essential for reaching a broader audience and improving user satisfaction, as it allows the content to be accessible and easily navigable on any device."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Key Concepts in Responsive Web Design:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Fluid Grids:</strong> Layouts are created using relative units like percentages rather than fixed units like pixels. This ensures that the elements resize proportionally to the screen size."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Flexible Images:</strong> Images are scaled to fit within their containing elements, preventing them from exceeding the width of their container or the viewport."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Media Queries:</strong> Media queries allow the application of specific CSS rules based on the characteristics of the device, such as screen size, orientation, and resolution."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Media Queries</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Media queries</strong> are a powerful tool in CSS that enable responsive design by applying different styles depending on the device's properties."
                  },
                  {
                    "type": "sentence",
                    "text": "They are essential for creating layouts that adapt to various screen sizes and orientations."
                  },
                  {
                    "type": "sentence",
                    "text": "Here’s an example of a media query in CSS:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "@media (min-width: 768px) {\n  .container {\n    width: 50%;\n  }\n}"
                  },
                  {
                    "type": "sentence",
                    "text": "In this example, the styles inside the media query will only be applied if the viewport width is at least 768 pixels. This technique is often used to adjust layouts and design elements for tablets and larger screens."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Responsive Column Layout</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Column layouts</strong> are commonly used in web design to organize content in a structured way. By using flexible layouts and media queries, we can create column layouts that adapt to different screen sizes."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "main {\n  display: flex;\n  flex-wrap: wrap;\n  height: 100px;\n  text-align: center;\n}\n\n.column {\n  padding: 10px;\n}\n\n.column1 {\n  width: 20%;\n  background-color: blue;\n}\n\n.column2 {\n  width: 60%;\n  background-color: brown;\n}\n\n.column3 {\n  width: 20%;\n  background-color: gray;\n}\n\n@media screen and (max-width: 768px) {\n  .column1,\n  .column2 {\n    width: 50%;\n  }\n\n  .column3 {\n    width: 100%;\n  }\n}\n\n@media screen and (max-width: 480px) {\n  .column1,\n  .column2,\n  .column3 {\n    width: 100%;\n  }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>Responsive</title>\n</head>\n<body>\n<main>\n  <div class=\"column column1\">Column 1</div>\n  <div class=\"column column2\">Column 2</div>\n  <div class=\"column column3\">Column 3</div>\n</main>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "In the example above, the main element uses the flex property to create a three-column layout. The widths of the columns are set as percentages to ensure flexibility."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Three-Column Layout:</strong> Suitable for larger screens, where content can be divided into distinct sections."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Two-Column Layout:</strong> As the screen width decreases (e.g., on tablets), the layout changes to two columns, allowing more space for the content to be readable."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Single-Column Layout:</strong> For small screens like smartphones, the layout adjusts to a single column, making it easier to navigate and read."
                  }
                ],
                "locked": true
              },
              {
                "title": "Media Queries",
                "content": [
                  {
                    "type": "sentence",
                    "text": "A <strong>media query</strong> is a CSS technique used to apply specific styles only when certain conditions are met."
                  },
                  {
                    "type": "sentence",
                    "text": "These conditions, known as media features, include properties like screen width, height, orientation, and resolution."
                  },
                  {
                    "type": "sentence",
                    "text": "The basic syntax for a media query is:"
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "@media media-type and (media-feature-rule) {\n  /* CSS rules go here */\n}"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>@media</strong>: The keyword that starts a media query block."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>media-type</strong>: Specifies the type of device targeted by the styles (e.g., screen, print, all)."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>media-feature-rule</strong>: Defines the conditions under which the styles will be applied, such as min-width, max-width, or orientation."
                  },
                  {
                    "type": "sentence",
                    "text": "Navigation Menu Example Using Media Queries: Desktop and Laptop Layout"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n}\n\nheader {\n    background-color: #333;\n    padding: 10px 0;\n}\n\nnav ul {\n    list-style: none;\n    display: flex;\n    justify-content: center;\n}\n\nnav ul li {\n    margin: 0 15px;\n}\n\nnav ul li a {\n    color: white;\n    text-decoration: none;\n    padding: 10px 20px;\n    display: inline-block;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n}\n\nnav ul li a:hover {\n    background-color: #555;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"style.css\" />\n  <title>Responsive</title>\n</head>\n<main>\n  <header>\n  <nav>\n    <ul>\n      <li><a href=\"#home\">Home</a></li>\n      <li><a href=\"#services\">Services</a></li>\n      <li><a href=\"#portfolio\">Portfolio</a></li>\n      <li><a href=\"#contact\">Contact</a></li>\n    </ul>\n  </nav>\n</header>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Navigation Menu Example Using Media Queries:  Mobile Devices (Breakpoint at 600px)"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: Arial, sans-serif;\n}\n\nheader {\n    background-color: #333;\n    padding: 10px 0;\n}\n\nnav ul {\n    list-style: none;\n    display: flex;\n    justify-content: center;\n}\n\nnav ul li {\n    margin: 0 15px;\n}\n\nnav ul li a {\n    color: white;\n    text-decoration: none;\n    padding: 10px 20px;\n    display: inline-block;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n}\n\nnav ul li a:hover {\n    background-color: #555;\n}\n\n@media screen and (max-width: 600px) {\n    nav ul {\n        flex-direction: column;\n        align-items: center;\n    }\n\n    nav ul li {\n        margin: 10px 0;\n    }\n\n    nav ul li a {\n        width: 100%;\n        text-align: center;\n    }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"style.css\" />\n  <title>Responsive</title>\n</head>\n<main>\n  <header>\n  <nav>\n    <ul>\n      <li><a href=\"#home\">Home</a></li>\n      <li><a href=\"#services\">Services</a></li>\n      <li><a href=\"#portfolio\">Portfolio</a></li>\n      <li><a href=\"#contact\">Contact</a></li>\n    </ul>\n  </nav>\n</header>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Desktop and Laptop Layout:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• The navigation menu is displayed horizontally in the center of the header using flexbox (display: flex; and justify-content: center;)."
                  },
                  {
                    "type": "sentence",
                    "text": "• Each menu item is spaced evenly with margin: 0 15px;, and the links have padding for a better clickable area."
                  },
                  {
                    "type": "sentence",
                    "text": "• The hover effect changes the background color of the links for better visual feedback."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Mobile Layout:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "• When the screen width is 600px or less, the media query takes effect."
                  },
                  {
                    "type": "sentence",
                    "text": "• The navigation menu (nav ul) switches to a vertical layout using flex-direction: column; and align-items: center;."
                  },
                  {
                    "type": "sentence",
                    "text": "• The list items (nav ul li) are spaced out vertically with margin: 10px 0;."
                  },
                  {
                    "type": "sentence",
                    "text": "• The links (nav ul li a) expand to full width and are centered, making them easier to tap on smaller screens."
                  }
                ],
                "locked": true
              },
              {
                "title": "Mobile-First Design",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Mobile-first design</strong> involves starting the design and development process with the mobile experience as the primary focus."
                  },
                  {
                    "type": "sentence",
                    "text": "This means designing the layout, choosing the content, and implementing features with mobile users in mind."
                  },
                  {
                    "type": "sentence",
                    "text": "Once the mobile experience is optimized, the design is then scaled up for larger screens using techniques like media queries."
                  },
                  {
                    "type": "sentence",
                    "text": "In a mobile-first approach, the default styles are tailored for mobile devices."
                  },
                  {
                    "type": "sentence",
                    "text": "As screen size increases, additional styles are added using media queries to enhance the experience for larger screens."
                  },
                  {
                    "type": "sentence",
                    "text": "This approach ensures that the essential content and functionality are prioritized for mobile users."
                  },
                  {
                    "type": "sentence",
                    "text": "Advantages of Mobile-First Design:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Improved User Experience:</strong> By focusing on the mobile experience first, websites are optimized for touch interactions, faster load times, and simpler navigation, providing a better experience for mobile users."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Faster Page Loading:</strong> Mobile-first design often leads to leaner, more efficient code and content prioritization, resulting in faster page loading times, which benefit all users."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Enhanced SEO:</strong> Search engines prioritize mobile-friendly websites. A mobile-first approach can improve SEO rankings, making websites more discoverable and attractive to organic traffic."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Scalability:</strong> Starting with a mobile-first design makes it easier to scale up to larger screens. The design can be enhanced with additional features and content without compromising the core experience."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Accessibility: </strong>Mobile-first design encourages the use of accessible design principles, such as larger text and simpler navigation, which benefit all users, including those with disabilities."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Simplified Maintenance:</strong> A streamlined, mobile-first codebase is often easier to maintain and update, reducing complexity and technical debt over time."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Default styles for mobile devices */\nbody {\n    font-size: 16px;\n    padding: 10px;\n    line-height: 1.6;\n    background-color: #f4f4f4;\n    margin: 0;\n    font-family: Arial, sans-serif;\n}\n\nheader {\n    background-color: #333;\n    color: white;\n    padding: 10px;\n    text-align: center;\n}\n\nnav ul {\n    list-style: none;\n    padding: 0;\n}\n\nnav ul li {\n    margin: 5px 0;\n}\n\nnav ul li a {\n    color: white;\n    text-decoration: none;\n    background-color: #555;\n    padding: 10px;\n    border-radius: 5px;\n    display: block;\n    text-align: center;\n    transition: background-color 0.3s ease;\n}\n\nnav ul li a:hover {\n    background-color: #777;\n}\n\nmain {\n    margin-top: 20px;\n}\n\n.course-card {\n    background-color: white;\n    padding: 15px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\nfooter {\n    background-color: #333;\n    color: white;\n    text-align: center;\n    padding: 10px;\n    position: fixed;\n    width: 100%;\n    bottom: 0;\n}\n\n/* Media query for tablets and larger screens */\n@media (min-width: 768px) {\n    body {\n        font-size: 18px;\n        padding: 20px;\n    }\n\n    header {\n        padding: 20px;\n    }\n\n    nav ul {\n        display: flex;\n        justify-content: center;\n        flex-wrap: wrap;\n    }\n\n    nav ul li {\n        margin: 0 10px;\n    }\n\n    nav ul li a {\n        padding: 15px 25px;\n    }\n\n    main {\n        margin-top: 30px;\n    }\n}\n\n/* Media query for desktops */\n@media (min-width: 1024px) {\n    body {\n        font-size: 20px;\n        padding: 30px;\n        max-width: 1200px;\n        margin: 0 auto;\n    }\n\n    header {\n        padding: 30px;\n    }\n\n    nav ul {\n        justify-content: flex-start;\n    }\n\n    nav ul li {\n        margin: 0 15px;\n    }\n\n    nav ul li a {\n        padding: 20px 30px;\n    }\n\n    footer {\n        padding: 20px;\n    }\n\n    .course-card {\n        display: inline-block;\n        width: 30%;\n        margin: 1%;\n    }\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Course Page</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <header>\n        <h1>CodeCraft E-Learning</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#home\">Home</a></li>\n                <li><a href=\"#courses\">Courses</a></li>\n                <li><a href=\"#about\">About</a></li>\n                <li><a href=\"#contact\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n    <main>\n        <section id=\"home\">\n            <h2>Welcome to CodeCraft</h2>\n            <p>Explore our range of programming courses designed to enhance your skills.</p>\n        </section>\n        <section id=\"courses\">\n            <h2>Our Courses</h2>\n            <div class=\"course-card\">\n                <h3>Introduction to CSS</h3>\n                <p>Learn the basics of CSS and how to style your web pages.</p>\n            </div>\n            <div class=\"course-card\">\n                <h3>Advanced JavaScript</h3>\n                <p>Master JavaScript with advanced concepts and techniques.</p>\n            </div>\n            <div class=\"course-card\">\n                <h3>Responsive Design</h3>\n                <p>Understand how to create responsive layouts for all devices.</p>\n            </div>\n        </section>\n        <section id=\"about\">\n            <h2>About Us</h2>\n            <p>CodeCraft is committed to providing high-quality programming education.</p>\n        </section>\n        <section id=\"contact\">\n            <h2>Contact Us</h2>\n            <p>Get in touch with our support team for any queries or assistance.</p>\n        </section>\n    </main>\n    <footer>\n        <p>&copy; 2024 CodeCraft E-Learning Platform</p>\n    </footer>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>HTML Structure:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Header:</strong> Contains the title and navigation menu."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Main Content:</strong> Includes sections for welcome information, course listings, about us, and contact details."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Footer:</strong> Displays copyright information."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Styles:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Mobile Styles (Default):</strong> Designed for small screens with a vertical layout. Navigation links are stacked vertically, and course cards have a simple design."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Tablet Styles (min-width: 768px):</strong> The layout adapts for tablets. Navigation becomes horizontal, and course cards have increased padding and spacing."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• Desktop Styles (min-width: 1024px):</strong> Further enhancements for desktops. The body is centered with a maximum width, and course cards are displayed in a three-column layout."
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What is the primary goal of responsive web design?",
                "options": [
                  "To create complex animations",
                  "To provide a consistent and optimized user experience across devices",
                  "To limit website access to certain devices",
                  "To use only fixed layouts for all screen sizes"
                ],
                "correctAnswer": "To provide a consistent and optimized user experience across devices.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What are fluid grids in responsive web design?",
                "options": [
                  "Layouts that use fixed units like pixels",
                  "Layouts that use relative units like percentages for flexibility",
                  "Static images that do not resize",
                  "CSS rules applied based on device characteristics"
                ],
                "correctAnswer": "Layouts that use relative units like percentages for flexibility.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What role do flexible images play in responsive web design?",
                "options": [
                  "They remain a fixed size regardless of the container",
                  "They are scaled to fit within their containing elements",
                  "They are only used in desktop versions of websites",
                  "They prevent the use of fluid grids"
                ],
                "correctAnswer": "They are scaled to fit within their containing elements.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What are media queries used for in responsive web design?",
                "options": [
                  "To create static layouts",
                  "To apply CSS rules based on device characteristics like screen size and resolution",
                  "To standardize website design across all devices",
                  "To prevent images from being flexible"
                ],
                "correctAnswer": "To apply CSS rules based on device characteristics like screen size and resolution.",
                "points": 2,
                "locked": true
              },
              {
                "question": "What keyword starts a media query block?",
                "options": [
                  "@query",
                  "@media",
                  "@device",
                  "@screen"
                ],
                "correctAnswer": "@media",
                "points": 2,
                "locked": true
              },
              {
                "question": "What specifies the type of device targeted by the styles in a media query?",
                "options": [
                  "Device-type",
                  "Screen-type",
                  "Media-type",
                  "Query-type"
                ],
                "correctAnswer": "Media-type",
                "points": 2,
                "locked": true
              },
              {
                "question": "What defines the conditions under which styles will be applied in a media query?",
                "options": [
                  "Media-query",
                  "Media-feature-rule",
                  "Media-condition",
                  "Media-application"
                ],
                "correctAnswer": "Media-feature-rule",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does mobile-first design involve?",
                "options": [
                  "Designing and developing with the mobile experience as the primary focus and then scaling up for larger screens using techniques like media queries.",
                  "Starting with desktop designs and then adapting them for mobile devices.",
                  "Creating a separate mobile version of the website without considering the desktop experience.",
                  "Prioritizing desktop experience and then making minimal adjustments for mobile users."
                ],
                "correctAnswer": "Designing and developing with the mobile experience as the primary focus and then scaling up for larger screens using techniques like media queries.",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Responsive Layout - Easy",
                "description": "Create a simple responsive layout using HTML and CSS. The layout should include a header, a main content area, and a footer. Use media queries to ensure that the layout adapts to larger screens by centering the content area.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "In the given HTML, provide CSS to style a responsive layout with the following specifications:\n\n1. Header: The header should have a background color of blue (`#007bff`), white text, centered text alignment, and padding of 10px.\n\n2. Main Content: The `main` element should have padding of 15px.\n\n3. Content Section: Style the `.content` section with a white background (`#ffffff`), a 1px solid border in light gray (`#ddd`), 20px padding, and a border-radius of 5px.\n\n4. Footer: The footer should have a dark gray background (`#343a40`), white text, centered text alignment, and padding of 10px. It should be positioned fixed at the bottom of the page and span the full width of the viewport with `width: 100%`.\n\n5. Media Query: For screens that are 768px wide or larger, set the maximum width of the `.content` section to 750px and center it within the viewport by applying `margin: 0 auto`.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Responsive Layout - Easy</title>\n</head>\n<body>\n    <header>\n        <h1>My Responsive Page</h1>\n    </header>\n    <main>\n        <section class=\"content\">\n            <h2>Welcome to the Page</h2>\n            <p>This is a simple responsive layout example using media queries.</p>\n        </section>\n    </main>\n    <footer>\n        <p>Footer Content</p>\n    </footer>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Responsive Layout - Easy</title></head><body><header><h1>My Responsive Page</h1></header><main><section class=\"content\"><h2>Welcome to the Page</h2><p>This is a simple responsive layout example using media queries.</p></section></main><footer><p>Footer Content</p></footer></body></html>",
                    "required": [
                      "header { background-color: #007bff; color: white; text-align: center; padding: 10px; }",
                      "main { padding: 15px; }",
                      ".content { background-color: #ffffff; border: 1px solid #ddd; padding: 20px; border-radius: 5px; }",
                      "footer { background-color: #343a40; color: white; text-align: center; padding: 10px; position: fixed; width: 100%; bottom: 0; }",
                      "@media (min-width: 768px) { .content { max-width: 750px; margin: 0 auto; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Responsive Navigation - Medium",
                "description": "Create a responsive navigation menu using HTML and CSS. The menu should display as a vertical list on mobile devices and as a horizontal row on larger screens. Use media queries to adjust the layout based on screen size.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "In the given HTML, provide CSS to style a responsive navigation menu with the following specifications:\n\n1. Header: The header should have a background color of dark gray (`#343a40`) and padding of 10px.\n\n2. Navigation Menu: On mobile devices, the navigation menu should be a vertical list centered in the header, with each menu item displayed as a block. The links should have a blue background (`#007bff`), white text, and padding of 15px with a 2px bottom margin. On hover, the background color of the links should change to a darker blue (`#0056b3`).\n\n3. Media Query: For screens that are 768px wide or larger, the navigation menu should be displayed as a horizontal row. The `nav-menu` should use `flex` layout to center the items horizontally, and the `li` elements should be displayed inline with 5px margin on each side. The links should have padding of 10px vertically and 20px horizontally, with no bottom margin.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Responsive Navigation - Medium</title>\n</head>\n<body>\n    <header>\n        <nav>\n            <ul class=\"nav-menu\">\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Services</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n    <main>\n        <h1>Responsive Navigation Example</h1>\n        <p>Resize the window to see how the navigation menu changes.</p>\n    </main>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Responsive Navigation - Medium</title></head><body><header><nav><ul class=\"nav-menu\"><li><a href=\"#\">Home</a></li><li><a href=\"#\">About</a></li><li><a href=\"#\">Services</a></li><li><a href=\"#\">Contact</a></li></ul></nav></header><main><h1>Responsive Navigation Example</h1><p>Resize the window to see how the navigation menu changes.</p></main></body></html>",
                    "required": [
                      "header { background-color: #343a40; padding: 10px; }",
                      ".nav-menu { list-style: none; padding: 0; margin: 0; text-align: center; }",
                      ".nav-menu li { display: block; }",
                      ".nav-menu a { display: block; text-decoration: none; color: white; padding: 15px; background-color: #007bff; margin-bottom: 2px; font-weight: bold; }",
                      ".nav-menu a:hover { background-color: #0056b3; }",
                      "@media (min-width: 768px) { .nav-menu { display: flex; justify-content: center; } .nav-menu li { display: inline; margin: 0 5px; } .nav-menu a { margin: 0; padding: 10px 20px; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced Responsive Layout - Hard",
                "description": "Create an advanced responsive layout with multiple columns and media queries using HTML and CSS. The layout should adjust based on screen size, featuring a header, main content area with articles, and a sidebar.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "In the given HTML, provide CSS to style an advanced responsive layout with the following specifications:\n\n1. Header: The header should have a background color of blue (`#007bff`), white text, and padding of 15px. Center the text horizontally using `text-align: center`.\n\n2. Main: The main content area should have padding of 15px.\n\n3. Intro Section: The introduction section should have a white background (`#ffffff`), padding of 15px, a 1px solid border (`#ddd`), and border-radius of 5px. Add a bottom margin of 15px.\n\n4. Content Section: On mobile devices, the content section should be a single-column grid layout with a gap of 15px. This is specified using `grid-template-columns: 1fr;` to ensure a single column layout. On tablets (min-width: 768px), it should switch to a two-column grid layout. On desktops (min-width: 1024px), it should display as a grid with two columns: the first column should be twice as wide as the second column. The articles within this section should have a white background (`#ffffff`), padding of 15px, a 1px solid border (`#ddd`), and border-radius of 5px.\n\n5. Sidebar: The sidebar should have a white background (`#ffffff`), padding of 15px, a 1px solid border (`#ddd`), and border-radius of 5px.\n\n6. Use Media Queries: Ensure the layout adjusts correctly for different screen sizes using media queries: tablets (min-width: 768px) and desktops (min-width: 1024px). For tablets, the content should switch to a two-column layout, and for desktops, the main section should be a grid with two columns where the first column is twice as wide as the second, and the intro section should span both columns. On desktops, ensure that the content section switches back to a single-column layout.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Advanced Responsive Layout - Hard</title>\n</head>\n<body>\n    <header>\n        <h1>Advanced Responsive Layout</h1>\n    </header>\n    <main>\n        <section class=\"intro\">\n            <h2>Introduction</h2>\n            <p>This is an advanced layout example with multiple columns and media queries.</p>\n        </section>\n        <section class=\"content\">\n            <article class=\"article\">Article 1</article>\n            <article class=\"article\">Article 2</article>\n            <article class=\"article\">Article 3</article>\n        </section>\n        <aside class=\"sidebar\">Sidebar Content</aside>\n    </main>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Advanced Responsive Layout - Hard</title></head><body><header><h1>Advanced Responsive Layout</h1></header><main><section class=\"intro\"><h2>Introduction</h2><p>This is an advanced layout example with multiple columns and media queries.</p></section><section class=\"content\"><article class=\"article\">Article 1</article><article class=\"article\">Article 2</article><article class=\"article\">Article 3</article></section><aside class=\"sidebar\">Sidebar Content</aside></main></body></html>",
                    "required": [
                      "header { background-color: #007bff; color: white; text-align: center; padding: 15px; }",
                      "main { padding: 15px; }",
                      ".intro { background-color: #ffffff; padding: 15px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 15px; }",
                      ".content { display: grid; grid-template-columns: 1fr; gap: 15px; }",
                      ".article { background-color: #ffffff; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }",
                      ".sidebar { background-color: #ffffff; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }",
                      "@media (min-width: 768px) { .content { grid-template-columns: repeat(2, 1fr); } }",
                      "@media (min-width: 1024px) { main { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; } .intro { grid-column: span 2; } .content { grid-template-columns: 1fr; } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 14: CSS Effects: Transformations, Animations, and Transitions",
            "documents": [
              {
                "title": "CSS 2D Transforms Overview",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS 2D transforms</strong> allow us to manipulate elements on a two-dimensional plane."
                  },
                  {
                    "type": "sentence",
                    "text": "This includes transforming their position, size, and orientation."
                  },
                  {
                    "type": "sentence",
                    "text": "The key methods for CSS 2D transforms are <strong>translate(), rotate(), scale(), skew(), and matrix()</strong>."
                  },
                  {
                    "type": "sentence",
                    "text": "Here's a detailed guide on each transform method along with examples tailored for the CodeCraft e-learning platform."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Transform Methods Overview:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>translate():</strong> Moves an element horizontally and/or vertically."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>rotate():</strong> Rotates an element around its center."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>scale():</strong> Changes the size of an element."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>skew():</strong> Distorts an element by tilting it along the x-axis and/or y-axis."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>matrix():</strong> Combines multiple transform methods into one."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "/* Basic styles for all transform boxes */\nbody {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    padding: 20px;\n    background-color: #f0f0f0;\n    font-family: Arial, sans-serif;\n}\n\n.transform-box {\n    width: 100px;\n    height: 100px;\n    background-color: #4a90e2;\n    color: white;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid #333;\n    margin: 10px;\n    text-align: center;\n    font-weight: bold;\n    border-radius: 8px;\n}\n\n/* translate() - moves the element */\n.transform-box.translate {\n    transform: translate(50px, 30px);\n}\n\n/* rotate() - rotates the element */\n.transform-box.rotate {\n    transform: rotate(45deg);\n}\n\n/* scale() - scales the element */\n.transform-box.scale {\n    transform: scale(1.5, 0.75);\n}\n\n/* skew() - skews the element */\n.transform-box.skew {\n    transform: skew(20deg, 10deg);\n}\n\n/* matrix() - combines transformations */\n.transform-box.matrix {\n    transform: matrix(1.2, 0.4, -0.3, 1.1, 30, 20);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS 2D Transforms Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"transform-box translate\">Translate</div>\n    <div class=\"transform-box rotate\">Rotate</div>\n    <div class=\"transform-box scale\">Scale</div>\n    <div class=\"transform-box skew\">Skew</div>\n    <div class=\"transform-box matrix\">Matrix</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• translate() Method:</strong> Moves the element 50 pixels to the right and 30 pixels down from its original position."
                  },
                  {
                    "type": "sentence",
                    "text": "Example CSS: transform: translate(50px, 30px);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• rotate() Method:</strong> Rotates the element by 45 degrees clockwise."
                  },
                  {
                    "type": "sentence",
                    "text": "Example CSS: transform: rotate(45deg);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• scale() Method:</strong> Scales the element to 1.5 times its width and 0.75 times its height."
                  },
                  {
                    "type": "sentence",
                    "text": "Example CSS: transform: scale(1.5, 0.75);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• skew() Method:</strong> Skews the element by 20 degrees along the x-axis and 10 degrees along the y-axis."
                  },
                  {
                    "type": "sentence",
                    "text": "Example CSS: transform: skew(20deg, 10deg);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• matrix() Method:</strong> Applies multiple transformations: scales the element by 1.2 times horizontally, skews it, and translates it 30 pixels right and 20 pixels down."
                  },
                  {
                    "type": "sentence",
                    "text": "Example CSS: transform: matrix(1.2, 0.4, -0.3, 1.1, 30, 20);"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS 3D Transforms Overview",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS 3D transforms</strong> allow you to manipulate elements in a three-dimensional space."
                  },
                  {
                    "type": "sentence",
                    "text": "By using 3D transformations, you can create more immersive and dynamic web experiences."
                  },
                  {
                    "type": "sentence",
                    "text": "The primary methods include <strong>translate3d(), rotate3d(), and scale3d()</strong>."
                  },
                  {
                    "type": "sentence",
                    "text": "To effectively visualize these transformations, you must use the perspective property, which defines the distance between the viewer and the transformed elements."
                  },
                  {
                    "type": "sentence",
                    "text": " 1. <strong>Understanding Perspective:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>perspective</strong> property creates a sense of depth by adjusting the distance from the viewer to the z-plane of the 3D space."
                  },
                  {
                    "type": "sentence",
                    "text": "A smaller value of perspective makes the depth effect more pronounced, while a larger value diminishes the effect."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nperspective: length;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".perspective-container {\n    width: 150px;\n    height: 150px;\n    border: 4px solid black;\n    perspective: 1000px; /* Distance from viewer to the 3D plane */\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: #f0f0f0;\n}\n\n.box {\n    width: 100px;\n    height: 100px;\n    background-color: skyblue;\n    border: 2px solid black;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Understanding Perspective</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"perspective-container\">\n        <div class=\"box\">Perspective</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .perspective-container class applies a perspective to the container, creating a 3D effect for any child elements that use 3D transforms."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>translate3d() Method:</strong> The translate3d() method moves an element in three-dimensional space along the x, y, and z axes."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransform: translate3d(x, y, z);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• x:</strong> Horizontal movement\n<strong>• y:</strong>Vertical movement\n<strong>• z:</strong> Depth movement (outward or inward)"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".perspective-container {\n    width: 150px;\n    height: 150px;\n    border: 4px solid black;\n    perspective: 800px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: #f0f0f0;\n}\n\n.translate-box {\n    width: 100px;\n    height: 100px;\n    background-color: pink;\n    transform: translate3d(50px, 20px, 30px);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Translate3d Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"perspective-container\">\n        <div class=\"translate-box\">Translate3d</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .translate-box class moves the element 50 pixels horizontally, 20 pixels vertically, and 30 pixels outward from the viewer’s perspective."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>rotate3d() Method:</strong> The rotate3d() method rotates an element around a specified axis in 3D space."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransform: rotate3d(x, y, z, angle);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• x, y, z: </strong> Axes of rotation (1 means rotation occurs, 0 means no rotation)\n<strong>• angle:</strong> Degree of rotation"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".perspective-container {\n    width: 150px;\n    height: 150px;\n    border: 4px solid black;\n    perspective: 500px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: #f0f0f0;\n}\n\n.rotate-box {\n    width: 100px;\n    height: 100px;\n    background-color: skyblue;\n    transform: rotate3d(1, 1, 1, 45deg);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rotate3d Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"perspective-container\">\n        <div class=\"rotate-box\">Rotate3d</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>scale3d() Method:</strong> The scale3d() method scales an element in three-dimensional space along the x, y, and z axes."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransform: scale3d(x, y, z);"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• x:</strong> Scaling factor for the width\n<strong>• y:</strong> Scaling factor for the height\n<strong>• z:</strong> Scaling factor for the depth"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".perspective-container {\n    width: 150px;\n    height: 150px;\n    border: 4px solid black;\n    perspective: 800px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n    background-color: #f0f0f0;\n}\n\n.scale-box {\n    width: 100px;\n    height: 100px;\n    background-color: red;\n    transform: scale3d(1, 2, 5) rotateX(45deg);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Scale3d Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"perspective-container\">\n        <div class=\"scale-box\">Scale3d</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Explanation:</strong> The .scale-box class scales the element to 1 times its width, 2 times its height, and 5 times its depth, with an additional rotateX transformation to enhance the 3D effect."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Transitions Overview",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS transitions</strong> allow you to create smooth changes between different states of an element over a specified duration."
                  },
                  {
                    "type": "sentence",
                    "text": "They provide a way to animate changes to CSS properties, enhancing the user experience with visual feedback."
                  },
                  {
                    "type": "sentence",
                    "text": "With CSS transitions, you can control the following properties:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>transition-property:</strong> Specifies which CSS property the transition effect is applied to."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>transition-duration:</strong> Defines how long the transition effect takes to complete."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>transition-timing-function:</strong> Describes how the intermediate property values are calculated."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>transition-delay:</strong> Specifies when the transition effect should start."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>transition (shorthand property):</strong> Combines the above four properties into one."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".transition-box {\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    transition: background-color 1s linear;\n}\n\n.transition-box:hover {\n    background-color: green;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CSS Transition Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"transition-box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Hover over the element to see the background color transition smoothly from blue to green."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>transition-property:</strong> Specifies which CSS properties will be affected by the transition."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransition-property: none | all | property-name;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>none:</strong> No CSS properties will undergo a transition."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>all:</strong> Every CSS property that changes will undergo a transition."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>property-name:</strong> Defines which specific CSS properties will be affected by the transition."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    transition-property: width;\n    transition-duration: 1s;\n}\n\n.box:hover {\n    width: 200px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transition Property Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Hover over the element to see the width transition smoothly from 100px to 200px."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>transition-duration:</strong> Specifies how long the transition should take."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransition-duration: time-value;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    width: 100px;\n    height: 100px;\n    background-color: blue;\n    transition-property: background-color;\n    transition-duration: 1s;\n}\n\n.box:hover {\n    background-color: green;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transition Duration Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Hover over the element to see the background color transition over 1 second."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>transition-timing-function:</strong> Defines the speed curve of the transition."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransition-timing-function: timing-function;"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>ease:</strong> Starts slowly, speeds up in the middle, and ends slowly."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>linear:</strong> Constant speed from start to end."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>ease-in:</strong> Starts slowly and speeds up towards the end."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>ease-out:</strong> Starts quickly and slows down towards the end."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>ease-in-out:</strong> Starts and ends slowly, but speeds up in the middle."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>step-start, step-end:</strong> Instant change at the start or end."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>steps(int, start | end):</strong> Defines the step intervals."
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>cubic-bezier:</strong> Custom timing function with specified values."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    width: 150px;\n    height: 90px;\n    background-color: pink;\n    transition-property: width;\n    transition-duration: 1s;\n    margin-bottom: 12px;\n}\n\n.box1 { transition-timing-function: ease; }\n.box2 { transition-timing-function: linear; }\n.box3 { transition-timing-function: ease-in; }\n.box4 { transition-timing-function: ease-out; }\n.box5 { transition-timing-function: ease-in-out; }\n.box6 { transition-timing-function: step-start; }\n.box7 { transition-timing-function: step-end; }\n.box8 { transition-timing-function: steps(5, end); }\n.box9 { transition-timing-function: cubic-bezier(0.25, 0.2, 0.25, 2); }\n\n.box:hover {\n    width: 400px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transition Timing Function Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box box1\">Ease</div>\n    <div class=\"box box2\">Linear</div>\n    <div class=\"box box3\">Ease-In</div>\n    <div class=\"box box4\">Ease-Out</div>\n    <div class=\"box box5\">Ease-In-Out</div>\n    <div class=\"box box6\">Step-Start</div>\n    <div class=\"box box7\">Step-End</div>\n    <div class=\"box box8\">Steps(5, End)</div>\n    <div class=\"box box9\">Cubic-Bezier</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Hover over the elements to see different timing functions applied to the width transition."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>transition-delay:</strong> Defines when the transition effect should start."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransition-delay: time_value;"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    width: 100px;\n    height: 100px;\n    background-color: yellow;\n    transition-property: background-color;\n    transition-delay: 1s;\n}\n\n.box:hover {\n    background-color: pink;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transition Delay Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Hover over the element to see the background color transition with a delay of 1 second."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>transition (Shorthand Property):</strong> The transition property is a shorthand for setting all the transition properties in one line."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\ntransition: [transition-property] [transition-duration] [transition-timing-function] [transition-delay];"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".box {\n    width: 100px;\n    height: 100px;\n    background-color: violet;\n    transition: width 2s linear 1s;\n}\n\n.box:hover {\n    width: 200px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transition Shorthand Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"box\"></div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Animations Overview",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>CSS animations</strong> provide a way to animate HTML elements, creating smooth transitions between different styles."
                  },
                  {
                    "type": "sentence",
                    "text": "This lesson will cover the essential properties of CSS animations, complete with examples where animations trigger on hover."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Overview of CSS Animations</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "CSS animations enhance user interaction and visual appeal by animating element properties."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Key benefits include:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Improved Performance:</strong> Handled efficiently by the browser's rendering engine."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Reduced JavaScript Dependency:</strong> Native CSS animations avoid additional JavaScript."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Enhanced User Experience:</strong> Creates engaging and interactive web experiences."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>CSS Animation Properties</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>@keyframes Rule:</strong> Defines the animation sequence with intermediate steps."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\n@keyframes animation-name {\n  from {\n    /* Starting style */\n  }\n  to {\n    /* Ending style */\n  }\n}"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it change color."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes colorChange {\n  from {\n    background-color: orange;\n  }\n  to {\n    background-color: blue;\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: orange;\n  transition: background-color 1s;\n}\n\n.box:hover {\n  animation: colorChange 1s forwards;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Keyframes Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>animation-name:</strong> Specifies the name of the @keyframes animation."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-name: animation-name;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it move right."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes moveRight {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100px);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: green;\n  transition: transform 2s;\n}\n\n.box:hover {\n  animation-name: moveRight;\n  animation-duration: 2s;\n  animation-fill-mode: forwards;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Name Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>animation-duration:</strong> Specifies the time for one animation cycle."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-duration: time;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it scale up."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes scaleUp {\n  from {\n    transform: scale(1);\n  }\n  to {\n    transform: scale(1.5);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  transition: transform 2s;\n}\n\n.box:hover {\n  animation-name: scaleUp;\n  animation-duration: 2s;\n  animation-fill-mode: forwards;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Duration Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>animation-delay:</strong> Specifies the delay before starting the animation."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-delay: time;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it rotate after a delay."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: purple;\n  transition: transform 3s;\n}\n\n.box:hover {\n  animation-name: rotate;\n  animation-duration: 3s;\n  animation-delay: 1s;\n  animation-fill-mode: forwards;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Delay Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>animation-iteration-count:</strong> Specifies how many times an animation should repeat."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-iteration-count: number | infinite;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it bounce multiple times."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes bounce {\n  from {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-100px);\n  }\n  to {\n    transform: translateY(0);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: pink;\n  transition: transform 1s;\n}\n\n.box:hover {\n  animation-name: bounce;\n  animation-duration: 1s;\n  animation-iteration-count: 3;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Iteration Count Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>animation-direction:</strong> Specifies the direction in which an animation should play."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-direction: normal | reverse | alternate | alternate-reverse;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it slide back and forth."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes slide {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100px);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: orange;\n  transition: transform 3s;\n}\n\n.box:hover {\n  animation-name: slide;\n  animation-duration: 3s;\n  animation-direction: alternate;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Direction Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>animation-timing-function:</strong> Defines the speed curve of the animation."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-timing-function: timing-function;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it expand with a smooth ease-in-out effect."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes expand {\n  from {\n    width: 100px;\n  }\n  to {\n    width: 200px;\n  }\n}\n\n.box {\n  height: 100px;\n  background-color: yellow;\n  transition: width 4s;\n}\n\n.box:hover {\n  animation-name: expand;\n  animation-duration: 4s;\n  animation-timing-function: ease-in-out;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Timing Function Example</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>animation-fill-mode:</strong> Specifies the styles applied to the element before and after the animation."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "text": "Syntax:\nanimation-fill-mode: none | forwards | backwards | both;"
                  },
                  {
                    "type": "sentence",
                    "text": "Example: Hover over the box to see it move and retain its final position."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "<style>\n@keyframes move {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(100px);\n  }\n}\n\n.box {\n  width: 100px;\n  height: 100px;\n  background-color: teal;\n  transition: transform 5s;\n}\n\n.box:hover {\n  animation-name: move;\n  animation-duration: 5s;\n  animation-fill-mode: forwards;\n}\n</style>",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Animation Fill Mode Example</title>\n  <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n  <div class=\"box\"></div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              }
            ],
            "quiz": [
              {
                "question": "What property defines the CSS properties that will be affected by a transition?",
                "options": [
                  "transition-property",
                  "transition-duration",
                  "transition-timing-function",
                  "transition-delay"
                ],
                "correctAnswer": "transition-property",
                "points": 2,
                "locked": true
              },
              {
                "question": "What is the default value for transition-timing-function?",
                "options": [
                  "ease",
                  "linear",
                  "ease-in",
                  "ease-out"
                ],
                "correctAnswer": "ease",
                "points": 2,
                "locked": true
              },
              {
                "question": "How do you specify a transition duration of 2 seconds?",
                "options": [
                  "transition-duration: 2s;",
                  "transition: 2s;",
                  "duration: 2s;",
                  "transition: duration 2s;"
                ],
                "correctAnswer": "transition-duration: 2s;",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which of the following values can be used for transition-timing-function?",
                "options": [
                  "ease-in-out",
                  "step-start",
                  "cubic-bezier",
                  "all of the above"
                ],
                "correctAnswer": "all of the above",
                "points": 2,
                "locked": true
              },
              {
                "question": "What does the transition-delay property do?",
                "options": [
                  "Defines when the transition starts.",
                  "Specifies the speed of the transition.",
                  "Sets the transition duration.",
                  "Determines the properties to be transitioned."
                ],
                "correctAnswer": "Defines when the transition starts.",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which shorthand property combines all transition properties?",
                "options": [
                  "transition",
                  "transition-all",
                  "all-transitions",
                  "combined-transition"
                ],
                "correctAnswer": "transition",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which function would you use for a custom timing function?",
                "options": [
                  "cubic-bezier()",
                  "step()",
                  "linear()",
                  "ease()"
                ],
                "correctAnswer": "cubic-bezier()",
                "points": 2,
                "locked": true
              },
              {
                "question": "What happens if transition-duration is set to 0s?",
                "options": [
                  "The transition will not occur.",
                  "The transition occurs instantly.",
                  "The transition will be ignored.",
                  "The transition will cause an error."
                ],
                "correctAnswer": "The transition occurs instantly.",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "2D Transform and Transition ",
                "description": "Create a simple CSS transition and transform effect using HTML and CSS. The layout should include a div element that transforms on hover. The div should be centered and have transition effects for rotation and background color change.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "In the given HTML, provide CSS to style a box with the following specifications:\n\n1. Box: The box should be a square with a width and height of 150px, a background color of blue (`#007bff`), white text, centered text alignment, and rounded corners with a border-radius of 10px.\n\n2. Transition: Apply a transition effect to the box for both `transform` and `background-color`, with a duration of 0.3 seconds and easing function `ease`.\n\n3. Hover Effect: When the box is hovered over, it should rotate 20 degrees and change its background color to a darker shade of blue (`#0056b3`).\n\nEnsure that the transition effect is smooth and applies only to the transform and background color changes.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>2D Transform and Transition - Easy</title>\n</head>\n<body>\n    <div class=\"box\">Hover me</div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>2D Transform and Transition - Easy</title></head><body><div class=\"box\">Hover me</div></body></html>",
                    "required": [
                      ".box { width: 150px; height: 150px; background-color: #007bff; color: white; display: flex; justify-content: center; align-items: center; border-radius: 10px; transition: transform 0.3s ease, background-color 0.3s ease; }",
                      ".box:hover { transform: rotate(20deg); background-color: #0056b3; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "3D Transforms and Transitions ",
                "description": "Create a 3D transformation effect using HTML and CSS. The layout should include a container with multiple boxes that transform in 3D space when the container is hovered over. Each box should rotate differently to create a 3D effect.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "In the given HTML, provide CSS to style a 3D layout with the following specifications:\n\n1. Container: The container should have a `perspective` of 1000px to enable 3D effects.\n\n2. Box: Each box should be a square with a width and height of 100px, a background color of green (`#28a745`), white text, centered text alignment, and rounded corners with a border-radius of 5px. Apply a `transition` effect to the `transform` property with a duration of 0.5 seconds and easing function `ease`. Additionally, set a `margin` of 10px and use `transform-style: preserve-3d` to maintain the 3D effect.\n\n3. 3D Effect: When the container is hovered over, apply different 3D transformations to each box:\n   - The first box should rotate around the Y-axis by 20 degrees.\n   - The second box should rotate around the Y-axis by -20 degrees.\n   - The third box should rotate around the X-axis by 20 degrees.\n\nEnsure that the transformations are smooth and apply only when the container is hovered over.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>3D Transforms and Transitions - Medium</title>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"box\">1</div>\n        <div class=\"box\">2</div>\n        <div class=\"box\">3</div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>3D Transforms and Transitions - Medium</title></head><body><div class=\"container\"><div class=\"box\">1</div><div class=\"box\">2</div><div class=\"box\">3</div></div></body></html>",
                    "required": [
                      ".container { perspective: 1000px; }",
                      ".box { width: 100px; height: 100px; background-color: #28a745; color: white; display: flex; justify-content: center; align-items: center; border-radius: 5px; transition: transform 0.5s ease; margin: 10px; transform-style: preserve-3d; }",
                      ".container:hover .box:nth-child(1) { transform: rotateY(20deg); }",
                      ".container:hover .box:nth-child(2) { transform: rotateY(-20deg); }",
                      ".container:hover .box:nth-child(3) { transform: rotateX(20deg); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced Transforms, Transitions, and Animations ",
                "description": "Create an advanced 3D rotating cube effect using HTML and CSS.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "Given the HTML structure provided, your task is to apply CSS styles to achieve a dynamic 3D cube animation. Follow these detailed specifications:\n\n1. Base Styles: Style the `body` element to use the Arial or sans-serif font, center the content both vertically and horizontally, set the height of the viewport to 100vh, and apply a dark gray background color with the hex value #343a40.\n\n2. 3D Perspective: Define a `.scene` class that applies a 3D perspective effect with a distance of 1000 pixels to enhance the depth of the 3D rotation.\n\n3. Cube Dimensions: The cube should be a square with each side measuring exactly 150 pixels. It should be animated to rotate smoothly around both the X and Y axes. The rotation should be continuous and last for 10 seconds, with a linear timing function.\n\n4. Cube Faces: Position six faces of the cube, each face should be a square with dimensions of 150 pixels by 150 pixels. Style each face with a slightly transparent white background color (rgba(255, 255, 255, 0.9)) and a light gray border with the hex value #ddd. The text should be centered with a font size of 24 pixels and bold weight. Use 3D transforms to position the faces correctly:\n   -Front: Apply a rotation of 0 degrees around the Y-axis and a translation of 75 pixels along the Z-axis.\n   - Back: Apply a rotation of 180 degrees around the Y-axis and a translation of 75 pixels along the Z-axis.\n   - Left: Apply a rotation of -90 degrees around the Y-axis and a translation of 75 pixels along the Z-axis.\n   - Right: Apply a rotation of 90 degrees around the Y-axis and a translation of 75 pixels along the Z-axis.\n   - Top: Apply a rotation of 90 degrees around the X-axis and a translation of 75 pixels along the Z-axis.\n   - Bottom: Apply a rotation of -90 degrees around the X-axis and a translation of 75 pixels along the Z-axis.\n\n5. Rotation Animation: Create a `@keyframes` animation named `rotate` that smoothly transitions the cube's rotation around the X and Y axes from 0 to 360 degrees. The animation should be continuous, taking 10 seconds to complete one full rotation, with a linear timing function.",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Advanced Transforms, Transitions, and Animations - Hard</title>\n</head>\n<body>\n    <div class=\"scene\">\n        <div class=\"cube\">\n            <div class=\"face front\">Front</div>\n            <div class=\"face back\">Back</div>\n            <div class=\"face left\">Left</div>\n            <div class=\"face right\">Right</div>\n            <div class=\"face top\">Top</div>\n            <div class=\"face bottom\">Bottom</div>\n        </div>\n    </div>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Advanced Transforms, Transitions, and Animations - Hard</title></head><body><div class=\"scene\"><div class=\"cube\"><div class=\"face front\">Front</div><div class=\"face back\">Back</div><div class=\"face left\">Left</div><div class=\"face right\">Right</div><div class=\"face top\">Top</div><div class=\"face bottom\">Bottom</div></div></div></body></html>",
                    "required": [
                      "body { font-family: Arial, sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #343a40; }",
                      ".scene { perspective: 1000px; }",
                      ".cube { position: relative; width: 150px; height: 150px; transform-style: preserve-3d; transform: rotateX(0deg) rotateY(0deg); animation: rotate 10s infinite linear; }",
                      ".face { position: absolute; width: 150px; height: 150px; background-color: rgba(255, 255, 255, 0.9); border: 1px solid #ddd; line-height: 150px; text-align: center; font-size: 24px; font-weight: bold; color: #333; }",
                      ".front  { transform: rotateY(0deg) translateZ(75px); }",
                      ".back   { transform: rotateY(180deg) translateZ(75px); }",
                      ".left   { transform: rotateY(-90deg) translateZ(75px); }",
                      ".right  { transform: rotateY(90deg) translateZ(75px); }",
                      ".top    { transform: rotateX(90deg) translateZ(75px); }",
                      ".bottom { transform: rotateX(-90deg) translateZ(75px); }",
                      "@keyframes rotate { from { transform: rotateX(0deg) rotateY(0deg); } to { transform: rotateX(360deg) rotateY(360deg); } }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
            ],
            "totalPoints": 0,
            "locked": false
          },
          {
            "title": "Lesson 15: CSS Styling Elements",
            "documents": [
              {
                "title": "CSS Button Styling",
                "content": [
                  {
                    "type": "sentence",
                    "text": "Buttons are interactive elements that perform actions when clicked."
                  },
                  {
                    "type": "sentence",
                    "text": "Let's explore how to style buttons using CSS to enhance their appearance and functionality."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Create a Button</strong>: To create a basic button, use the <button> HTML element. For example:"
                  },
                  {
                    "type": "code",
                    "language": "html",
                    "code": "<button>Click Me</button>"
                  },
                  {
                    "type": "sentence",
                    "text": "This code generates a default button which lacks any styling. To make it visually appealing, we need to add CSS styles."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Style a Button</strong>: We can style buttons using various CSS properties."
                  },
                  {
                    "type": "sentence",
                    "text": "Here's a list of properties commonly used to style buttons:"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>background-color:</strong> Sets the background color of the button."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>padding:</strong> Adds space inside the button."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>width:</strong> Defines the button's width."
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>border:</strong> Specifies the button's border."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>border-radius:</strong> Rounds the corners of the button."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>box-shadow:</strong> Adds a shadow effect to the button."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".styled-button {\n    background-color: #4CAF50;\n    border: none;\n    border-radius: 8px;\n    color: white;\n    padding: 12px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease, transform 0.3s ease;\n}\n\n.styled-button:hover {\n    background-color: #45a049;\n    transform: scale(1.05);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n <button class=\"styled-button\">Styled Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Style Button States</strong>: Buttons have different states based on user interaction."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Hover State:</strong> Triggered when the user hovers over the button."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".state-button {\n    background-color: #007bff;\n    border: none;\n    border-radius: 8px;\n    color: white;\n    padding: 12px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease, outline 0.3s ease, transform 0.3s ease;\n}\n\n.state-button:hover {\n    background-color: #0056b3;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"state-button\">State Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Focus State:</strong> Triggered when the button receives keyboard focus."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".state-button:focus {\n    outline: 2px solid #0056b3;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"state-button\">State Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Active State:</strong> Triggered when the button is actively clicked."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".active-button {\n    background-color: #007bff;\n    border: none;\n    border-radius: 8px;\n    color: white;\n    padding: 12px 24px;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n    cursor: pointer;\n    transition: background-color 0.3s ease, transform 0.3s ease;\n}\n\n.active-button:active {\n    background-color: #003d7a;\n    transform: scale(0.98);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"active-button\">Active Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Shadow Effect:</strong> Adding a shadow effect to the button."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".shadow-button {\n    background-color: #4CAF50;\n    border: none;\n    border-radius: 8px;\n    color: white;\n    padding: 12px 24px;\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n    transition: box-shadow 0.3s ease;\n}\n\n.shadow-button:hover {\n    box-shadow: 0 8px 16px rgba(0,0,0,0.4);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"shadow-button\">Shadow Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Disabled Button:</strong> Create a disabled button by using the opacity property."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".disabled-button {\n    background-color: #cccccc;\n    border: none;\n    border-radius: 8px;\n    color: #666666;\n    padding: 12px 24px;\n    cursor: not-allowed;\n    opacity: 0.6;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"disabled-button\" disabled>Disabled Button</button>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Animated Button:</strong> Add animation effects to enhance user experience."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".animated-button {\n    background-color: #4CAF50;\n    border: none;\n    border-radius: 8px;\n    color: white;\n    padding: 12px 24px;\n    transition: transform 0.3s ease;\n}\n\n.animated-button:hover {\n    transform: translateY(-4px);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>BUTTON</title>\n</head>\n<body>\n<button class=\"animated-button\">Animated Button</button>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Form Styling",
                "content": [
                  {
                    "type": "sentence",
                    "text": "Forms are interactive HTML elements that collect user inputs on a webpage."
                  },
                  {
                    "type": "sentence",
                    "text": "By applying CSS, you can significantly improve their appearance."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Selecting Form Elements</strong>: In CSS, you can target specific form elements to apply styles by using selectors."
                  },
                  {
                    "type": "sentence",
                    "text": "These selectors help you choose elements based on their type or attributes."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>1. Selecting by Element Name:</strong> This method involves using the element’s name to select all instances of that element on the page."
                  },
                  {
                    "type": "sentence",
                    "text": "This is useful for applying general styles to all elements of a particular type."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>1. input:</strong> Selects all <input> fields."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>2. textarea:</strong>Selects all <textarea> elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>3. label:</strong>Selects all <label> elements."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>2. Selecting by Attribute:</strong> You can also select form elements based on their attributes using attribute selectors."
                  },
                  {
                    "type": "sentence",
                    "text": "This method is more specific and allows you to apply styles to elements with particular attribute values."
                  },
                  {
                    "type": "snippet",
                    "language": "css",
                    "code": "input[type=\"text\"] { /* Selects all <input> fields where the type attribute is set to text */ }\ninput[type=\"password\"] { /* Selects all <input> fields where the type attribute is set to password */ }\ninput[type=\"number\"] { /* Selects all <input> fields where the type attribute is set to number */ }"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>1. Default Form Structure:</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "form {\n    width: 300px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #f9f9f9;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\ninput {\n    width: calc(100% - 22px);\n    padding: 10px;\n    margin: 10px 0;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ninput[type=\"submit\"] {\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    cursor: pointer;\n    font-size: 16px;\n}\n\ninput[type=\"submit\"]:hover {\n    background-color: #45a049;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"name\" placeholder=\"Your name\">\n  <input type=\"password\" name=\"password\" placeholder=\"Your password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>2. Styling Input Fields:</strong> Adding Width, Padding, Margin, Border, Border Radius, and Box Shadow."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "input {\n    width: 100%;\n    padding: 12px;\n    margin: 20px 0;\n    border: 2px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n    font-size: 16px;\n}\n\ninput:focus {\n    border-color: #4CAF50;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Your name\">\n  <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"Your password\">\n  <input type=\"submit\" value=\"Submit\">\n</form>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>3. Colored Input:</strong> Change background and text color for input fields."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "input {\n    background-color: skyblue;\n    color: white;\n    padding: 12px;\n    width: 100%;\n    border: none;\n    border-radius: 5px;\n    font-size: 16px;\n}\n\ninput:focus {\n    background-color: pink;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<form action=\"/submit\" method=\"post\">\n  <input type=\"text\" name=\"name\" placeholder=\"Your name\">\n  <input type=\"password\" name=\"password\" placeholder=\"Your password\">\n</form>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>4. Styling Text Areas:</strong> Style text areas to improve appearance."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "textarea {\n    background-color: #ffe0e0;\n    width: 100%;\n    height: 120px;\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n    color: #a63c2f;\n    box-sizing: border-box;\n    font-size: 16px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<textarea placeholder=\"Start Writing...\"></textarea>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>5. Styling Drop Down Menus:</strong> Style select elements for better usability."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "select {\n    background-color: #e0e0e0;\n    width: 100%;\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<select>\n    <option>Select one</option>\n    <option value=\"option1\">Option 1</option>\n    <option value=\"option2\">Option 2</option>\n    <option value=\"option3\">Option 3</option>\n</select>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>6. Styling Radio Buttons:</strong> Customize the appearance of radio buttons."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "input[type=\"radio\"] {\n    width: 20px;\n    height: 20px;\n    margin-right: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<label for=\"option1\">Option 1</label>\n<input type=\"radio\" id=\"option1\" name=\"radioGroup\" value=\"option1\">\n<label for=\"option2\">Option 2</label>\n<input type=\"radio\" id=\"option2\" name=\"radioGroup\" value=\"option2\">\n<label for=\"option3\">Option 3</label>\n<input type=\"radio\" id=\"option3\" name=\"radioGroup\" value=\"option3\">\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>7. Styling Checkboxes:</strong> Style checkboxes to match the form design."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "input[type=\"checkbox\"] {\n    width: 20px;\n    height: 20px;\n    margin-right: 10px;\n    cursor: pointer;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<input type=\"checkbox\" id=\"option1\" name=\"checkboxGroup\" value=\"option1\">\n<label for=\"option1\">Option 1</label>\n<input type=\"checkbox\" id=\"option2\" name=\"checkboxGroup\" value=\"option2\">\n<label for=\"option2\">Option 2</label>\n<input type=\"checkbox\" id=\"option3\" name=\"checkboxGroup\" value=\"option3\">\n<label for=\"option3\">Option 3</label>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>8. Styling Submit Button:</strong> Style the submit button for better visibility."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "input[type=\"submit\"] {\n    background-color: #4CAF50;\n    width: 180px;\n    display: block;\n    margin: 30px auto;\n    border: none;\n    border-radius: 5px;\n    font-weight: bold;\n    font-size: 18px;\n    color: white;\n    padding: 15px;\n    text-align: center;\n    cursor: pointer;\n}\n\ninput[type=\"submit\"]:hover {\n    background-color: #45a049;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <title>FORM</title>\n</head>\n<body>\n<input type=\"submit\" value=\"Submit\">\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Table Styling",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Tables</strong> are essential for organizing and displaying data in rows and columns. CSS allows us to enhance their appearance, making them more visually appealing and easier to understand. This lesson will guide you through various CSS properties and techniques for styling HTML tables on the CodeCraft platform."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Basic Table Structure with Borders</strong> This example demonstrates a basic HTML table with borders around the entire table and individual cells."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table, th, td {\n    border: 1px solid #000;\n    border-collapse: collapse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Styled Table</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Collapsing Table Borders</strong> Using the <strong>border-collapse</strong> property, we can collapse the borders, merging adjacent borders into a single border line."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table {\n    border-collapse: collapse;\n    border: 2px solid #000;\n}\nth, td {\n    border: 1px solid #333;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Collapsed Borders Table</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Adjusting Border Spacing</strong> The <strong>border-spacing</strong> property adds space between adjacent cell borders, providing a more spaced-out appearance."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table {\n    border-spacing: 10px;\n    border: 1px solid #000;\n}\nth, td {\n    border: 1px solid #000;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Table with Border Spacing</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Setting Table Size</strong> The <strong>width</strong> and <strong>height</strong> properties define the overall size of the table, while borders help delineate the structure."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table {\n    width: 100%;\n    height: 200px;\n    border-collapse: collapse;\n    border: 1px solid #000;\n}\nth, td {\n    border: 1px solid #000;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Table Size Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Table Layout</strong> The <strong>table-layout</strong> property affects the layout of the table cells, and borders help in understanding the layout structure."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table {\n    table-layout: fixed;\n    width: 500px;\n    border: 1px solid #000;\n}\nth, td {\n    border: 1px solid #000;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Table Layout Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Horizontal Alignment</strong> The <strong>text-align</strong> property sets the horizontal alignment of the content inside table cells. You can align content to the left, center, or right."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".left-align td {\n    text-align: left;\n}\n.center-align td {\n    text-align: center;\n}\n.right-align td {\n    text-align: right;\n}\ntable, th, td {\n    border: 1px solid #000;\n    border-collapse: collapse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Horizontal Alignment</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr class=\"left-align\">\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr class=\"center-align\">\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n        <tr class=\"right-align\">\n            <td>JavaScript Fundamentals</td>\n            <td>Advanced</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>Vertical Alignment</strong> The <strong>vertical-align</strong> property sets the vertical alignment of the content inside table cells. Common values include <strong>top</strong>, <strong>middle</strong>, and <strong>bottom</strong>."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "td {\n    vertical-align: middle;\n}\ntable, th, td {\n    border: 1px solid #000;\n    border-collapse: collapse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Vertical Alignment</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>Row Styling</strong> You can style rows using the <strong>:nth-child</strong> pseudo-class to create alternating row colors for better readability."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "tr:nth-child(even) {\n    background-color: #f2f2f2;\n}\ntr:nth-child(odd) {\n    background-color: #fff;\n}\ntable, th, td {\n    border: 1px solid #000;\n    border-collapse: collapse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Alternating Row Colors</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "9. <strong>Customizing Header Cells</strong> You can apply distinct styles to header cells using the <strong>th</strong> selector to enhance their appearance."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "th {\n    background-color: #4CAF50;\n    color: white;\n    padding: 8px;\n}\ntable, th, td {\n    border: 1px solid #000;\n    border-collapse: collapse;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Header Cell Customization</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <table>\n        <tr>\n            <th>Course</th>\n            <th>Level</th>\n        </tr>\n        <tr>\n            <td>HTML Basics</td>\n            <td>Beginner</td>\n        </tr>\n        <tr>\n            <td>CSS Styling</td>\n            <td>Intermediate</td>\n        </tr>\n    </table>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "10. <strong>Responsive Tables</strong> To ensure your tables are responsive, you can use CSS properties such as <strong>width</strong> with percentages and <strong>overflow</strong> for better display on smaller screens."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "table {\n    width: 100%;\n    overflow-x: auto;\n}\nth, td {\n    padding: 10px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodeCraft Responsive Table</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div style=\"overflow-x:auto;\">\n        <table>\n            <tr>\n                <th>Course</th>\n                <th>Level</th>\n            </tr>\n            <tr>\n                <td>HTML Basics</td>\n                <td>Beginner</td>\n            </tr>\n            <tr>\n                <td>CSS Styling</td>\n                <td>Intermediate</td>\n            </tr>\n        </table>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "Using Lists ",
                "content": [
                  {
                    "type": "sentence",
                    "text": "In HTML, <strong>lists</strong> are used to display items in a structured format. Lists can be either ordered or unordered, and CSS can be applied to style them for better visual presentation."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Types of Lists</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Unordered Lists:</strong> These lists display items without any particular order. They are created using the <ul> (unordered list) tag."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Ordered Lists:</strong> These lists display items in a specific sequence and are created using the <ol> (ordered list) tag."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 1: Unordered List with Custom Styling</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".codecraft-list {\n    border: 2px solid #000;\n    padding: 10px;\n    width: 300px;\n    margin: 20px auto;\n}\n\n.custom-list {\n    list-style-type: square; /* Custom bullet style */\n    padding-left: 20px; /* Adds space between bullet and text */\n}\n\n.custom-list li {\n    margin-bottom: 5px; /* Space between list items */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Unordered List Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"codecraft-list\">\n    <h3>Popular Courses</h3>\n    <ul class=\"custom-list\">\n        <li>Introduction to Programming</li>\n        <li>Advanced JavaScript</li>\n        <li>Data Science Fundamentals</li>\n    </ul>\n</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Browser Output: A list with square bullets, showing each course title with a clear border and padding around the list container."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 2: Ordered List with Custom Numbering</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".custom-ordered-list {\n    list-style-type: upper-alpha; /* Uppercase letters for list markers */\n    padding-left: 20px;\n}\n\n.custom-ordered-list li {\n    margin-bottom: 5px;\n    border-bottom: 1px solid #ccc; /* Divider between items */\n    padding-bottom: 5px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ordered List Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"codecraft-list\">\n    <h3>Course Prerequisites</h3>\n    <ol class=\"custom-ordered-list\">\n        <li>Basic HTML & CSS</li>\n        <li>JavaScript Basics</li>\n        <li>Version Control with Git</li>\n    </ol>\n</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Browser Output: A list with uppercase alphabetical markers and a divider line between each item."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Customizing List Styles</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>list-style-type:</strong> Defines the marker type for list items."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• disc:</strong> Default filled circle."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• circle:</strong> Hollow circle."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• square:</strong> Filled square."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• upper-alpha:</strong> Uppercase letters (A, B, C, ...)."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• lower-roman:</strong> Lowercase Roman numerals (i, ii, iii, ...)."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>list-style-position:</strong> Determines the position of the list marker relative to the list items."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• inside:</strong> Marker is inside the list item, and text wraps accordingly."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>• outside:</strong> Marker is outside the list item (default behavior)."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>list-style-image:</strong> Allows using an image as a marker for list items."
                  },
                  {
                    "type": "sentence",
                    "text": "Example: list-style-image: url('path/to/image.png');"
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Example 3: Using Custom Images as List Markers</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".image-list {\n    list-style-type: none; /* Removes default markers */\n    padding-left: 40px; /* Space to accommodate custom image markers */\n}\n\n.image-list li {\n    margin-bottom: 10px; /* Adds space between list items */\n    background: url('https://cdn.prod.website-files.com/648f76da04dfc69f8db5bb19/64e6bc1b0a20df3f2c56818a_what-is-e-learning-and-what-are-its-benefits.png') no-repeat left center;\n    background-size: 20px 20px; /* Size of the custom marker image */\n    padding-left: 30px; /* Space to avoid overlapping text and marker */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image List Example</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"codecraft-list\">\n    <h3>Features of CodeCraft</h3>\n    <ul class=\"image-list\">\n        <li>Interactive Lessons</li>\n        <li>Live Coding Sessions</li>\n        <li>Community Support</li>\n    </ul>\n</div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Browser Output: A list where each item is marked with a custom image, aligning with the left side of the list item text."
                  },
                  {
                    "type": "sentence",
                    "text": "<strong>Key Points:</strong>"
                  },
                  {
                    "type": "sentence",
                    "text": "list-style-type: none; removes the default list markers, making way for custom images."
                  },
                  {
                    "type": "sentence",
                    "text": "background property is used to set the custom image as the list marker. The image URL should point to a properly hosted image."
                  },
                  {
                    "type": "sentence",
                    "text": "background-size ensures that the image is appropriately sized for the list items."
                  },
                  {
                    "type": "sentence",
                    "text": "padding-left is adjusted to provide enough space between the image and the list item text, ensuring clear readability and aesthetics."
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Image Styling",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Images</strong> are a fundamental part of web design, adding visual appeal and conveying information. This lesson will cover various techniques for styling images using CSS."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Changing Image Size</strong> Use the width and height properties to set a fixed size for your image. This ensures that the image will always display at the specified dimensions, regardless of its original size."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".image-size img {\n    width: 280px;\n    height: 200px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Size</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"image-size\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Adding Rounded Corners</strong> Use the border-radius property to create rounded corners on images."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".rounded-corners img {\n    width: 200px;\n    height: 200px;\n    border-radius: 15px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Rounded Corners</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"rounded-corners\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Centering an Image</strong> Use display: block and margin: auto to center an image horizontally within its container."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".center-image img {\n    display: block;\n    margin: 0 auto;\n    width: 150px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Center Image</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"center-image\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "4. <strong>Creating a Responsive Image</strong> Use max-width: 100% and height: auto to make an image responsive."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".responsive-image img {\n    max-width: 100%;\n    height: auto;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Image</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"responsive-image\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Creating a Thumbnail Image</strong> Use border and padding to style a thumbnail image."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".thumbnail img {\n    border: 2px solid #000;\n    padding: 5px;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Thumbnail Image</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"thumbnail\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Creating a Transparent Image</strong> Use the opacity property to adjust the transparency of an image."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".transparent-images img {\n    max-width: 150px;\n}\n\n.first { opacity: 0.1; }\n.second { opacity: 0.5; }\n.third { opacity: 1; }",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transparent Image</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"transparent-images\">\n        <img class=\"first\" src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n        <img class=\"second\" src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n        <img class=\"third\" src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>Creating an Image Card</strong> Use box-shadow and border-radius to style an image card."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".image-card {\n    max-width: 300px;\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.image-card img {\n    width: 100%;\n    height: auto;\n}\n\n.card-content {\n    padding: 10px;\n    text-align: center;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Card</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"image-card\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n        <div class=\"card-content\">Image Card</div>\n    </div>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "8. <strong>Creating an Image Text Overlay</strong> Use position: absolute within a position: relative container to place text over an image."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": ".overlay-container {\n    position: relative;\n    width: 300px;\n}\n\n.overlay-container img {\n    width: 100%;\n    height: auto;\n}\n\n.overlay-text {\n    position: absolute;\n    color: white;\n    background-color: rgba(0, 0, 0, 0.6);\n    padding: 5px;\n}\n",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Text Overlay</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"overlay-container\">\n        <img src=\"https://myrhline.com/wp-content/uploads/2022/06/e-learning-session-de-formation-en-ligne.jpg\" alt=\"Sample Image\">\n        <div class=\"overlay-text\">Overlay Text</div>\n    </div>\n</body>\n</html>"
                  }
                ],
                "locked": true
              },
              {
                "title": "CSS Link Styling",
                "content": [
                  {
                    "type": "sentence",
                    "text": "<strong>Links</strong> are crucial for web navigation and interaction. This lesson will cover how to style links using CSS, including different link states, button-like styling, and image links."
                  },
                  {
                    "type": "sentence",
                    "text": "1. <strong>Basic Link</strong> A basic link is created using the <strong>&lt;a&gt;</strong> element. By default, links are styled by the browser, but we can customize them using CSS."
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "a {\n    color: #1a73e8; /* Default link color */\n    text-decoration: none; /* Remove underline */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Link</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\">Visit our site</a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "This example demonstrates a basic link without any additional styling. The color property changes the link text color. The text-decoration: none; removes the default underline from the link."
                  },
                  {
                    "type": "sentence",
                    "text": "2. <strong>Styling a Link</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "a.styled-link {\n    text-decoration: none;\n    padding: 12px 24px;\n    border-radius: 5px;\n    font-family: Arial, sans-serif;\n    text-align: center;\n    color: #fff;\n    background-color: #007bff;\n    display: inline-block;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Styled Link</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\" class=\"styled-link\">Click Me</a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>a.styled-link</strong> class adds a background color, padding, and border radius to the link. The padding property adds space inside the link around the text. The border-radius property rounds the corners of the link. The background-color property sets the background color of the link. The color property changes the text color, and display: inline-block; makes the link behave like a button."
                  },
                  {
                    "type": "sentence",
                    "text": "3. <strong>Link States</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "a.state-link:link {\n    color: #006400; /* Unvisited link */\n}\n\na.state-link:visited {\n    color: #8a2be2; /* Visited link */\n}\n\na.state-link:hover {\n    color: #ff4500; /* Hovered link */\n}\n\na.state-link:active {\n    color: #ff0000; /* Clicked link */\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Link States</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\" class=\"state-link\">Styled States Link</a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Different states of a link are styled using pseudo-classes: <strong>:link</strong> for unvisited links, <strong>:visited</strong> for visited links, <strong>:hover</strong> for when the mouse is over the link, and <strong>:active</strong> for when the link is clicked."
                  },
                  {
                    "type": "sentencet",
                    "text": "4. <strong>Styling Links as Buttons</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "a.button-link {\n    text-decoration: none;\n    border: 2px solid #333;\n    border-radius: 8px;\n    font-size: 16px;\n    padding: 12px 24px;\n    background-color: #28a745;\n    color: white;\n    font-weight: bold;\n    display: inline-block;\n    text-align: center;\n}\n\na.button-link:hover {\n    background-color: #218838;\n}\n\na.button-link:active {\n    background-color: #1e7e34;\n}\n\na.delete-link {\n    background-color: #dc3545;\n}\n\na.delete-link:hover {\n    background-color: #c82333;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Button Links</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\" class=\"button-link\">Button Link</a>\n    <a href=\"#\" class=\"delete-link\">Delete Link</a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "Links are styled to look like buttons using properties such as <strong>border</strong>, <strong>border-radius</strong>, <strong>font-size</strong>, and <strong>padding</strong>. Background colors change on hover and active states to provide visual feedback."
                  },
                  {
                    "type": "sentence",
                    "text": "5. <strong>Styling Image Links</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "a img {\n    border: 3px solid #ccc;\n    border-radius: 4px;\n    transition: border-color 0.3s;\n}\n\na:hover img {\n    border-color: #007bff;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Link</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\"><img src=\"https://example.com/image.jpg\" alt=\"Clickable Image\"></a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "An image can be used as a clickable link. The <strong>border</strong> and <strong>border-radius</strong> properties style the image, while <strong>transition</strong> allows the border color to change smoothly when hovered over."
                  },
                  {
                    "type": "sentence",
                    "text": "6. <strong>Cursor Property</strong>"
                  },
                  {
                    "type": "sentence",
                    "language": "css",
                    "code": "a.cursor-link {\n    cursor: crosshair;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cursor Property</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <a href=\"#\" class=\"cursor-link\">Hover to see crosshair cursor</a>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "The <strong>cursor</strong> property changes the type of cursor displayed when hovering over the link. <strong>cursor: crosshair;</strong> sets the cursor to a crosshair."
                  },
                  {
                    "type": "sentence",
                    "text": "7. <strong>Creating a Navigation Bar</strong>"
                  },
                  {
                    "type": "code",
                    "language": "css",
                    "code": "nav {\n    background-color: #333;\n    padding: 10px;\n}\n\nnav a {\n    color: white;\n    text-decoration: none;\n    padding: 10px 20px;\n    margin\n: 0 5px;\n border-radius: 4px;\n transition: background-color 0.3s;\n}\n\nnav a\n{\n background-color: #555;\n}\n\nnav a\n{\n background-color: #777;\n}",
                    "supportingcode": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Navigation Bar</title>\n <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n <nav>\n <a href=\"#\">Home</a>\n <a href=\"#\">About</a>\n <a href=\"#\">Services</a>\n <a href=\"#\">Contact</a>\n </nav>\n</body>\n</html>"
                  },
                  {
                    "type": "sentence",
                    "text": "A navigation bar is created with links styled using <strong>background-color</code> and <strong>padding</code> to enhance appearance. Links have padding, margin, and border-radius to create a button-like look, with transitions for smooth hover and click effects."
                  }
                ],
                "locked": false
              }
            ],
            "quiz": [
              {
                "question": "What is the primary purpose of a button in a web interface?",
                "options": [
                  "To display static content",
                  "To perform actions when clicked",
                  "To navigate between pages",
                  "To provide decorative elements"
                ],
                "correctAnswer": "To perform actions when clicked",
                "points": 2,
                "locked": true
              },
              {
                "question": "What HTML element is used to create a basic button?",
                "options": [
                  "<a>",
                  "<div>",
                  "<button>",
                  "<span>"
                ],
                "correctAnswer": "<button>",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property is used to set the background color of a button?",
                "options": [
                  "color",
                  "background-color",
                  "border",
                  "padding"
                ],
                "correctAnswer": "background-color",
                "points": 2,
                "locked": true
              },
              {
                "question": "How can you make the corners of a button rounded using CSS?",
                "options": [
                  "border-radius",
                  "box-shadow",
                  "padding",
                  "margin"
                ],
                "correctAnswer": "border-radius",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property adds a shadow effect to a button?",
                "options": [
                  "border",
                  "box-shadow",
                  "outline",
                  "opacity"
                ],
                "correctAnswer": "box-shadow",
                "points": 2,
                "locked": true
              },
              {
                "question": "In the provided CSS example, what does the transform: scale(1.05); property do to the button when hovered?",
                "options": [
                  "Changes the button color",
                  "Enlarges the button slightly",
                  "Adds a shadow to the button",
                  "Rounds the button corners"
                ],
                "correctAnswer": "Enlarges the button slightly",
                "points": 2,
                "locked": true
              },
              {
                "question": "What HTML tag is used to create an unordered list?",
                "options": [
                  "<ul>",
                  "<ol>",
                  "<li>",
                  "<div>"
                ],
                "correctAnswer": "<ul>",
                "points": 2,
                "locked": true
              },
              {
                "question": "Which CSS property is used to change the bullet style of a list item to a square?",
                "options": [
                  "list-style-position",
                  "list-style-type",
                  "background-image",
                  "border-radius"
                ],
                "correctAnswer": "list-style-type",
                "points": 2,
                "locked": true
              },
              {
                "question": "How can you add a custom image as a list marker in CSS?",
                "options": [
                  "By using the list-style-type property",
                  "By using the background-image property",
                  "By using the border property",
                  "By using the text-align property"
                ],
                "correctAnswer": "By using the background-image property",
                "points": 2,
                "locked": true
              },
              {
                "question": "In the CSS example provided, what does background-size: 20px 20px; do?",
                "options": [
                  "Sets the size of the list container",
                  "Sets the size of the text in the list",
                  "Sets the size of the custom marker image",
                  "Sets the size of the list item padding"
                ],
                "correctAnswer": "Sets the size of the custom marker image",
                "points": 2,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Easy CSS Styling",
                "description": "Style a button and a form using CSS, applying a basic reset and consistent styling for user interface elements.",
                "language": "CSS",
                "difficulty": "easy",
                "problemStatement": "You are provided with a basic HTML structure containing a button and a form. Your task is to apply CSS styles to achieve a polished and consistent look. Follow these detailed specifications:\n\n1. Basic Reset: \n   - Apply a font-family of Arial or sans-serif to the `body` element to ensure the text is displayed with a clean, modern font. \n   - Set a margin of 20px around the body to create spacing between the content and the edges of the viewport.\n   - Use a white background color (`#ffffff`) for the body to provide a neutral canvas for the content.\n\n2. Button Styling: \n   - The button should have a background color of blue (#007bff) with white text. \n   - Remove any default borders using `border: none` and add padding of 10px on the top and bottom, and 20px on the left and right to make the button visually appealing. \n   - Center the text within the button using `text-align: center` and remove any default text decoration with `text-decoration: none`. \n   - Make the button an inline-block element to allow for margin spacing and to ensure it only takes up as much width as needed. \n   - Set the font size to 16px for readability, and add a margin of 4px vertically and 2px horizontally for spacing around the button. \n   - Change the cursor to a pointer on hover to indicate that the button is clickable. \n   - Apply a border-radius of 5px to round the corners of the button and make it more visually appealing. \n   - Include a transition effect on the background color over 0.3 seconds to smooth the color change when hovering.\n\n3. Button Hover Effect:\n   - On hover, change the background color of the button to a darker shade of blue (#0056b3) to provide visual feedback to users.\n\n4. Form Styling: \n   - Style the form with a top margin of 20px to separate it from other elements and set a maximum width of 300px to constrain its width and make it fit well within typical layouts.\n\n5. Form Elements Styling:\n   - For labels within the form, ensure they are displayed as block elements (`display: block`) to stack them vertically and add a margin-bottom of 5px for spacing below each label.\n   - Style input fields with a width of 100% to make them stretch across the available space. Add padding of 8px for comfortable text entry and a margin-bottom of 10px to space them apart. \n   - Apply a border of 1px solid #ccc to input fields to provide a light gray border and a border-radius of 4px to round the corners slightly for a softer look.\n\n6. Form Button Styling:\n   - Ensure the submit button within the form has the same styling as the primary button to maintain consistency. It should also have a width of 100%, a background color of blue (#007bff), white text, no border, padding of 10px, and a border-radius of 4px.\n",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Easy CSS Styling</title>\n</head>\n<body>\n    <h1>Easy CSS Styling</h1>\n\n    <!-- Button -->\n    <button class=\"btn\">Click Me</button>\n\n    <!-- Form -->\n    <form class=\"simple-form\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required />\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required />\n\n        <button type=\"submit\" class=\"btn\">Submit</button>\n    </form>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Easy CSS Styling</title></head><body><h1>Easy CSS Styling</h1><button class=\"btn\">Click Me</button><form class=\"simple-form\"><label for=\"name\">Name:</label><input type=\"text\" id=\"name\" name=\"name\" required /><label for=\"email\">Email:</label><input type=\"email\" id=\"email\" name=\"email\" required /><button type=\"submit\" class=\"btn\">Submit</button></form></body></html>",
                    "required": [
                      "body { font-family: Arial, sans-serif; margin: 20px; background-color: white; }",
                      ".btn { background-color: #007bff; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 5px; transition: background-color 0.3s; }",
                      ".btn:hover { background-color: #0056b3; }",
                      ".simple-form { margin-top: 20px; max-width: 300px; }",
                      ".simple-form label { display: block; margin-bottom: 5px; }",
                      ".simple-form input { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px; }",
                      ".simple-form button { width: 100%; background-color: #007bff; color: white; border: none; padding: 10px; border-radius: 4px; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Medium CSS Styling",
                "description": "Style a table, list, and form using CSS to enhance their appearance and functionality.",
                "language": "CSS",
                "difficulty": "medium",
                "problemStatement": "You are provided with an HTML structure that includes a table, a list, and a form. Your task is to apply CSS styles to improve the visual presentation of these elements. Follow these detailed specifications:\n\n1. Basic Reset: \n   - Apply a font-family of Arial or sans-serif to the `body` element for a clean and modern text appearance. \n   - Set a margin of 20px around the body to provide adequate spacing between the content and the edges of the viewport.\n\n2. Table Styling: \n   - Style the table with a class of `styled-table`. Set the width to 100% and apply `border-collapse: collapse` to ensure borders are merged into a single border.\n   - Add a margin-bottom of 20px to the table to provide spacing below it.\n   - For table cells (`th` and `td`), use a border of 1px solid light gray (`#ddd`), padding of 8px for spacing, and left-align the text.\n   - Apply a background color of light gray (`#f2f2f2`) to every even row for alternating row colors using `nth-child(even)`. \n   - Style table headers (`th`) with a background color of blue (`#007bff`) and white text to differentiate them from other cells.\n\n3. Custom List Styling: \n   - Style the unordered list with a class of `custom-list`. Use square bullet points (`list-style-type: square`) and add padding-left of 20px to indent the list items.\n   - For each list item (`li`), add a margin-bottom of 10px to create spacing between items.\n\n4. Form Styling: \n   - Style the form with a class of `advanced-form`. Set a maximum width of 300px to constrain the form's width and make it suitable for various layouts.\n   - For labels in the form, ensure they are displayed as block elements (`display: block`) and add a margin-bottom of 5px for spacing below each label.\n   - Style input fields with a width of 100% to make them span the available space. Add padding of 8px for comfortable text entry and a margin-bottom of 10px for spacing. Apply a border of 1px solid light gray (`#ccc`) and a border-radius of 4px to round the corners.\n   - When an input field is focused, change the border color to blue (`#007bff`) and remove the outline with `outline: none` for a clean focus effect.\n   - Style the submit button with a background color of blue (`#007bff`), white text, no border, padding of 10px, and a border-radius of 4px. Include a transition effect on the background color over 0.3 seconds to smooth the color change on hover.\n   - On hover, change the background color of the button to a darker shade of blue (`#0056b3`) to provide visual feedback to users.\n",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Medium CSS Styling</title>\n</head>\n<body>\n    <h1>Medium CSS Styling</h1>\n\n    <!-- Table -->\n    <table class=\"styled-table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Age</th>\n                <th>Occupation</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>John Doe</td>\n                <td>30</td>\n                <td>Developer</td>\n            </tr>\n            <tr>\n                <td>Jane Smith</td>\n                <td>25</td>\n                <td>Designer</td>\n            </tr>\n            <tr>\n                <td>Emily Johnson</td>\n                <td>35</td>\n                <td>Manager</td>\n            </tr>\n        </tbody>\n    </table>\n\n    <!-- List -->\n    <ul class=\"custom-list\">\n        <li>Item 1</li>\n        <li>Item 2</li>\n        <li>Item 3</li>\n    </ul>\n\n    <!-- Form -->\n    <form class=\"advanced-form\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\" required />\n\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\" required />\n\n        <button type=\"submit\" class=\"btn\">Login</button>\n    </form>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Medium CSS Styling</title></head><body><h1>Medium CSS Styling</h1><table class=\"styled-table\"><thead><tr><th>Name</th><th>Age</th><th>Occupation</th></tr></thead><tbody><tr><td>John Doe</td><td>30</td><td>Developer</td></tr><tr><td>Jane Smith</td><td>25</td><td>Designer</td></tr><tr><td>Emily Johnson</td><td>35</td><td>Manager</td></tr></tbody></table><ul class=\"custom-list\"><li>Item 1</li><li>Item 2</li><li>Item 3</li></ul><form class=\"advanced-form\"><label for=\"username\">Username:</label><input type=\"text\" id=\"username\" name=\"username\" required /><label for=\"password\">Password:</label><input type=\"password\" id=\"password\" name=\"password\" required /><button type=\"submit\" class=\"btn\">Login</button></form></body></html>",
                    "required": [
                      "body { font-family: Arial, sans-serif; margin: 20px; }",
                      ".styled-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }",
                      ".styled-table th, .styled-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }",
                      ".styled-table tr:nth-child(even) { background-color: #f2f2f2; }",
                      ".styled-table th { background-color: #007bff; color: white; }",
                      ".custom-list { list-style-type: square; padding-left: 20px; }",
                      ".custom-list li { margin-bottom: 10px; }",
                      ".advanced-form { max-width: 300px; }",
                      ".advanced-form label { display: block; margin-bottom: 5px; }",
                      ".advanced-form input { width: 100%; padding: 8px; margin-bottom: 10px; border: 1px solid #ccc; border-radius: 4px; }",
                      ".advanced-form input:focus { border-color: #007bff; outline: none; }",
                      ".advanced-form button { background-color: #007bff; color: white; border: none; padding: 10px; border-radius: 4px; transition: background-color 0.3s; }",
                      ".advanced-form button:hover { background-color: #0056b3; }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Advanced CSS Styling",
                "description": "Apply advanced CSS styles to a table, list, and form to enhance their appearance and user experience.",
                "language": "CSS",
                "difficulty": "hard",
                "problemStatement": "You are given an HTML structure that includes a table, a list, and a form. Your task is to style these elements using CSS according to the specifications below. Ensure that the styles improve the visual appeal and functionality of the components. Follow these detailed requirements:\n\n1. Basic Reset: \n   - Apply a font-family of Arial or sans-serif to the `body` element for a clean and modern look.\n   - Set a margin of 20px around the body and a background color of light gray (`#f8f9fa`) to provide a soft background for the content.\n\n2. Complex Table Styling: \n   - Style the table with a class of `complex-table`. Set the width to 100% and use `border-collapse: collapse` to ensure borders are merged into a single border.\n   - Add a margin-bottom of 20px to the table to create space below it.\n   - For table cells (`th` and `td`), use a border of 1px solid light gray (`#ddd`), padding of 12px, and left-align the text.\n   - Style table headers (`th`) with a background color of dark gray (`#343a40`) and white text to make them stand out.\n   - Apply a background color of light gray (`#f2f2f2`) to every even row for alternating row colors.\n   - On hover, change the background color of table rows to a slightly darker gray (`#e9ecef`) to provide visual feedback.\n\n3. Icon List Styling: \n   - Style the unordered list with a class of `icon-list`. Remove default list styles using `list-style: none` and set padding-left to 0.\n   - For each list item (`li`), use a font-size of 18px, add a margin-bottom of 10px, and align items horizontally with `display: flex` and `align-items: center`.\n   - Style the icons within the list items by setting their font size to 24px and adding a margin-right of 10px.\n\n4. Form Styling: \n   - Style the form with a class of `styled-form`. Set a maximum width of 500px, apply a white background color, and add padding of 20px. Use a border-radius of 8px and a subtle box-shadow for a modern card-like appearance.\n   - For form labels, ensure they are displayed as block elements (`display: block`) with a margin-bottom of 8px and bold font-weight.\n   - Style input fields and textareas to have a width of 100%, padding of 10px, and a margin-bottom of 12px. Use a border of 1px solid light gray (`#ced4da`) and a border-radius of 4px.\n   - When focused, change the border color of inputs and textareas to blue (`#007bff`) and remove the outline for a cleaner look.\n   - Style the submit button with a background color of blue (`#007bff`), white text, no border, and padding of 12px. Add a border-radius of 4px, a font-size of 16px, and smooth transitions on background color and transform properties.\n   - On hover, change the background color to a darker shade of blue (`#0056b3`) and apply a scale transform (`scale(1.05)`) to slightly enlarge the button.\n",
                "codeEditor": {
                  "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <title>Advanced CSS Styling</title>\n</head>\n<body>\n    <h1>Advanced CSS Styling</h1>\n\n    <!-- Table -->\n    <table class=\"complex-table\">\n        <thead>\n            <tr>\n                <th>Product</th>\n                <th>Price</th>\n                <th>Stock</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Product A</td>\n                <td>$50</td>\n                <td>In Stock</td>\n            </tr>\n            <tr>\n                <td>Product B</td>\n                <td>$75</td>\n                <td>Out of Stock</td>\n            </tr>\n            <tr>\n                <td>Product C</td>\n                <td>$100</td>\n                <td>In Stock</td>\n            </tr>\n        </tbody>\n    </table>\n\n    <!-- List -->\n    <ul class=\"icon-list\">\n        <li><span class=\"icon\">⭐</span> High Priority</li>\n        <li><span class=\"icon\">🔔</span> Notification</li>\n        <li><span class=\"icon\">✔️</span> Completed</li>\n    </ul>\n\n    <!-- Form -->\n    <form class=\"styled-form\">\n        <label for=\"email\">Email Address:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"example@example.com\" required />\n\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" rows=\"4\" placeholder=\"Your message here...\" required></textarea>\n\n        <button type=\"submit\" class=\"btn\">Send</button>\n    </form>\n</body>\n</html>",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "",
                    "output": "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /><link rel=\"stylesheet\" href=\"styles.css\" /><title>Advanced CSS Styling</title></head><body><h1>Advanced CSS Styling</h1><table class=\"complex-table\"><thead><tr><th>Product</th><th>Price</th><th>Stock</th></tr></thead><tbody><tr><td>Product A</td><td>$50</td><td>In Stock</td></tr><tr><td>Product B</td><td>$75</td><td>Out of Stock</td></tr><tr><td>Product C</td><td>$100</td><td>In Stock</td></tr></tbody></table><ul class=\"icon-list\"><li><span class=\"icon\">⭐</span> High Priority</li><li><span class=\"icon\">🔔</span> Notification</li><li><span class=\"icon\">✔️</span> Completed</li></ul><form class=\"styled-form\"><label for=\"email\">Email Address:</label><input type=\"email\" id=\"email\" name=\"email\" placeholder=\"example@example.com\" required /><label for=\"message\">Message:</label><textarea id=\"message\" name=\"message\" rows=\"4\" placeholder=\"Your message here...\" required></textarea><button type=\"submit\" class=\"btn\">Send</button></form></body></html>",
                    "required": [
                      "body { font-family: Arial, sans-serif; margin: 20px; background-color: #f8f9fa; }",
                      ".complex-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }",
                      ".complex-table th, .complex-table td { border: 1px solid #ddd; padding: 12px; text-align: left; }",
                      ".complex-table th { background-color: #343a40; color: white; }",
                      ".complex-table tr:nth-child(even) { background-color: #f2f2f2; }",
                      ".complex-table tr:hover { background-color: #e9ecef; }",
                      ".icon-list { list-style: none; padding-left: 0; }",
                      ".icon-list li { font-size: 18px; margin-bottom: 10px; display: flex; align-items: center; }",
                      ".icon-list li .icon { font-size: 24px; margin-right: 10px; }",
                      ".styled-form { max-width: 500px; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); }",
                      ".styled-form label { display: block; margin-bottom: 8px; font-weight: bold; }",
                      ".styled-form input, .styled-form textarea { width: 100%; padding: 10px; margin-bottom: 12px; border: 1px solid #ced4da; border-radius: 4px; }",
                      ".styled-form input:focus, .styled-form textarea:focus { border-color: #007bff; outline: none; }",
                      ".styled-form button { background-color: #007bff; color: white; border: none; padding: 12px; border-radius: 4px; font-size: 16px; transition: background-color 0.3s, transform 0.3s; }",
                      ".styled-form button:hover { background-color: #0056b3; transform: scale(1.05); }"
                    ],
                    "isHidden": false
                  }
                ],
                "locked": true,
                "completed": false
              }
              ],         
                  "totalPoints": 0,
                  "locked": true
                  
                }
              ],
              "locked": false
            }
          ]
        }