{
  "courses": [
    {
      "title": "JavaScript",
      "lessons": [
        {
          "title": "Lesson 1: JS Introduction",
          "documents": [
            {
              "title": "JS Introduction?",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript is a versatile, high-level programming language that is widely supported across all major operating systems."
                },
                {
                  "type": "sentence",
                  "text": "To run JavaScript code, your system should have Node.js installed. Alternatively, you can use our free online editor to execute JavaScript directly in your browser without any installation."
                },
                {
                  "type": "sentence",
                  "text": "For those who prefer to install JavaScript on your computer, this guide will walk you through the installation process on Windows, macOS, and Linux (Ubuntu)."
                },
                {
                  "type": "sentence",
                  "text": "Install JavaScript on Windows: To install JavaScript on your Windows, just follow these steps:"
                },
                {
                  "type": "sentence",
                  "text": "Step 1: Install VS Code"
                },
                {
                  "type": "sentence",
                  "text": "Go to the VS Code Official website and download the Windows installer. Once the download is complete, run the installer and follow the installation process. Click Finish to complete the installation process."
                },
                {
                  "type": "sentence",
                  "text": "Step 2: Download the Node File"
                },
                {
                  "type": "sentence",
                  "text": "Go to the official Node website and download the Node LTS version."
                },
                {
                  "type": "sentence",
                  "text": "Step 3: Run the Installer"
                },
                {
                  "type": "sentence",
                  "text": "Now, go to your download folder and run the msi file you just downloaded. Depending on your security settings, you might be prompted to allow access. Just click on Next. Simply allow it and proceed. Then you will come across the install part. Simply click on install, Node will be successfully installed in your device."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "console.log(\"Hello World\")"
                },
                {
                  "type": "sentence",
                  "text": "Step 4: Verify your installation"
                },
                {
                  "type": "sentence",
                  "text": "After the installation is complete, you can verify whether JavaScript is installed by using the following command in the command prompt: node --version. Note: The version number might differ from the one above, depending on your installed version. Now, you are all set to run JavaScript programs on your device."
                },
                {
                  "type": "sentence",
                  "text": "Run Your First JavaScript Program: First open VS Code, click on the File in the top menu and then select New File. Then, save this file with a .js extension by clicking on File again, then Save As, and type your filename ending in .js. (Here, we are saving it as helloWorld.js)."
                },
                {
                  "type": "sentence",
                  "text": "Before you start coding, make sure the extension Code Runner is installed in VS Code. Open VS Code and click on Extensions on the left sidebar. Then, search for the Code Runner and click on install."
                },
                {
                  "type": "sentence",
                  "text": "Now, write the following code into your helloWorld.js file: console.log(\"Hello World\")."
                },
                {
                  "type": "sentence",
                  "text": "Then click on the run button on the top right side of your screen. You should see Hello World! printed to the output."
                },
                {
                  "type": "sentence",
                  "text": "Now that you have set everything up to run JavaScript programs on your computer, you'll be learning how the basic program works in JavaScript in the next tutorial."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Variables and Constants",
              "content": [
                {
                  "type": "sentence",
                  "text": "A JavaScript variable is a container for storing data."
                },
                {
                  "type": "snippet",

                  "code": "let num = 5;"
                },
                {
                  "type": "sentence",
                  "text": "Here, num is a variable that stores the number 5."
                },
                {
                  "type": "sentence",
                  "text": "Declare Variables in JavaScript: In JavaScript, we use the var or let keywords to declare variables."
                },
                {
                  "type": "snippet",
                  "code": "var age;\nlet name;"
                },
                {
                  "type": "sentence",
                  "text": "Here, age and name are variables."
                },
                {
                  "type": "sentence",
                  "text": "What is the difference between var and let? Both var and let are used to declare variables. However, there are some differences between them."
                },
                {
                  "type": "sentence",
                  "text": "var is used in older versions of JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "Variables created with var are function-scoped, meaning they can be accessed anywhere within the function they were defined in."
                },
                {
                  "type": "snippet",

                  "code": "var x;"
                },
                {
                  "type": "sentence",
                  "text": "let is the new way of declaring variables, starting with ES6 (ES2015)."
                },
                {
                  "type": "sentence",
                  "text": "Variables declared with let are block-scoped, meaning they can only be accessed within the block where they were declared."
                },
                {
                  "type": "snippet",

                  "code": "let y;"
                },
                {
                  "type": "sentence",
                  "text": "To learn more, visit JavaScript let Vs var."
                },
                {
                  "type": "sentence",
                  "text": "Note: It is recommended we use let instead of var. However, there are a few browsers that do not support let. To learn more, visit JavaScript let browser support."
                },
                {
                  "type": "sentence",
                  "text": "Initialize Variables in JavaScript: We use the assignment operator = to assign a value to a variable."
                },
                {
                  "type": "snippet",

                  "code": "// declare variable num\nlet num;\n\n// assign 5 to num\nnum = 5;"
                },
                {
                  "type": "sentence",
                  "text": "Here, 5 is assigned to the variable num."
                },
                {
                  "type": "sentence",
                  "text": "You can also initialize variables during its declaration."
                },
                {
                  "type": "snippet",

                  "code": "// declare variable num1 and assign 5 to it\nlet num1 = 5;\n\n// declare variable num2 and assign 6 to it\nlet num2 = 6;"
                },
                {
                  "type": "sentence",
                  "text": "Declare multiple variables in a single statement. In JavaScript, it's possible to declare multiple variables in a single statement."
                },
                {
                  "type": "snippet",

                  "code": "// declare variables num1, num2, and num3\n// assign values 5, 6, and 7 respectively\nlet num1 = 5, num2 = 6, num3 = 7;"
                },
                {
                  "type": "sentence",
                  "text": "Here, we have declared and assigned values to three variables in a single line:"
                },
                {
                  "type": "sentence",
                  "text": "The value assigned to num1 is 5."
                },
                {
                  "type": "sentence",
                  "text": "The value assigned to num2 is 6."
                },
                {
                  "type": "sentence",
                  "text": "The value assigned to num3 is 7."
                },
                {
                  "type": "sentence",
                  "text": "Use a variable without initializing it."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// declare variable num\nlet num;\n\n// print num\nconsole.log(num);"
                },
                {
                  "type": "sentence",
                  "text": "Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "Here, we have declared a variable named num. However, since it does not contain any value, its value is undefined."
                },
                {
                  "type": "sentence",
                  "text": "To learn more about undefined, visit JavaScript null and undefined."
                },
                {
                  "type": "sentence",
                  "text": "Change the Value of Variables: The value of a variable may vary. Hence, the name variable."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// assign 5 to variable score\nlet score = 5;\nconsole.log(score); // 5\n\n// change the value of score to 3\nscore = 3;\nconsole.log(score); // 3"
                },
                {
                  "type": "sentence",
                  "text": "Here, the value of the score variable is changed from 5 to 3 when we assign a new value to it."
                },
                {
                  "type": "sentence",
                  "text": "Rules for Naming JavaScript Variables: Variable names must start with a letter, an underscore _, or the dollar sign $. For example:"
                },
                {
                  "type": "snippet",

                  "code": "// valid\nlet message = \"hello\";\nlet _message = \"hello\";\nlet $message = \"hello\";"
                },
                {
                  "type": "sentence",
                  "text": "Variables cannot start with numbers. For example:"
                },
                {
                  "type": "snippet",

                  "code": "// invalid\nlet 1message = \"hello\"; // this gives an error"
                },
                {
                  "type": "sentence",
                  "text": "Variable names are case-sensitive. So age and Age are different variables. For example:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let age = 23;\nlet Age = 20;\n\nconsole.log(age); // 23\nconsole.log(Age); // 20"
                },
                {
                  "type": "sentence",
                  "text": "Variable names cannot be keywords (special words reserved for specific purposes in JavaScript such as if, else, let, var, etc.). For example:"
                },
                {
                  "type": "snippet",

                  "code": "//invalid\nlet new = 5; // Error! new is a keyword"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Constants: A constant is a type of variable whose value cannot be changed."
                },
                {
                  "type": "snippet",

                  "code": "// assign 5 to num \nconst num = 5;"
                },
                {
                  "type": "sentence",
                  "text": "Once a constant is initialized, we cannot change its value."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// assign 5 to num\nconst num = 5;\n\n// assign 10 to num\nnum = 10;\nconsole.log(num) // Error! constant cannot be changed"
                },
                {
                  "type": "sentence",
                  "text": "Always Initialize a Constant During Declaration: If you do not initialize a constant at the time of declaration, it throws an error."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// Error! Missing initializer in const declaration\nconst x;\n\n// attempt to initialize constant after declaration\nx = 5;\n\nconsole.log(x)"
                },
                {
                  "type": "sentence",
                  "text": "Note: If you are sure that the value of a variable won't change throughout the program, we recommend you use const."
                },
                {
                  "type": "sentence",
                  "text": "However, there are a few browsers that do not support const. Visit JavaScript const browser support to learn more."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript console.log()",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, the console.log() method displays messages or variables in the browser's console."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of console.log(). You can read the rest of the tutorial for more details."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let message = \"Hello, JavaScript!\";\nconsole.log(message);"
                },
                {
                  "type": "sentence",
                  "text": "Output: Hello, JavaScript!"
                },
                {
                  "type": "sentence",
                  "text": "When we run the above code, Hello, JavaScript! is printed on the console."
                },
                {
                  "type": "sentence",
                  "text": "Syntax of JavaScript console.log()"
                },
                {
                  "type": "snippet",

                  "code": "console.log(message);"
                },
                {
                  "type": "sentence",
                  "text": "Here, message is a value or a variable whose value is to be printed to the console."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: JavaScript console.log() Method"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "console.log(\"Good Morning!\");\nconsole.log(2000);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "sentence",
                  "text": "Good Morning!"
                },
                {
                  "type": "sentence",
                  "text": "2000"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "console.log(\"Good Morning!\") prints the string \"Good Morning!\" to the console."
                },
                {
                  "type": "sentence",
                  "text": "console.log(2000) prints the number 2000 to the console."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Print Values Stored in Variables"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// store value in greet variable\nconst greet = \"Hello\";\n\n// print the value of greet variable\nconsole.log(greet);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "sentence",
                  "text": "Hello"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we have used console.log() to print the value of the greet variable, which is set to the string \"Hello\"."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Data Types",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript has 8 basic data types:"
                },
                {
                  "type": "sentence",
                  "text": "1. String: Textual data. Example: 'hello', \"world\""
                },
                {
                  "type": "sentence",
                  "text": "2. Number: Integers or floating-point. Example: 3, 3.14"
                },
                {
                  "type": "sentence",
                  "text": "3. BigInt: Large integers. Example: 900719925124740999n"
                },
                {
                  "type": "sentence",
                  "text": "4. Boolean: true or false"
                },
                {
                  "type": "sentence",
                  "text": "5. undefined: Variable declared but not initialized"
                },
                {
                  "type": "sentence",
                  "text": "6. null: Intentional absence of any object value"
                },
                {
                  "type": "sentence",
                  "text": "7. Symbol: Unique identifiers"
                },
                {
                  "type": "sentence",
                  "text": "8. Object: Key-value pairs"
                },
                {
                  "type": "sentence",
                  "text": "Examples of each data type:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// String\nlet str = \"Hello\";\nconsole.log(typeof str);  // string\n\n// Number\nlet num = 5;\nconsole.log(typeof num);  // number\n\n// BigInt\nlet bigInt = 1234567890123456789012345678901234567890n;\nconsole.log(typeof bigInt);  // bigint\n\n// Boolean\nlet bool = true;\nconsole.log(typeof bool);  // boolean\n\n// undefined\nlet undefinedVar;\nconsole.log(typeof undefinedVar);  // undefined\n\n// null\nlet nullVar = null;\nconsole.log(typeof nullVar);  // object (this is a known bug)\n\n// Symbol\nlet sym = Symbol(\"id\");\nconsole.log(typeof sym);  // symbol\n\n// Object\nlet obj = {name: \"John\", age: 30};\nconsole.log(typeof obj);  // object"
                },
                {
                  "type": "sentence",
                  "text": "Note: JavaScript is dynamically typed, meaning variables can hold different types of data at different times."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let x = 5;       // Number\nx = \"John\";   // Now x is a String\nconsole.log(typeof x);  // string"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Operators",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript operators are special symbols that perform operations on one or more operands (values)."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "2 + 3;  // 5"
                },
                {
                  "type": "sentence",
                  "text": "Here, we used the + operator to add the operands 2 and 3."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Operator Types:"
                },
                {
                  "type": "sentence",
                  "text": "1. Arithmetic Operators: +, -, *, /, %, ++, --, **"
                },
                {
                  "type": "sentence",
                  "text": "2. Assignment Operators: =, +=, -=, *=, /=, %=, **="
                },
                {
                  "type": "sentence",
                  "text": "3. Comparison Operators: ==, !=, >, <, >=, <=, ===, !=="
                },
                {
                  "type": "sentence",
                  "text": "4. Logical Operators: &&, ||, !"
                },
                {
                  "type": "sentence",
                  "text": "5. Bitwise Operators: &, |, ^, ~, <<, >>, >>>"
                },
                {
                  "type": "sentence",
                  "text": "6. String Operator: + (for concatenation)"
                },
                {
                  "type": "sentence",
                  "text": "7. Other Operators: , (comma), ?: (ternary), typeof, instanceof, void"
                },
                {
                  "type": "sentence",
                  "text": "Examples:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// Arithmetic\nlet x = 5;\nconsole.log(x + 3);  // 8\nconsole.log(x ** 2);  // 25"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// Assignment\nx += 5;  // x = x + 5\nconsole.log(x);  // 10"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// Comparison\nconsole.log(3 == '3');  // true\nconsole.log(3 === '3');  // false"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// Logical\nconsole.log((x < 15) && (x > 5));  // true"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// String concatenation\nlet str1 = 'Hello', str2 = 'World';\nconsole.log(str1 + ' ' + str2);  // 'Hello World'"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// Ternary\nlet result = (x > 5) ? 'Greater' : 'Less or Equal';\nconsole.log(result);  // 'Greater'"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Comments",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript comments are annotations in the code that are ignored by the compiler."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "// display \"Programiz\" to the screen\nconsole.log(\"Programiz\");\n\n// Output:\n// Programiz"
                },
                {
                  "type": "sentence",
                  "text": "Types of JavaScript Comments:"
                },
                {
                  "type": "sentence",
                  "text": "1. Single-Line Comments: Start with //"
                },
                {
                  "type": "sentence",
                  "text": "2. Multiline Comments: Start with /* and end with */"
                },
                {
                  "type": "sentence",
                  "text": "Single Line Comments Example:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "name = \"Jack\";\n\n// display name on the console\nconsole.log(\"Hello \" + name);\n\n// You can also use comments at the end of a line\nconsole.log(\"Hello \" + name);  // display name on the console"
                },
                {
                  "type": "sentence",
                  "text": "Multiline Comments Example:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "/* This is a multiline comment.\nIt can span several lines.\n*/\n\nlet numberOfStudents = 50;\nconsole.log(numberOfStudents);"
                },
                {
                  "type": "sentence",
                  "text": "Using Comments to Remove Unwanted Code:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "console.log(\"Welcome to JavaScript programming.\");\n// console.log(\"JavaScript is fun!\");"
                },
                {
                  "type": "sentence",
                  "text": "Best Practices:"
                },
                {
                  "type": "sentence",
                  "text": "1. Use comments to explain why you did something, not how."
                },
                {
                  "type": "sentence",
                  "text": "2. Don't use comments to explain poorly written code. Write clear, self-explanatory code instead."
                },
                {
                  "type": "sentence",
                  "text": "3. Use the comment shortcut in your code editor: Ctrl + / (Windows) or Cmd + / (Mac)."
                }
              ],
              "locked": true
            },
            {
              "title": "JS Type Convertions",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In programming, type conversion is the process of converting data of one type to another. For example, converting string data to number."
                },
                {
                  "type": "sentence",
                  "text": "There are two types of type conversion in JavaScript:"
                },
                {
                  "type": "sentence",
                  "text": "Implicit Conversion - Automatic type conversion."
                },
                {
                  "type": "sentence",
                  "text": "Explicit Conversion - Manual type conversion."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Implicit Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In certain situations, JavaScript automatically converts data of one type to another (to the right type). This is known as implicit conversion. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// numeric string used with + gives string type\nlet result;\n\n// convert number to string\nresult = \"3\" + 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"3\" + true;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"3\" + null;\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "plaintext",
                  "code": "32 - string\n3true - string\n3null - string"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we performed implicit type conversion using the + operator with a string and another data type."
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + 2 - Converts the number 2 to string and joins it to \"3\", resulting in the string \"32\"."
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + true - Converts the boolean true to string and joins it to \"3\", resulting in the string \"3true\"."
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + null - Converts null to string and joins it to \"3\", resulting in the string \"3null\"."
                },
                {
                  "type": "sentence",
                  "text": "Note: The typeof operator gives the data type of the variable."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Explicit Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In explicit type conversion, you manually convert one type of data into another using built-in functions. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let result;\n\n// convert string to number\nresult = Number(\"5\");\nconsole.log(result, \"-\", typeof(result));\n\n// convert boolean to string\nresult = String(true);\nconsole.log(result, \"-\", typeof(result));\n\n// convert number to boolean\nresult = Boolean(0);\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "plaintext",
                  "code": "5 - number\ntrue - string\nfalse - boolean"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "Number(\"5\") changes the string \"5\" into the number 5."
                },
                {
                  "type": "sentence",
                  "text": "String(true) turns the boolean true into the string \"true\"."
                },
                {
                  "type": "sentence",
                  "text": "Boolean(0) converts the number 0 to the boolean false because 0 is considered a false value in JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "More on JavaScript Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "Implicit Conversion to Number"
                },
                {
                  "type": "sentence",
                  "text": "When you use arithmetic operators like -, *, or / with numeric strings, JavaScript automatically changes those strings into numbers."
                },
                {
                  "type": "sentence",
                  "text": "Let's look at an example."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// numeric string used with - , / , *\n// results in number type\n\nlet result;\n\nresult = \"4\" - \"2\";\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" - 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" * 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" / 2;\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "plaintext",
                  "code": "2 - number\n2 - number\n8 - number\n2 - number"
                },
                {
                  "type": "sentence",
                  "text": "Rules for Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "Understanding the rules for type conversion is crucial for avoiding unexpected results in your JavaScript code."
                },
                {
                  "type": "sentence",
                  "text": "Here are some key points:"
            },
                {
                  "type": "sentence",
                  "text": "Operations involving binary + will convert numbers to strings in the case of string and number concatenation."
                },
                {
                  "type": "sentence",
                  "text": "Logical operations convert operands to boolean values."
                },
                {
                  "type": "sentence",
                  "text": "When subtracting a string from another string, JavaScript attempts to convert both strings to numbers."
                },
                {
                  "type": "sentence",
                  "text": "When you change an object's type, some data might get lost."
                }
              ],
              "locked": true
            }
          ],
          "quiz": [
            {
              "question": "What is JavaScript?",
              "options": [
                "A low-level programming language",
                "A high-level programming language",
                "A database management system",
                "A markup language"
              ],
              "correctAnswer": "A high-level programming language",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which tool is used to run JavaScript code on your local machine?",
              "options": ["Node.js", "React", "Angular", "Django"],
              "correctAnswer": "Node.js",
              "points": 2,
              "locked": true
            },
            {
              "question": "What command verifies if Node.js is installed correctly?",
              "options": [
                "node --version",
                "node --check",
                "npm --version",
                "node --status"
              ],
              "correctAnswer": "node --version",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you declare a variable in JavaScript using the modern ES6 syntax?",
              "options": ["var", "const", "let", "dynamic"],
              "correctAnswer": "let",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of `console.log(num)` if `let num;` is declared and not initialized?",
              "options": ["null", "0", "undefined", "Error"],
              "correctAnswer": "undefined",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which keyword is used to declare a constant in JavaScript?",
              "options": ["const", "let", "var", "final"],
              "correctAnswer": "const",
              "points": 2,
              "locked": true
            },
            {
              "question": "Can the value of a constant declared with `const` be changed?",
              "options": [
                "Yes",
                "No",
                "Only if reassigned",
                "Only in strict mode"
              ],
              "correctAnswer": "No",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which data type represents textual data in JavaScript?",
              "options": ["Number", "Boolean", "String", "Object"],
              "correctAnswer": "String",
              "points": 2,
              "locked": true
            },
            {
              "question": "What symbol is used to represent a BigInt in JavaScript?",
              "options": ["b", "n", "N", "x"],
              "correctAnswer": "n",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the result of `5 / 0` in JavaScript?",
              "options": ["0", "Infinity", "NaN", "Error"],
              "correctAnswer": "Infinity",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you initialize a variable with a value in JavaScript?",
              "options": [
                "let variable = value;",
                "variable = value;",
                "initialize variable with value;",
                "var variable value;"
              ],
              "correctAnswer": "let variable = value;",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which operator is used for addition in JavaScript?",
              "options": ["+", "-", "*", "/"],
              "correctAnswer": "+",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the `===` operator do in JavaScript?",
              "options": [
                "Checks for equality with type conversion",
                "Checks for strict equality without type conversion",
                "Assigns a value",
                "Compares two values for less than"
              ],
              "correctAnswer": "Checks for strict equality without type conversion",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which logical operator returns true if either of the conditions is true?",
              "options": ["&&", "||", "!", "??"],
              "correctAnswer": "||",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the result of `~5` in JavaScript?",
              "options": ["5", "-6", "0", "-5", "Error"],
              "correctAnswer": "-6",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the `%` operator do in JavaScript?",
              "options": [
                "Division",
                "Multiplication",
                "Remainder",
                "Exponentiation"
              ],
              "correctAnswer": "Remainder",
              "points": 2,
              "locked": true
            },
            {
              "question": "What type of operator is `**` in JavaScript?",
              "options": ["Arithmetic", "Comparison", "Logical", "Bitwise"],
              "correctAnswer": "Arithmetic",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which operator is used to perform a bitwise AND operation?",
              "options": ["&", "|", "^", "~"],
              "correctAnswer": "&",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you declare multiple variables in a single statement in JavaScript?",
              "options": [
                "let a = 1, b = 2;",
                "var a = 1; b = 2;",
                "const a = 1 and b = 2;",
                "let a: 1, b: 2;"
              ],
              "correctAnswer": "let a = 1, b = 2;",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which data type in JavaScript can represent a unique and immutable value?",
              "options": ["Symbol", "Number", "String", "Object"],
              "correctAnswer": "Symbol",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "Printing to the Console",
              "description": "Learn how to use `console.log` to print messages and values to the console.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write JavaScript code to print text and numbers to the console using `console.log`.\n\n1. Use `console.log` to print the message `'Hello, World!'`.\n\n2. Print the result of the addition of two numbers, 5 and 3, using `console.log`.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": "// Print a message to the console\n\n\n// Print the result of 5 + 3\n"
              },
              "testCases": [
                {
                  "input": "console.log('Hello, World!');\nconsole.log(5 + 3);",
                  "output": "Hello, World!\n8",
                  "required": [
                    "console.log('Hello, World!');",
                    "console.log(5 + 3);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Use `console.log` to print the message `'Hello, World!'`.",
                    "Use `console.log` to print the result of 5 + 3."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Variable Declarations",
              "description": "Understand the differences between `var`, `let`, and `const` in JavaScript by declaring variables and observing their behaviors.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "You are tasked with writing JavaScript code that demonstrates the differences between `var`, `let`, and `const`. The code should declare a variable with each keyword and print their values to the console.\n\n1. Declare a variable using `var`:\n   - Create a variable named `name` and assign it the value `'Alice'`.\n   - Print the value of `name` to the console: 'Name using var: Alice'.\n\n2. Declare a variable using `let`:\n   - Create a variable named `age` and assign it the value `25`.\n   - Print the value of `age` to the console:'Age using let: 25'\n\n3. Declare a constant using `const`:\n   - Create a constant named `country` and assign it the value `'USA'`.\n   - Print the value of `country` to the console: 'Country using const: USA'\n\nEnsure that the code executes without any errors and that the variables hold the correct values throughout.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "var name = 'Alice';\nlet age = 25;\nconst country = 'USA';\nconsole.log('Name using var:', name);\nconsole.log('Age using let:', age);\nconsole.log('Country using const:', country);",
                  "output": "Name using var: Alice\nAge using let: 25\nCountry using const: USA",
                  "required": [
                    "var name = \"Alice\";",
                    "let age = 25;",
                    "const country = \"USA\";",
                    "console.log(\"Name using var:\", name);",
                    "console.log(\"Age using let:\", age);",
                    "console.log(\"Country using const:\", country);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare a variable named 'name' using var and assign it the value 'Alice'.",
                    "Declare a variable named 'age' using let and assign it the value 25.",
                    "Declare a constant named 'country' using const and assign it the value 'USA'.",
                    "Print the value of 'name' using console.log, output should look like this :'Name using var: Alice'.",
                    "Print the value of 'age' using console, log output should look like this :'Age using let: 25'.",
                    "Print the value of 'country' using console.log, output should look like this :'Country using const: USA'."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Data Types and Operators",
              "description": "Learn about basic data types and arithmetic operators in JavaScript by declaring variables and performing operations.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "You are tasked with writing JavaScript code that demonstrates the usage of basic data types (`String`, `Number`, `Boolean`) and arithmetic operators (`+`, `-`, `*`, `/`). The code should declare variables for each data type, perform arithmetic operations, and print the results to the console.\n\n1. tring Data Type:\n   - Create a variable named `greeting` and assign it the value `'Hello, World!'`.\n   - Print the value of `greeting` to the console.\n\n2. Number Data Type:\n   - Create a variable named `year` and assign it the value `2024`.\n   - Print the value of `year` to the console.\n\n3. Boolean Data Type:\n   - Create a variable named `isStudent` and assign it the value `true`.\n   - Print the value of `isStudent` to the console.\n\n4. Using Arithmetic Operators:\n   - Create a variable named `sum` that stores the result of adding `10 + 20`.\n   - Print the value of `sum` to the console.\n   - Create a variable named `difference` that stores the result of subtracting `30 - 10`.\n   - Print the value of `difference` to the console.\n   - Create a variable named `product` that stores the result of multiplying `5 * 4`.\n   - Print the value of `product` to the console.\n   - Create a variable named `quotient` that stores the result of dividing `40 / 5`.\n   - Print the value of `quotient` to the console.\n\nEnsure that the code executes without any errors and that the variables hold the correct values throughout.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let greeting = \"Hello, World!\";\nlet year = 2024;\nlet isStudent = true;\nlet sum = 10 + 20;\nlet difference = 30 - 10;\nlet product = 5 * 4;\nlet quotient = 40 / 5;\nconsole.log(\"Greeting:\", greeting);\nconsole.log(\"Year:\", year);\nconsole.log(\"Is Student:\", isStudent);\nconsole.log(\"Sum:\", sum);\nconsole.log(\"Difference:\", difference);\nconsole.log(\"Product:\", product);\nconsole.log(\"Quotient:\", quotient);",
                  "output": "Greeting: Hello, World!\nYear: 2024\nIs Student: true\nSum: 30\nDifference: 20\nProduct: 20\nQuotient: 8",
                  "required": [
                    "let greeting = \"Hello, World!\";",
                    "let year = 2024;",
                    "let isStudent = true;",
                    "let sum = 10 + 20;",
                    "let difference = 30 - 10;",
                    "let product = 5 * 4;",
                    "let quotient = 40 / 5;",
                    "console.log(\"Greeting:\", greeting);",
                    "console.log(\"Year:\", year);",
                    "console.log(\"Is Student:\", isStudent);",
                    "console.log(\"Sum:\", sum);",
                    "console.log(\"Difference:\", difference);",
                    "console.log(\"Product:\", product);",
                    "console.log(\"Quotient:\", quotient);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare a variable named 'greeting' using let and assign it the value 'Hello, World!'.",
                    "Declare a variable named 'year' using let and assign it the value 2024.",
                    "Declare a variable named 'isStudent' using let and assign it the value true.",
                    "Declare a variable named 'sum' and assign it the result of 10 + 20.",
                    "Declare a variable named 'difference' and assign it the result of 30 - 10.",
                    "Declare a variable named 'product' and assign it the result of 5 * 4.",
                    "Declare a variable named 'quotient' and assign it the result of 40 / 5.",
                    "Print the value of 'greeting' to the console. Output: Greeting: Hello, World!",
                    "Print the value of 'year' to the console. Output: Year: 2024",
                    "Print the value of 'isStudent' to the console. Output: Is Student: true",
                    "Print the value of 'sum' to the console. Output: Sum: 30",
                    "Print the value of 'difference' to the console. Output: Difference: 20",
                    "Print the value of 'product' to the console. Output: Product: 20",
                    "Print the value of 'quotient' to the console. Output: Quotient: 8"
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Comments, Type Conversion, and Variable Operations",
              "description": "Learn how to use single-line and multi-line comments in JavaScript, perform type conversion, and carry out arithmetic operations with variables.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "In this activity, you will write JavaScript code that demonstrates the use of comments, type conversion, and variable operations. You will use both single-line and multi-line comments, convert a string to a number, perform an arithmetic operation, and convert a number to a string.\n\n1. Single-line Comments:\n   - Use single-line comments to explain variable declarations.\n\n2. Variable Declaration and Type:\n   - Declare a variable `a` with a string value of `'10'` and a variable `b` with a number value of `5`.\n\n3. Multi-line Comments:\n   - Use a multi-line comment to describe the process of converting a string to a number and performing an addition operation.\n\n4. Type Conversion and Arithmetic Operation:\n   - Convert the string `a` to a number using `parseInt()` and store the result in a new variable `convertedA`.\n   - Add `convertedA` and `b`, storing the result in a variable `sum`.\n   - Print the value of `sum` to the console with the message `'Sum after conversion:'`.\n\n5. Converting Number to String:\n   - Convert the number `b` to a string using `toString()` and store the result in `numberToString`.\n   - Print the value of `numberToString` to the console with the message `'Converted Number to String:'`.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let a = \"10\";\nlet b = 5;\nlet convertedA = parseInt(a);\nlet sum = convertedA + b;\nconsole.log(\"Sum after conversion:\", sum);\nlet numberToString = b.toString();\nconsole.log(\"Converted Number to String:\", numberToString);",
                  "output": "Sum after conversion: 15\nConverted Number to String: 5",
                  "required": [
                    "let a = \"10\";",
                    "let b = 5;",
                    "let convertedA = parseInt(a);",
                    "let sum = convertedA + b;",
                    "console.log(\"Sum after conversion:\", sum);",
                    "let numberToString = b.toString();",
                    "console.log(\"Converted Number to String:\", numberToString);"
                  ],
                  "testCaseSentences": [
                    "Declare a let variable 'a' with a string value of '10'.",
                    "Declare a let variable 'b' with a number value of 5.",
                    "Convert 'a' to a number using parseInt() and store it in a let variable called 'convertedA'.",
                    "Add 'convertedA' and 'b' and store the result in let variable called 'sum'.",
                    "Print the value of 'sum' to the console.",
                    "Convert the number 'b' to a string using toString() and store it in a let variable called 'numberToString'.",
                    "Print the value of 'numberToString' to the console."
                  ],
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            }
          
          ],
          "totalPoints": 0,
          "locked": true,
          "badges":"JS Start"
        },
        {
          "title": "Lesson 2: JS Control Flow",
          "documents": [
            {
              "title": "JS Comparison Operators",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript comparison operators compare two values and return a boolean value (true or false)."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "const a = 3, b = 2;\nconsole.log(a > b);  // true"
                },
                {
                  "type": "sentence",
                  "text": "Commonly Used Comparison Operators:"
                },
                {
                  "type": "sentence",
                  "text": "== (Equal to): 3 == 5 gives false"
                },
                {
                  "type": "sentence",
                  "text": "!= (Not equal to): 3 != 4 gives true"
                },
                {
                  "type": "sentence",
                  "text": "=== (Strictly equal to): 3 === '3' gives false"
                },
                {
                  "type": "sentence",
                  "text": "!== (Strictly not equal to): 3 !== '3' gives true"
                },
                {
                  "type": "sentence",
                  "text": "> (Greater than): 4 > 4 gives false"
                },
                {
                  "type": "sentence",
                  "text": "< (Less than): 3 < 3 gives false"
                },
                {
                  "type": "sentence",
                  "text": ">= (Greater than or equal to): 4 >= 4 gives true"
                },
                {
                  "type": "sentence",
                  "text": "<= (Less than or equal to): 3 <= 3 gives true"
                },
                {
                  "type": "sentence",
                  "text": "Examples:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "console.log(5 == 5);   // true\nconsole.log(2 == \"2\"); // true\nconsole.log(2 === \"2\"); // false\nconsole.log(2 != 3);   // true\nconsole.log(3 > 2);    // true\nconsole.log(3 >= 3);   // true"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Logical Operators:"
                },
                {
                  "type": "sentence",
                  "text": "&& (Logical AND): true if both expressions are true"
                },
                {
                  "type": "sentence",
                  "text": "|| (Logical OR): true if either expression is true"
                },
                {
                  "type": "sentence",
                  "text": "! (Logical NOT): inverts the boolean value"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "console.log((3 < 5) && (2 > 1));  // true\nconsole.log((3 > 5) || (2 > 1));  // true\nconsole.log(!(3 > 5));           // true"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript if...else Statement",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript if...else statement executes or skips a block of code based on a condition."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let score = 45;\n\nif (score >= 50) {\n    console.log(\"You passed the examination.\");\n} else {\n    console.log(\"You failed the examination.\");\n}\n\n// Output: You failed the examination."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript if Statement Syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "if (condition) {\n    // block of code\n}"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript else Statement Syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "if (condition) {\n    // execute if condition is true\n} else {\n    // execute if condition is false\n}"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript else if Statement Syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "if (condition1) {\n    // execute if condition1 is true\n} else if (condition2) {\n    // execute if condition2 is true\n} else {\n    // execute if no condition is true\n}"
                },
                {
                  "type": "sentence",
                  "text": "Example: Multiple Conditions"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let rating = 4;\n\nif (rating <= 2) {\n    console.log(\"Bad rating\");\n} else if (rating >= 4) {\n    console.log(\"Good rating!\");\n} else {\n    console.log(\"Average rating\");\n}\n\n// Output: Good rating!"
                },
                {
                  "type": "sentence",
                  "text": "Nested if...else Statement Example:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let marks = 60;\n\nif (marks >= 40) {\n    if (marks >= 80) {\n        console.log(\"Distinction\");\n    } else {\n        console.log(\"Passed\");\n    }\n} else {\n    console.log(\"Failed\");\n}\n\n// Output: Passed"
                },
                {
                  "type": "sentence",
                  "text": "Note: Avoid excessive nesting of if...else statements to maintain code readability."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Loops",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript provides several types of loops to iterate over code blocks or array elements."
                },
                {
                  "type": "sentence",
                  "text": "1. for loop"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "for (let i = 0; i < 3; i++) {\n    console.log(\"Hello, world!\");\n}\n\n// Output:\n// Hello, world!\n// Hello, world!\n// Hello, world!"
                },
                {
                  "type": "sentence",
                  "text": "for loop syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "for (initialExpression; condition; updateExpression) {\n    // for loop body\n}"
                },
                {
                  "type": "sentence",
                  "text": "Example: Print numbers from 1 to 5"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "for (let i = 1; i <= 5; i++) {\n    console.log(i);\n}\n\n// Output: 1 2 3 4 5"
                },
                {
                  "type": "sentence",
                  "text": "2. while loop"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let i = 1;\nwhile (i <= 3) {\n    console.log(i);\n    i++;\n}\n\n// Output: 1 2 3"
                },
                {
                  "type": "sentence",
                  "text": "while loop syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "while (condition) {\n    // body of loop\n}"
                },
                {
                  "type": "sentence",
                  "text": "3. do...while loop"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let i = 1;\ndo {\n    console.log(i);\n    i++;\n} while (i <= 3);\n\n// Output: 1 2 3"
                },
                {
                  "type": "sentence",
                  "text": "do...while loop syntax:"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "do {\n    // body of loop\n} while (condition);"
                },
                {
                  "type": "sentence",
                  "text": "Example: Sum of positive numbers"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let sum = 0, num = 0;\n\ndo {\n    sum += num;\n    num = parseInt(prompt(\"Enter a number: \"));\n} while (num >= 0);\n\nconsole.log(`The sum is ${sum}`);\n\n// Sample Output:\n// Enter a number: 2\n// Enter a number: 4\n// Enter a number: -3\n// The sum is 6"
                },
                {
                  "type": "sentence",
                  "text": "4. Iterating through an array"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "const fruits = [\"apple\", \"banana\", \"cherry\"];\n\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n\n// Output:\n// apple\n// banana\n// cherry"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Control Flow Statements",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript provides several control flow statements to alter the execution of code."
                },
                {
                  "type": "sentence",
                  "text": "1. break Statement"
                },
                {
                  "type": "sentence",
                  "text": "The break statement terminates the loop immediately when encountered."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "while (true) {\n    let num = Number(prompt(\"Enter a number: \"));\n    if (num === 0) {\n        break;\n    }\n    console.log(num);\n}\n\n// Output:\n// Enter a number: 5\n// 5\n// Enter a number: 0"
                },
                {
                  "type": "sentence",
                  "text": "2. continue Statement"
                },
                {
                  "type": "sentence",
                  "text": "The continue statement skips the current iteration and proceeds to the next one."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "for (let i = 1; i <= 5; i++) {\n    if (i % 2 === 0) {\n        continue;\n    }\n    console.log(i);\n}\n\n// Output:\n// 1\n// 3\n// 5"
                },
                {
                  "type": "sentence",
                  "text": "3. switch Statement"
                },
                {
                  "type": "sentence",
                  "text": "The switch statement executes different code blocks based on different cases."
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let day = 3;\n\nswitch (day) {\n    case 1:\n        console.log(\"Sunday\");\n        break;\n    case 2:\n        console.log(\"Monday\");\n        break;\n    case 3:\n        console.log(\"Tuesday\");\n        break;\n    case 4:\n        console.log(\"Wednesday\");\n        break;\n    case 5:\n        console.log(\"Thursday\");\n        break;\n    case 6:\n        console.log(\"Friday\");\n        break;\n    case 7:\n        console.log(\"Saturday\");\n        break;\n    default:\n        console.log(\"Invalid Day\");\n}\n\n// Output: Tuesday"
                },
                {
                  "type": "sentence",
                  "text": "Example: Simple Calculator Using switch"
                },
                {
                  "type": "snippet",
                  "language": "javascript",
                  "code": "let number1 = 6;\nlet number2 = 3;\nlet operator = '+';\nlet result;\n\nswitch(operator) {\n    case \"+\":\n        result = number1 + number2;\n        break;\n    case \"-\":\n        result = number1 - number2;\n        break;\n    case \"*\":\n        result = number1 * number2;\n        break;\n    case \"/\":\n        result = number1 / number2;\n        break;\n    default:\n        console.log(\"Invalid operator\");\n        break;\n}\n\nconsole.log(`${number1} ${operator} ${number2} = ${result}`);\n\n// Output: 6 + 3 = 9"
                }
              ],
              "locked": true
            }
          ],
          "quiz": [
            {
              "question": "Which operator is used for strict equality comparison in JavaScript?",
              "options": ["==", "===", "!=", "!=="],
              "correctAnswer": "===",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of the following code: `console.log((3 < 5) && (2 > 1));`?",
              "options": ["true", "false", "undefined", "null"],
              "correctAnswer": "true",
              "points": 2,
              "locked": true
            },
            {
              "question": "In an if...else statement, when is the else block executed?",
              "options": [
                "When the if condition is true",
                "When the if condition is false",
                "Always, regardless of the if condition",
                "Never, it's optional"
              ],
              "correctAnswer": "When the if condition is false",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which loop is best suited for iterating over an array in JavaScript?",
              "options": [
                "while loop",
                "do...while loop",
                "for loop",
                "switch statement"
              ],
              "correctAnswer": "for loop",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the break statement do in a loop?",
              "options": [
                "Skips the current iteration",
                "Terminates the loop immediately",
                "Continues to the next iteration",
                "Has no effect on the loop"
              ],
              "correctAnswer": "Terminates the loop immediately",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which statement is used to skip the current iteration in a loop?",
              "options": ["break", "continue", "skip", "return"],
              "correctAnswer": "continue",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the purpose of the switch statement in JavaScript?",
              "options": [
                "To create loops",
                "To define functions",
                "To execute different code blocks based on different cases",
                "To declare variables"
              ],
              "correctAnswer": "To execute different code blocks based on different cases",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which loop executes its body at least once before checking the condition?",
              "options": [
                "for loop",
                "while loop",
                "do...while loop",
                "switch statement"
              ],
              "correctAnswer": "do...while loop",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will the following code output: `console.log(3 !== '3');`?",
              "options": ["true", "false", "undefined", "null"],
              "correctAnswer": "true",
              "points": 2,
              "locked": true
            },
            {
              "question": "In a for loop, which part is the update expression?",
              "options": [
                "for (here; ; )",
                "for ( ; here; )",
                "for ( ; ; here)",
                "None of the above"
              ],
              "correctAnswer": "for ( ; ; here)",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "JavaScript Conditional Statements",
              "description": "Practice using conditional statements in JavaScript to evaluate and respond to different conditions based on variable values.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write JavaScript code to evaluate a number and print whether it is positive, negative, or zero.\n\n1. Variable Declaration:\n   - Declare a variable `number` and initialize it with a value (e.g., `7`).\n\n2. Conditional Statements:\n   - Use an `if` statement to check if the number is greater than 0. If true, print 'The number is positive.'\n   - Use an `else if` statement to check if the number is less than 0. If true, print 'The number is negative.'\n   - Use an `else` statement to cover the case where the number is equal to 0 and print 'The number is zero.'",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let number = 7;\nif (number > 0) {\n    console.log('The number is positive.');\n} else if (number < 0) {\n    console.log('The number is negative.');\n} else {\n    console.log('The number is zero.');\n}",
                  "output": "The number is positive.",
                  "required": [
                    "let number = 7;",
                    "if (number > 0) {",
                    "    console.log('The number is positive.');",
                    "} else if (number < 0) {",
                    "    console.log('The number is negative.');",
                    "} else {",
                    "    console.log('The number is zero.');"
                  ],
                  "testCaseSentences": [
                    "Declare a let variable 'number' with a value of 7.",
                    "Check if the number is greater than 0 using an if statement.",
                    "Print 'The number is positive.' if the condition is true.",
                    "Use an else if statement to check if the number is less than 0.",
                    "Print 'The number is negative.' if the condition is true.",
                    "Use an else statement to handle the number being 0.",
                    "Print 'The number is zero.' if the number equals 0."
                  ],
                  "expectedImage": "/activities/jsacts/2.1.png",
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Loop Control Statements",
              "description": "Practice using `continue` and `break` statements in a loop to control the flow of execution.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write JavaScript code using a `for` loop that demonstrates the use of `continue` and `break` statements to control the execution flow.\n\n1. Looping:\n   - Use a `for` loop to iterate through numbers from `1` to `10`.\n\n2. Using `continue`:\n   - Inside the loop, use a `continue` statement to skip printing the number `5`.\n\n3. Using `break`:\n   - Use a `break` statement to stop the loop when the number `8` is reached.\n\n4. Output:\n   - Print each number except `5`, and stop the loop when reaching `8`.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "for (let i = 1; i <= 10; i++) {\n    if (i === 5) {\n        continue; // Skip the number 5\n    }\n    if (i === 8) {\n        break; // Stop the loop when i is 8\n    }\n    console.log('Number:', i);\n}",
                  "output": "Number: 1\nNumber: 2\nNumber: 3\nNumber: 4\nNumber: 6\nNumber: 7",
                  "required": [
                    "for (let i = 1; i <= 10; i++) {",
                    "    if (i === 5) { continue",

                    "    if (i === 8) { break",

                    "    console.log(\"Number:\", i);"
                  ],
                  "testCaseSentences": [
                    "Use a for loop to iterate through numbers from 1 to 10.",
                    "Skip printing the number 5 using a continue statement.",
                    "Stop the loop when the number reaches 8 using a break statement.",
                    "Print each number except for 5, stopping at 8."
                  ],
                  "expectedImage": "/activities/jsacts/2.2.png",
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript While Loop with Even and Odd Numbers",
              "description": "Practice using a `while` loop to iterate through numbers and determine if they are even or odd.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "In this activity, you will write JavaScript code using a `while` loop to check and print whether numbers from `10` down to `0` are even or odd.\n\n1. Looping:\n   - Use a `while` loop to iterate from `10` to `0`.\n\n2. Checking Even/Odd:\n   - Inside the loop, use the modulus operator (`%`) to determine if the current number is even or odd.\n   - Print the result indicating whether the number is even or odd.\n\n3. Decrementing:\n   - Decrement the counter variable in each iteration of the loop.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let number = 10;\nwhile (number >= 0) {\n    if (number % 2 === 0) {\n        console.log(`${number} is even.`);\n    } else {\n        console.log(`${number} is odd.`);\n    }\n    number--; // Decrement the counter\n}",
                  "output": "10 is even.\n9 is odd.\n8 is even.\n7 is odd.\n6 is even.\n5 is odd.\n4 is even.\n3 is odd.\n2 is even.\n1 is odd.\n0 is even.",
                  "required": [
                    "let number = 10;",
                    "while (number >= 0) {",
                    "    if (number % 2 === 0) {",
                    "        console.log(`${number} is even.`);",
                    "    } else {",
                    "        console.log(`${number} is odd.`);",
                    "    number--;"
                  ],
                  "testCaseSentences": [
                    "Initialize a variable 'number' to 10.",
                    "Use a while loop to check whether the current number is greater than or equal to 0.",
                    "Check if the number is even using the modulus operator.",
                    "Print that the number is even if the condition is true.",
                    "Otherwise,using else statement, print that the number is odd.",
                    "Print that the number is odd.",
                    "Decrement the number in each iteration."
                  ],
                  "expectedImage": "/activities/jsacts/2.3.png",
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Multiplication Using a Loop",
              "description": "Practice using loops and basic arithmetic operations in JavaScript. This activity involves calculating the product of two numbers using a loop.",
              "language": "JavaScriptConsole",
              "difficulty": "hard",
              "problemStatement": "In this activity, you will write JavaScript code to perform multiplication using a loop. The task involves calculating the product of two numbers by repeatedly adding one number to itself.\n\n1. Variable Declaration:\n   - Declare two variables `num1` and `num2` to represent the numbers to be multiplied. Set `num1` to 5 and `num2` to 3.\n\n2. Multiplication Using Loop:\n   - Initialize a variable `result` to 0.\n   - Use a `for` loop to add `num1` to `result`, `num2` times.\n   - After the loop, print the `result` to the console as the product of `num1` and `num2`.\n\n3. Expected Output:\n   - For the given values of `num1` and `num2`, the output should show `Multiplication result: 15`.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let num1 = 5;\nlet num2 = 3;\nlet result = 0;\nfor (let i = 0; i < num2; i++) {\n    result += num1; // Add num1 to result\n}\nconsole.log('Multiplication result:', result);",
                  "output": "Multiplication result: 15",
                  "required": [
                    "let num1 = 5;",
                    "let num2 = 3;",
                    "let result = 0;",
                    "for (let i = 0; i < num2; i++) {",
                    "    result += num1;",
                    "console.log('Multiplication result:', result);"
                  ],
                  "testCaseSentences": [
                    "Declare two variables 'num1' and 'num2' with values 5 and 3 respectively.",
                    "Initialize a result variable to 0.",
                    "Use a for loop to add 'num1' to 'result' for 'num2' times.",
                    "Add the result to num1.",
                    "Print the result as the multiplication of 'num1' and 'num2'."
                  ],
                
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            }
          ],
          "totalPoints": 0,
          "locked": true
        },
        {
          "title": "Lesson 3: JS Functions",
          "documents": [
            {
              "title": "JavaScript Function",
              "content": [
                {
                  "type": "sentence",
                  "text": "A function is a reusable block of code that performs a specific task. A function expression stores a function in a variable."
                },
                {
                  "type": "snippet",
                  "code": "// Function declaration\nfunction greet() {\n    console.log(\"Hello World!\");\n}\n\n// Function expression\nlet displayPI = function() {\n    console.log(\"PI = 3.14\");\n}\n\ngreet();\ndisplayPI();"
                },
                {
                  "type": "sentence",
                  "text": "Functions can accept parameters and return values:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function addNumbers(num1, num2) {\n    return num1 + num2;\n}\n\nlet result = addNumbers(5, 4);\nconsole.log(`Sum: ${result}`);"
                },
                {
                  "type": "sentence",
                  "text": "The return statement terminates the function and specifies the value to be returned."
                },
                {
                  "type": "snippet",
                  "code": "function findSquare(num) {\n    return num * num;\n}\n\nlet square = findSquare(3);\nconsole.log(`Square: ${square}`);"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript provides built-in library functions:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "console.log(Math.sqrt(4));  // Square root\nconsole.log(Math.pow(2, 3));  // Power\nconsole.log(\"hello\".toUpperCase());  // Uppercase"
                },
                {
                  "type": "sentence",
                  "text": "Function expressions allow storing functions in variables:"
                },
                {
                  "type": "snippet",
                  "code": "let square = function(num) {\n    return num * num;\n};\n\nconsole.log(square(5));"
                }
              ],
              "locked": true
            },
            {
              "title": "Variable Scope",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, variable scope determines where a variable can be accessed. There are three types of scope: global, local (function), and block-level."
                },
                {
                  "type": "sentence",
                  "text": "Local (Function) Scope: Variables declared inside a function are only accessible within that function."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function greet() {\n    var message = \"Hello\";\n    console.log(`Local: ${message}`);\n}\n\ngreet();\nconsole.log(`Global: ${message}`);\n\n// Output:\n// Local: Hello\n// ReferenceError: message is not defined"
                },
                {
                  "type": "sentence",
                  "text": "Global Scope: Variables declared outside any function can be accessed from anywhere in the code."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "var message = \"Hello\";\n\nfunction greet() {\n    console.log(`Local: ${message}`);\n}\n\ngreet();\nconsole.log(`Global: ${message}`);\n\n// Output:\n// Local: Hello\n// Global: Hello"
                },
                {
                  "type": "sentence",
                  "text": "Block-Level Scope: Introduced in ES6 with let and const keywords, these variables are only accessible within the block they are defined in."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function display_scopes() {\n    let message = \"local\";\n    if (true) {\n        let message = \"block-level\";\n        console.log(`inner scope: ${message}`);\n    }\n    console.log(`outer scope: ${message}`);\n}\n\ndisplay_scopes();\n\n// Output:\n// inner scope: block-level\n// outer scope: local"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Hoisting",
              "content": [
                {
                  "type": "sentence",
                  "text": "Hoisting is a JavaScript behavior where function or variable declarations are moved to the top of their scope before code execution."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "console.log(test);\nvar test = 5;\n\n// Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "Variable hoisting behavior differs between var, let, and const:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "console.log(varVariable);\nvar varVariable = 'I am var';\n\nconsole.log(letVariable);\nlet letVariable = 'I am let';\n\n// Output:\n// undefined\n// ReferenceError: Cannot access 'letVariable' before initialization"
                },
                {
                  "type": "sentence",
                  "text": "Function hoisting allows calling a function before its declaration:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "greeting();\n\nfunction greeting() {\n  console.log(\"Welcome to JavaScript.\");\n}\n\n// Output: Welcome to JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "Note: Only declarations are hoisted, not initializations. It's best to avoid relying on hoisting for clearer code."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Recursion",
              "content": [
                {
                  "type": "sentence",
                  "text": "Recursion is a programming technique where a function calls itself to solve a problem."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function countdown(count) {\n  console.log(count);\n  if (count > 1) {\n    countdown(count - 1);\n  }\n}\n\ncountdown(5);\n\n// Output:\n// 5\n// 4\n// 3\n// 2\n// 1"
                },
                {
                  "type": "sentence",
                  "text": "A recursive function must have a base case to prevent infinite recursion."
                },
                {
                  "type": "sentence",
                  "text": "Example: Calculating factorial using recursion"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function factorial(num) {\n  if (num > 1) {\n    return num * factorial(num - 1);\n  }\n  return 1;\n}\n\nlet result = factorial(5);\nconsole.log(`The factorial of 5 is ${result}`);\n\n// Output: The factorial of 5 is 120"
                },
                {
                  "type": "sentence",
                  "text": "The recursive process: factorial(5) calls factorial(4), which calls factorial(3), and so on until reaching the base case."
                }
              ],
              "locked": true
            }
          ],
          "quiz": [
            {
              "question": "What is a function in JavaScript?",
              "options": [
                "A block of code that performs a specific task",
                "A way to store variables",
                "A method to handle errors",
                "A type of loop"
              ],
              "correctAnswer": "A block of code that performs a specific task",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the difference between a function declaration and a function expression?",
              "options": [
                "A function declaration can be hoisted, but a function expression cannot",
                "A function expression can be hoisted, but a function declaration cannot",
                "Both can be hoisted",
                "Neither can be hoisted"
              ],
              "correctAnswer": "A function declaration can be hoisted, but a function expression cannot",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you call a function in JavaScript?",
              "options": [
                "By writing the function name followed by parentheses",
                "By using the function keyword",
                "By defining it within curly braces",
                "By assigning it to a variable"
              ],
              "correctAnswer": "By writing the function name followed by parentheses",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the return statement do in a function?",
              "options": [
                "Ends the function execution and specifies a value to be returned",
                "Logs a message to the console",
                "Declares a new variable",
                "Calls another function"
              ],
              "correctAnswer": "Ends the function execution and specifies a value to be returned",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is hoisting in JavaScript?",
              "options": [
                "The behavior of moving declarations to the top of their scope before code execution",
                "The process of converting code into machine language",
                "The technique of optimizing code execution",
                "The method of managing asynchronous operations"
              ],
              "correctAnswer": "The behavior of moving declarations to the top of their scope before code execution",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of the following code snippet? `console.log(test); var test = 5;`",
              "options": ["undefined", "5", "ReferenceError", "SyntaxError"],
              "correctAnswer": "undefined",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which JavaScript function can be used to convert a string to lowercase?",
              "options": [
                "toLowerCase()",
                "toUpperCase()",
                "parseInt()",
                "toString()"
              ],
              "correctAnswer": "toLowerCase()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is recursion in programming?",
              "options": [
                "A function calling itself",
                "A function that returns a value",
                "A method to handle errors",
                "A loop that iterates through arrays"
              ],
              "correctAnswer": "A function calling itself",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of the following recursive function? `function factorial(num) { if (num > 1) { return num * factorial(num - 1); } return 1; } console.log(factorial(3));`",
              "options": ["6", "3", "9", "Factorial is undefined"],
              "correctAnswer": "6",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will the following code output? `function greet(name) { console.log(`Hello ${name}`); } greet('John'); greet('David');`",
              "options": [
                "Hello John\nHello David",
                "Hello John\nHello John",
                "Hello David\nHello David",
                "Error"
              ],
              "correctAnswer": "Hello John\nHello David",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which keyword is used to declare a block-scoped variable in JavaScript?",
              "options": ["let", "var", "const", "function"],
              "correctAnswer": "let",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the purpose of a function parameter in JavaScript?",
              "options": [
                "To act as a placeholder for values passed to the function",
                "To define the function's name",
                "To store the function's return value",
                "To initialize the function's variables"
              ],
              "correctAnswer": "To act as a placeholder for values passed to the function",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which of the following is a built-in JavaScript library function?",
              "options": [
                "Math.sqrt()",
                "myCustomFunction()",
                "calculateArea()",
                "processData()"
              ],
              "correctAnswer": "Math.sqrt()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the output of the following code? `let result = Math.pow(2, 3); console.log(result);`",
              "options": ["8", "6", "4", "2"],
              "correctAnswer": "8",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of this code snippet? `console.log('JavaScript'.toLowerCase());`",
              "options": ["JAVASCRIPT", "Javascript", "javascript", "Error"],
              "correctAnswer": "javascript",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the purpose of the base case in a recursive function?",
              "options": [
                "To stop the recursion and prevent infinite loops",
                "To initialize the function's variables",
                "To declare the function",
                "To handle errors"
              ],
              "correctAnswer": "To stop the recursion and prevent infinite loops",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you create a function expression in JavaScript?",
              "options": [
                "By assigning an anonymous function to a variable",
                "By using the function keyword followed by a name",
                "By defining the function within curly braces",
                "By calling the function with parentheses"
              ],
              "correctAnswer": "By assigning an anonymous function to a variable",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the following code snippet output? `function display() { let message = 'Hello'; console.log(message); } display(); console.log(message);`",
              "options": [
                "Hello\nReferenceError",
                "Hello\nundefined",
                "ReferenceError\nHello",
                "undefined\nundefined"
              ],
              "correctAnswer": "Hello\nReferenceError",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which of the following is not a JavaScript built-in function?",
              "options": [
                "console.log()",
                "Math.sqrt()",
                "parseInt()",
                "calculateFactorial()"
              ],
              "correctAnswer": "calculateFactorial()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of the following code snippet? `let x = 10; { let x = 20; console.log(x); } console.log(x);`",
              "options": ["20\n10", "10\n20", "ReferenceError", "20\n20"],
              "correctAnswer": "20\n10",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "JavaScript Function to Add Two Numbers",
              "description": "Practice writing a simple JavaScript function that adds two numbers and returns the result.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write a JavaScript function that takes two numbers as arguments, adds them, and returns the sum.\n\n1. Function Declaration:\n   - Define a function `addNumbers` that takes two parameters `num1` and `num2`.\n   - Inside the function, return the sum of `num1` and `num2`.\n\n2. Function Call and Output:\n   - Call the `addNumbers` function with the numbers `5` and `10` as arguments.\n   - Use `let` to declare a variable `result` that stores the return value from `addNumbers`.\n   - Print the output using `console.log` and ensure it includes the text 'The sum is:' followed by the sum.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "function addNumbers(num1, num2) {\n    return num1 + num2;\n}\nlet result = addNumbers(5, 10);\nconsole.log(\"The sum is: \", result);",
                  "output": "The sum is: 15",
                  "required": [
                    "function addNumbers(num1, num2) {",
                    "    return num1 + num2;",

                    "let result = addNumbers(5, 10);",
                    "console.log(\"The sum is: \", result);"
                  ],
                  "testCaseSentences": [
                    "Define a function 'addNumbers' that takes two parameters 'num1' and 'num2'.",
                    "Return the sum of 'num1' and 'num2' from the function.",
                    "Call 'addNumbers' with arguments 5 and 10.",
                    "Print the result with the text 'The sum is:' followed by the sum."
                  ],
             
                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Function to Say Hello",
              "description": "Practice writing a simple JavaScript function that prints a greeting message to the console.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write a JavaScript function that prints a greeting message.\n\n1. Function Declaration:\n   - Define a function `sayHello` that takes no parameters.\n   - Inside the function, use `console.log` to print the message 'Hello, World!'.\n\n2. Function Call and Output:\n   - Call the `sayHello` function to display the message in the console.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "function sayHello() {\n    console.log(\"Hello, World!\");\n}\nsayHello();",
                  "output": "Hello, World!",
                  "required": [
                    "function sayHello() {",
                    "console.log(\"Hello, World!\");",
                    "sayHello();"
                  ],
                  "testCaseSentences": [
                    "Define a function 'sayHello' that takes no parameters.",
                    "Print 'Hello, World!' inside the function using 'console.log'.",
                    "Call the 'sayHello' function to display the message."
                  ],

                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "JavaScript Function to Square a Number",
              "description": "Practice writing a simple JavaScript function that squares a number and returns the result.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write a JavaScript function that takes one number as an argument and returns its square.\n\n1. Function Declaration:\n   - Define a function `squareNumber` that takes one parameter `num`.\n   - Inside the function, return the square of `num` (i.e., `num * num`).\n\n2. Function Call and Output:\n   - Call the `squareNumber` function with the number `4` as the argument.\n   - Use `let` to declare a variable `result` that stores the return value from `squareNumber`.\n   - Print the output using `console.log` to display the square.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "function squareNumber(num) {\n    return num * num;\n}\nlet result = squareNumber(4);\nconsole.log(\"The square is: \", result);",
                  "output": "The square is: 16",
                  "required": [
                    "function squareNumber(num) {",
                    "    return num * num;",
                    "let result = squareNumber(4);",
                    "console.log(\"The square is: \", result);"
                  ],
                  "testCaseSentences": [
                    "Define a function 'squareNumber' that takes one parameter 'num'.",
                    "Return the square of 'num' from the function.",
                    "Call 'squareNumber' with argument 4 and assign it to a let variable named 'result'.",
                    "Print the result with the text 'The square is:' followed by the square."
                  ],

                  "isHidden": false
                }
              ],
              "locked": true,
              "completed": false
            }
           
          ],
          "totalPoints": 0,
          "locked": true
        },
        {
          "title": "Lesson 4: JS Types",
          "documents": [
            {
              "title": "JavaScript Array",
              "content": [
                {
                  "type": "sentence",
                  "text": "An array is an object that can store multiple values at once. It allows us to organize related data by grouping them within a single variable."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const age = [17, 18, 15, 19, 14];\nconsole.log(age);\n\n// Output: [17, 18, 15, 19, 14]"
                },
                {
                  "type": "sentence",
                  "text": "Create an Array: We can create an array by placing elements inside square brackets [], separated by commas."
                },
                {
                  "type": "snippet",
                  "code": "const numbers = [10, 30, 40, 60, 80];"
                },
                {
                  "type": "sentence",
                  "text": "Access Elements of an Array: Each element of an array is associated with an index, starting from 0."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let numbers = [10, 30, 40, 60, 80];\nconsole.log(numbers[0]);  // First element\nconsole.log(numbers[2]);  // Third element\n\n// Output:\n// 10\n// 40"
                },
                {
                  "type": "sentence",
                  "text": "Add Element to an Array: We can add elements using methods like push() (end) and unshift() (beginning)."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let dailyActivities = ['eat', 'sleep'];\ndailyActivities.push('exercise');\ndailyActivities.unshift('work');\nconsole.log(dailyActivities);\n\n// Output: ['work', 'eat', 'sleep', 'exercise']"
                },
                {
                  "type": "sentence",
                  "text": "Change Elements of an Array: We can modify elements by accessing their index."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let activities = ['eat', 'work', 'sleep'];\nactivities[1] = 'exercise';\nconsole.log(activities);\n\n// Output: ['eat', 'exercise', 'sleep']"
                },
                {
                  "type": "sentence",
                  "text": "Remove Elements From an Array: We can remove elements using the splice() method."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let numbers = [1, 2, 3, 4, 5];\nnumbers.splice(2, 1);  // Remove one element starting from index 2\nconsole.log(numbers);\n\n// Output: [1, 2, 4, 5]"
                },
                {
                  "type": "sentence",
                  "text": "Common Array Methods: JavaScript provides various methods for array operations, such as concat(), toString(), indexOf(), find(), forEach(), includes(), sort(), and slice()."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let fruits = ['apple', 'banana', 'orange'];\nconsole.log(fruits.toString());\nconsole.log(fruits.indexOf('banana'));\nfruits.forEach(fruit => console.log(fruit));\n\n// Output:\n// apple,banana,orange\n// 1\n// apple\n// banana\n// orange"
                }
              ],
              "locked": true
            },
            {
              "title": "JS Multidimensional Array",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, multidimensional arrays contain another array inside them."
                },
                {
                  "type": "sentence",
                  "text": "Here is a simple example of a multidimensional array. Read the rest of the tutorial to learn more."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// multidimensional array\n// contains 3 separate arrays as elements\nconst data = [[1, 2, 3], [1, 3, 4], [4, 5, 6]];\n\nconsole.log(data);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ [ 1, 2, 3 ], [ 1, 3, 4 ], [ 4, 5, 6 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, we created a multidimensional array named data with the following arrays as its elements: [ 1, 2, 3 ], [ 1, 3, 4 ], [ 4, 5, 6 ]."
                },
                {
                  "type": "sentence",
                  "text": "Use Existing Arrays as Elements"
                },
                {
                  "type": "sentence",
                  "text": "We can also create multidimensional arrays by nesting existing arrays within them. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// declare three arrays\nlet student1 = ['Jack', 24];\nlet student2 = ['Sara', 23];\nlet student3 = ['Peter', 24];\n\n// create multidimensional array\n// using student1, student2, and student3\nlet studentsData = [student1, student2, student3];\n\n// print the multidimensional array\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23 ], [ 'Peter', 24 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, we first created three arrays named student1, student2, and student3."
                },
                {
                  "type": "sentence",
                  "text": "We then nested these three arrays within the studentsData array to create our multidimensional array:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let studentsData = [student1, student2, student3];"
                },
                {
                  "type": "sentence",
                  "text": "Access Elements of an Array"
                },
                {
                  "type": "sentence",
                  "text": "You can access the elements of a multidimensional array using array indexes. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let x = [\n['Jack', 24],\n['Sara', 23], \n['Peter', 24]\n];\n\n// access the first item \nconsole.log(x[0]);  // [ 'Jack', 24 ]\n\n// access the first item of the first inner array\nconsole.log(x[0][0]);  // Jack\n\n// access the second item of the third inner array\nconsole.log(x[2][1]);  // 24"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ 'Jack', 24 ]\nJack\n24"
                },
                {
                  "type": "sentence",
                  "text": "You can think of a multidimensional array (in this case, x), as a table with 3 rows and 2 columns."
                },
                {
                  "type": "sentence",
                  "text": "Add Elements to a Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "You can use an index notation or the push() method to add elements to a multidimensional array."
                },
                {
                  "type": "sentence",
                  "text": "1. Using Index Notation"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// add \"hello\" as the 3rd element\n// of the 2nd inner array\nstudentsData[1][2] = \"hello\";\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23, 'hello' ] ]"
                },
                {
                  "type": "sentence",
                  "text": "2. Using the push() Method"
                },
                {
                  "type": "sentence",
                  "text": "The push() method inserts an element at the end of the array. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// add element to the end of the outer array\nstudentsData.push([\"Peter\", 24]);\n\nconsole.log(studentsData);\n\n// add \"hello\" as the final element\n// of the 2nd inner array\nstudentsData[1].push(\"hello\");\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23 ], [ 'Peter', 24 ] ]\n[ [ 'Jack', 24 ], [ 'Sara', 23, 'hello' ], [ 'Peter', 24 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Remove Elements From a Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "You can use the splice() method to remove an element from any position in the multidimensional array. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let studentsData = [['Jack', 24], ['Sara', 23],];\n\n// remove one element\n// starting from index 0\nstudentsData.splice(0,1);\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "[ [ 'Sara', 23 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, studentsData.splice(0,1) removes the first element of the multidimensional array. Here,"
                },
                {
                  "type": "sentence",
                  "text": "0 - The start index from where to modify the array."
                },
                {
                  "type": "sentence",
                  "text": "1 - The number of elements to delete."
                },
                {
                  "type": "sentence",
                  "text": "If you want to delete both arrays, you can use the code studentsData.splice(0,2)."
                },
                {
                  "type": "sentence",
                  "text": "Iterate Over Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, you can use nested loops to go through a multidimensional array: one loop for the outer array and another loop inside it for the inner arrays. For example,"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// loop over outer array\nfor(let i = 0; i < studentsData.length; i++) {\n\n    // loop over inner array elements\n    for(let j = 0; j < studentsData[i].length; j++) {\n        console.log(studentsData[i][j]);\n    }\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "Jack\n24\nSara\n23"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript String",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript strings are primitive data types representing textual data. They can be created using single quotes, double quotes, or backticks."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let name1 = 'Peter';\nlet name2 = \"Jack\";\nlet result = `The names are ${name1} and ${name2}`;\nconsole.log(result);\n\n// Output: The names are Peter and Jack"
                },
                {
                  "type": "sentence",
                  "text": "Access String Characters: You can access characters using indexes or the charAt() method."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let message = \"hello\";\nconsole.log(message[1]);  // Using index\nconsole.log(message.charAt(1));  // Using charAt()\n\n// Output:\n// e\n// e"
                },
                {
                  "type": "sentence",
                  "text": "Features of JavaScript Strings: Strings are immutable and case-sensitive."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let message = \"hello\";\nmessage[0] = \"H\";  // This operation fails silently\nconsole.log(message);  // hello\n\nlet value1 = \"a\";\nlet value2 = \"A\";\nconsole.log(value1 == value2);  // false"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript String Methods: Strings have various built-in methods for manipulation and analysis."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let text1 = \"hello\";\nlet text2 = \"world\";\nlet text3 = \"     JavaScript    \";\n\nconsole.log(text1.concat(' ', text2));  // Concatenation\nconsole.log(text1.toUpperCase());  // Convert to uppercase\nconsole.log(text3.trim());  // Remove whitespace\nconsole.log(text1.split(''));  // Convert to array\nconsole.log(text1.slice(1, 3));  // Slice the string\n\n// Output:\n// hello world\n// HELLO\n// JavaScript\n// ['h', 'e', 'l', 'l', 'o']\n// el"
                },
                {
                  "type": "sentence",
                  "text": "Other useful string methods include replace(), substr(), substring(), toLowerCase(), includes(), and search()."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript for...in loop",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript for...in loop iterates over the keys of an object."
                },
                {
                  "type": "sentence",
                  "text": "Here's a simple example of the for...in loop in JavaScript. Read the rest of the tutorial to learn more."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const student = {\n    name: \"Monica\",\n    class: 7\n};\n\n// loop through the keys of student object\nfor (let key in student) {\n    // display the key-value pairs\n    console.log(`${key} => ${student[key]}`);\n};\n\n// Output:\n// name => Monica\n// class => 7"
                },
                {
                  "type": "sentence",
                  "text": "Here, the for...in loop iterates over the keys of the student object. In each iteration of the loop, the key variable stores a single key belonging to student."
                },
                {
                  "type": "sentence",
                  "text": "Syntax of JavaScript for...in Loop"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "for (key in object) {\n    // body of for...in\n};"
                },
                {
                  "type": "sentence",
                  "text": "Here, object is the object whose keys we want to iterate over, and key is a variable that stores a single key belonging to object."
                },
                {
                  "type": "sentence",
                  "text": "Working of for...in Loop"
                },
                {
                  "type": "sentence",
                  "text": "In the first iteration, the key variable is assigned the first key of object. The body of the loop is then executed."
                },
                {
                  "type": "sentence",
                  "text": "In the second iteration, the key variable is assigned the next key of object. The body of the loop is then executed."
                },
                {
                  "type": "sentence",
                  "text": "This process continues until there are no more keys over which to iterate."
                },
                {
                  "type": "sentence",
                  "text": "Note: Once you get the keys of an object, you can easily find their corresponding values."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript for...in Loop"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const salaries = {\n    Jack: 24000,\n    Paul: 34000,\n    Monica: 55000\n};\n\n// use for...in to loop through\n// properties of salaries\nfor (let i in salaries) {\n    // access object key using [ ]\n    // add a $ symbol before the key\n    let salary = \"$\" + salaries[i];\n\n    // display the values\n    console.log(`${i}: ${salary}`);\n};\n\n// Output\n// Jack: $24000\n// Paul: $34000\n// Monica: $55000"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we used the for...in loop to iterate over the properties of the salaries object. Then, we added the string $ to each value of the object."
                },
                {
                  "type": "sentence",
                  "text": "Note: We have used the variable i instead of key because we can use any valid variable name."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Number",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, numbers are used to represent numerical values. They can be whole numbers (like 5, 10, 100) or decimal numbers (like 3.13, 0.5, 10.75)."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let num1 = 5;\nlet num2 = 3.13;\n\nconsole.log(num1); // 5\nconsole.log(num2); // 3.13"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript NaN"
                },
                {
                  "type": "sentence",
                  "text": "NaN (Not a Number) is a special value that is returned when a mathematical operation cannot produce a meaningful numeric result."
                },
                {
                  "type": "sentence",
                  "text": "Performing arithmetic operations (except addition) on numeric values and strings results in NaN."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let num = 4 - \"hello\";\nconsole.log(num); // NaN"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Infinity"
                },
                {
                  "type": "sentence",
                  "text": "Infinity is a special value that signifies an amount larger than any finite number."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let num1 = 2 / 0;\nconsole.log(num1); // Infinity\n\nlet num2 = -2 / 0;\nconsole.log(num2); // -Infinity"
                },
                {
                  "type": "sentence",
                  "text": "Here, dividing a positive number by 0 yields Infinity, while dividing a negative number by 0 results in -Infinity."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Number Methods"
                },
                {
                  "type": "sentence",
                  "text": "Here is a list of built-in number methods in JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "A. Method: isNaN()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is NaN."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: isFinite()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is a finite number."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: isInteger()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is an integer."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: isSafeInteger()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is a safe integer."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: parseFloat()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts the numeric floating string to a floating-point number."
                },
                {
                  "type": "sentence",
                  "text": "F. Method: parseInt()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts the numeric string to an integer."
                },
                {
                  "type": "sentence",
                  "text": "G. Method: toExponential()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number in exponential notation."
                },
                {
                  "type": "sentence",
                  "text": "H. Method: toFixed()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number in fixed-point notation."
                },
                {
                  "type": "sentence",
                  "text": "I. Method: toPrecision()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number to a specified precision."
                },
                {
                  "type": "sentence",
                  "text": "J. Method: toString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value in a specified radix (base)."
                },
                {
                  "type": "sentence",
                  "text": "K. Method: valueOf()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the number's value."
                },
                {
                  "type": "sentence",
                  "text": "L. Method: toLocaleString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string with a language-sensitive representation of a number."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript Number Methods"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// check if num1 is integer\nlet num1 = 12;\nconsole.log(Number.isInteger(num1)); // true\n\n// check if num2 is NaN\nlet num2 = NaN;\nconsole.log(Number.isNaN(num2)); // true\n\n// display up to two decimal points\nl2t num3 = 5.1234;\nconsole.log(num3.toFixed(2)); // 5.12"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Symbol",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript ES6 introduced a new primitive data type called Symbol. Symbols are immutable (cannot be changed) and are unique."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// two symbols with the same description\n\nconst value1 = Symbol('hello');\nconst value2 = Symbol('hello');\n\nconsole.log(value1 === value2); // false"
                },
                {
                  "type": "sentence",
                  "text": "Though value1 and value2 both contain the same description, they are different."
                },
                {
                  "type": "sentence",
                  "text": "Creating Symbol"
                },
                {
                  "type": "sentence",
                  "text": "You use the Symbol() function to create a Symbol."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// creating symbol\nconst x = Symbol();\n\ntypeof x; // symbol"
                },
                {
                  "type": "sentence",
                  "text": "You can pass an optional string as its description."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\nconsole.log(x); // Symbol(hey)"
                },
                {
                  "type": "sentence",
                  "text": "Access Symbol Description"
                },
                {
                  "type": "sentence",
                  "text": "To access the description of a symbol, we use the .description property."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\nconsole.log(x.description); // hey"
                },
                {
                  "type": "sentence",
                  "text": "Add Symbol as an Object Key"
                },
                {
                  "type": "sentence",
                  "text": "You can add symbols as a key in an object using square brackets []."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let id = Symbol(\"id\");\n\nlet person = {\n    name: \"Jack\",\n\n    // adding symbol as a key\n    [id]: 123 // not \"id\": 123\n};\n\nconsole.log(person); // {name: \"Jack\", Symbol(id): 123}"
                },
                {
                  "type": "sentence",
                  "text": "Symbols are not included in for...in Loop"
                },
                {
                  "type": "sentence",
                  "text": "The for...in loop does not iterate over Symbolic properties."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let id = Symbol(\"id\");\n\nlet person = {\n    name: \"Jack\",\n    age: 25,\n    [id]: 12\n};\n\n// using for...in\nfor (let key in person) {\n    console.log(key);\n}"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "Output\n\nname\nage"
                },
                {
                  "type": "sentence",
                  "text": "Benefit of Using Symbols in Object"
                },
                {
                  "type": "sentence",
                  "text": "If the same code snippet is used in various programs, then it is better to use Symbols in the object key. It's because you can use the same key name in different codes and avoid duplication issues."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\n// creating Symbol\nlet id = Symbol(\"id\");\n\n// adding symbol as a key\nperson[id] = 12;"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, if the person object is also used by another program, then you wouldn't want to add a property that can be accessed or changed by another program. Hence by using Symbol, you create a unique property that you can use."
                },
                {
                  "type": "sentence",
                  "text": "Now, if the other program also needs to use a property named id, just add a Symbol named id and there won't be duplication issues."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\nlet id = Symbol(\"id\");\n\nperson[id] = \"Another value\";"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, even if the same name is used to store values, the Symbol data type will have a unique value."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, if the string key was used, then the later program would have changed the value of the property."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\n// using string as key\nperson.id = 12;\nconsole.log(person.id); // 12\n\n// Another program overwrites value\nperson.id = 'Another value';\nconsole.log(person.id); // Another value"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the second user.id overwrites the previous value."
                },
                {
                  "type": "sentence",
                  "text": "Symbol Methods"
                },
                {
                  "type": "sentence",
                  "text": "There are various methods available with Symbol."
                },
                {
                  "type": "sentence",
                  "text": "A. Method: for()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Searches for existing symbols."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: keyFor()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a shared symbol key from the global symbol registry."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: toSource()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the source of the Symbol object."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: toString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the description of the Symbol."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: valueOf()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the primitive value of the Symbol object."
                },
                {
                  "type": "sentence",
                  "text": "Example: Symbol Methods"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// get symbol by name\nlet sym = Symbol.for('hello');\nlet sym1 = Symbol.for('id');\n\n// get name by symbol\nconsole.log( Symbol.keyFor(sym) ); // hello\nconsole.log( Symbol.keyFor(sym1) ); // id"
                },
                {
                  "type": "sentence",
                  "text": "Symbol Properties"
                },
                {
                  "type": "sentence",
                  "text": "A. Property: asyncIterator"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the default AsyncIterator for an object."
                },
                {
                  "type": "sentence",
                  "text": "B. Property: hasInstance"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines if a constructor object recognizes an object as its instance."
                },
                {
                  "type": "sentence",
                  "text": "C. Property: isConcatSpreadable"
                },
                {
                  "type": "sentence",
                  "text": "Description: Indicates if an object should be flattened to its array elements."
                },
                {
                  "type": "sentence",
                  "text": "D. Property: iterator"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the default iterator for an object."
                },
                {
                  "type": "sentence",
                  "text": "E. Property: match"
                },
                {
                  "type": "sentence",
                  "text": "Description: Matches against a string."
                },
                {
                  "type": "sentence",
                  "text": "F. Property: matchAll"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns an iterator that yields matches of the regular expression against a string."
                },
                {
                  "type": "sentence",
                  "text": "G. Property: replace"
                },
                {
                  "type": "sentence",
                  "text": "Description: Replaces matched substrings of a string."
                },
                {
                  "type": "sentence",
                  "text": "H. Property: search"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the index within a string that matches the regular expression."
                },
                {
                  "type": "sentence",
                  "text": "I. Property: split"
                },
                {
                  "type": "sentence",
                  "text": "Description: Splits a string at the indices that match a regular expression."
                },
                {
                  "type": "sentence",
                  "text": "J. Property: species"
                },
                {
                  "type": "sentence",
                  "text": "Description: Creates derived objects."
                },
                {
                  "type": "sentence",
                  "text": "K. Property: toPrimitive"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts an object to a primitive value."
                },
                {
                  "type": "sentence",
                  "text": "L. Property: toStringTag"
                },
                {
                  "type": "sentence",
                  "text": "Description: Gives the default description of an object."
                },
                {
                  "type": "sentence",
                  "text": "M. Property: description"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the description of the symbol."
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\n\n// description property\nconsole.log(x.description); // hey\n\nconst stringArray = ['a', 'b', 'c'];\nconst numberArray = [1, 2, 3];\n\n// isConcatSpreadable property\nnumberArray[Symbol.isConcatSpreadable] = false;\n\nlet result = stringArray.concat(numberArray);\nconsole.log(result); // [\"a\", \"b\", \"c\", [1, 2, 3]]"
                }
              ],
              "locked": true
            }
          ],
          "quiz": [
            {
              "question": "What is an array in JavaScript?",
              "options": [
                "A single value",
                "An object that can store multiple values",
                "A function",
                "A string method"
              ],
              "correctAnswer": "An object that can store multiple values",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you create an array in JavaScript?",
              "options": [
                "Using the new Array() constructor",
                "By declaring variables with comma separation",
                "By using square brackets []",
                "By calling the Array.create() method"
              ],
              "correctAnswer": "By using square brackets []",
              "points": 2,
              "locked": true
            },
            {
              "question": "What method adds an element to the end of an array?",
              "options": ["shift()", "pop()", "push()", "unshift()"],
              "correctAnswer": "push()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you access the second element of an array?",
              "options": ["array[1]", "array[2]", "array.get(1)", "array[0]"],
              "correctAnswer": "array[1]",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which method is used to remove elements from an array?",
              "options": ["splice()", "slice()", "concat()", "join()"],
              "correctAnswer": "splice()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How can you access a character in a string?",
              "options": [
                "string.charAt(index)",
                "string[index]",
                "string.get(index)",
                "Both A and B"
              ],
              "correctAnswer": "Both A and B",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the trim() method do to a string?",
              "options": [
                "Converts it to uppercase",
                "Removes whitespace from both ends",
                "Splits it into an array",
                "Concatenates it with another string"
              ],
              "correctAnswer": "Removes whitespace from both ends",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which methods can be used to convert a string to a number?",
              "options": [
                "parseInt() and parseFloat()",
                "toString()",
                "Number()",
                "valueOf()"
              ],
              "correctAnswer": "parseInt() and parseFloat()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What method checks if a value is NaN?",
              "options": ["isFinite()", "isInteger()", "isNaN()", "valueOf()"],
              "correctAnswer": "isNaN()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you create a Symbol in JavaScript?",
              "options": [
                "Symbol.create()",
                "new Symbol()",
                "Symbol()",
                "Symbol.new()"
              ],
              "correctAnswer": "Symbol()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is a feature of JavaScript strings?",
              "options": [
                "Strings are mutable",
                "Strings are immutable",
                "Strings can be changed by indexing",
                "Strings are not case-sensitive"
              ],
              "correctAnswer": "Strings are immutable",
              "points": 2,
              "locked": true
            },
            {
              "question": "What method returns a string with uppercase characters?",
              "options": [
                "toLowerCase()",
                "toUpperCase()",
                "charAt()",
                "slice()"
              ],
              "correctAnswer": "toUpperCase()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you add an element at the beginning of an array?",
              "options": ["push()", "pop()", "unshift()", "shift()"],
              "correctAnswer": "unshift()",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which method converts a string into an array of substrings?",
              "options": ["split()", "join()", "concat()", "toLowerCase()"],
              "correctAnswer": "split()",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the find() method do in arrays?",
              "options": [
                "Finds the index of an element",
                "Finds the first value that passes a test",
                "Finds and removes an element",
                "Sorts the array"
              ],
              "correctAnswer": "Finds the first value that passes a test",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the purpose of the for...in loop in JavaScript?",
              "options": [
                "To iterate over array elements",
                "To iterate over object keys",
                "To iterate over string characters",
                "To iterate over function arguments"
              ],
              "correctAnswer": "To iterate over object keys",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you access the first item of a multidimensional array?",
              "options": ["array[0]", "array[0][0]", "array[1]", "array[1][0]"],
              "correctAnswer": "array[0]",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the result of dividing a positive number by zero in JavaScript?",
              "options": ["NaN", "Infinity", "0", "Undefined"],
              "correctAnswer": "Infinity",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which of the following is NOT a feature of Symbols in JavaScript?",
              "options": [
                "Symbols are immutable",
                "Symbols are unique",
                "Symbols can be used as object keys",
                "Symbols are included in for...in loops"
              ],
              "correctAnswer": "Symbols are included in for...in loops",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the Symbol.for() method do?",
              "options": [
                "Creates a new Symbol",
                "Searches for existing symbols",
                "Converts a Symbol to a string",
                "Compares two Symbols"
              ],
              "correctAnswer": "Searches for existing symbols",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "Basic Array Access",
              "description": "Access elements of a JavaScript array using their index.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "You are given an array of numbers. Write JavaScript code to access and print the second element of the array.\n\n1. Declare an array named `numbers` with the following values: `[5, 10, 15, 20, 25]`.\n\n2. Access and print the second element of the array.\n\nEnsure that the code executes without any errors and that the correct element is printed.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let numbers = [5, 10, 15, 20, 25];\nconsole.log(numbers[1]);",
                  "output": "10",
                  "required": [
                    "let numbers = [5, 10, 15, 20, 25];",
                    "console.log(numbers[1]);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare an array named `numbers` with the values [5, 10, 15, 20, 25].",
                    "Access and print the second element of the array using index 1."
                  ]
               
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Array Methods",
              "description": "Use array methods to modify and check contents.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "You are given an array of fruits. Write JavaScript code to modify the array using array methods.\n\n1. Declare an array named `fruits` with the following values: `['Apple', 'Banana', 'Orange']`.\n\n2. Add a new fruit `'Mango'` to the array using the `push()` method.\n\n3. Check if `'Mango'` exists in the array using the `includes()` method and print the result.\n\nEnsure that the code executes without any errors and that the correct result is printed.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let fruits = ['Apple', 'Banana', 'Orange'];\nfruits.push('Mango');\nconsole.log(fruits.includes('Mango'));",
                  "output": "true",
                  "required": [
                    "let fruits = ['Apple', 'Banana', 'Orange'];",
                    "fruits.push('Mango');",
                    "console.log(fruits.includes('Mango'));"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare an array named `fruits` with the values ['Apple', 'Banana', 'Orange'].",
                    "Use the `push()` method to add the fruit 'Mango' to the array.",
                    "Check if 'Mango' is present in the array using the `includes()` method and print the result."
                  ]
            
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Multidimensional Array Manipulation",
              "description": "Work with a multidimensional array to access and modify elements.",
              "language": "JavaScriptConsole",
              "difficulty": "hard",
              "problemStatement": "You are given a multidimensional array representing student data. Write JavaScript code to perform various operations on the array.\n\n1. Declare a multidimensional array named `studentsData` with the following values: `[['Jack', 24], ['Sara', 23], ['Peter', 24]]`.\n\n2. Access and print the name `'Sara'` from the array.\n\n3. Add a new student array `['Anna', 22]` to the `studentsData` array.\n\n4. Remove the first student array from `studentsData`.\n\n5. Print the modified `studentsData` array.\n\nEnsure that the code executes without any errors and that the correct results are printed.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let studentsData = [['Jack', 24], ['Sara', 23], ['Peter', 24]];\nconsole.log(studentsData[1][0]);\nstudentsData.push(['Anna', 22]);\nstudentsData.shift();\nconsole.log(studentsData);",
                  "output": "Sara\n[ [ 'Sara', 23 ], [ 'Peter', 24 ], [ 'Anna', 22 ] ]",
                  "required": [
                    "let studentsData = [['Jack', 24], ['Sara', 23], ['Peter', 24]];",
                    "console.log(studentsData[1][0]);",
                    "studentsData.push(['Anna', 22]);",
                    "studentsData.shift();",
                    "console.log(studentsData);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare a multidimensional array `studentsData` with values [['Jack', 24], ['Sara', 23], ['Peter', 24]].",
                    "Access and print the name 'Sara' from the array using index [1][0].",
                    "Use the `push()` method to add the student ['Anna', 22] to `studentsData`.",
                    "Use the `shift()` method to remove the first student array from `studentsData`.",
                    "Print the modified array to the console."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Convert String to Number",
              "description": "Write JavaScript code to convert a string containing a number to an actual number type and perform addition.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "In this activity, you will convert a string to a number and perform an addition.\n\n1. Declare a variable `strNumber` and assign it the string '25'.\n\n2. Convert `strNumber` to a number using `Number()` and store it in a new variable `convertedNumber`.\n\n3. Add `convertedNumber` to the number `5` and store the result in a variable `sum`.\n\n4. Use `console.log` to print the value of `sum`.\n\nEnsure that the code executes without any errors and that the correct sum is printed.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": ""
              },
              "testCases": [
                {
                  "input": "let strNumber = '25';\nlet convertedNumber = Number(strNumber);\nlet sum = convertedNumber + 5;\nconsole.log(sum);",
                  "output": "30",
                  "required": [
                    "let strNumber = '25';",
                    "let convertedNumber = Number(strNumber);",
                    "let sum = convertedNumber + 5;",
                    "console.log(sum);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare a variable `strNumber` with the string '25'.",
                    "Convert `strNumber` to a number using `Number()`.",
                    "Add the converted number to 5 and store the result in `sum`.",
                    "Print the value of `sum` using `console.log`."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            }
          ],
          "totalPoints": 0,
          "locked": true
        },
        {
          "title": "Lesson 5: JS ES6",
          "documents": [
            {
              "title": "JavaScript ES6",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript ES6, introduced in 2015, brought significant syntax improvements and new features."
                },
                {
                  "type": "sentence",
                  "text": "ES6 introduced `let` and `const` for variable declarations, adding more control compared to `var`."
                },
                {
                  "type": "sentence",
                  "text": "Using `let` creates block-scoped variables:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "{\n  let name = \"Peter\";\n  console.log(name); // Peter\n}\nconsole.log(name); // Error: ReferenceError"
                },
                {
                  "type": "sentence",
                  "text": "`var` does not restrict scope to the block, unlike `let`."
                },
                {
                  "type": "sentence",
                  "text": "The `const` keyword creates constant variables that cannot be changed after declaration:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const fruit = \"Apple\";\nfruit = \"Banana\"; // Error: Assignment to constant variable"
                },
                {
                  "type": "sentence",
                  "text": "Template literals allow easy string interpolation:"
                },
                {
                  "type": "snippet",
                  "code": "const firstName = \"Jack\";\nconst lastName = \"Sparrow\";\nconsole.log(`Hello ${firstName} ${lastName}`); // Hello Jack Sparrow"
                },
                {
                  "type": "sentence",
                  "text": "ES6 introduced default parameters:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function sum(a, b = 5) {\n  console.log(a + b);\n}\nsum(10); // 15\nsum(5, 15); // 20"
                },
                {
                  "type": "sentence",
                  "text": "Arrow functions provide a concise syntax for function expressions:"
                },
                {
                  "type": "snippet",
                  "code": "let product = (x, y) => x * y;\nconsole.log(product(5, 10)); // 50"
                },
                {
                  "type": "sentence",
                  "text": "ES6 classes provide a clearer way to create objects using the `class` keyword:"
                },
                {
                  "type": "snippet",
                  "code": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\nlet p1 = new Person(\"John\");\nconsole.log(p1.name); // John"
                },
                {
                  "type": "sentence",
                  "text": "Destructuring allows easy extraction of values from arrays or objects:"
                },
                {
                  "type": "snippet",
                  "code": "const hospital = { doctors: 23, patients: 44 };\nlet { doctors, patients } = hospital;\nconsole.log(doctors, patients); // 23, 44"
                },
                {
                  "type": "sentence",
                  "text": "ES6 introduced `import` and `export` for module management."
                },
                {
                  "type": "snippet",
                  "code": "// export\nexport default function greet(name) { console.log(`Hi ${name}!`); }\n// import\nimport greet from './action.js';\ngreet(\"Sara\"); // Hi Sara!"
                },
                {
                  "type": "sentence",
                  "text": "Promises provide a cleaner way to handle asynchronous tasks:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let promise = new Promise((resolve) => {\n  setTimeout(() => resolve(\"Promise resolved!\"), 5000);\n});\npromise.then(console.log); // Promise resolved!"
                },
                {
                  "type": "sentence",
                  "text": "The rest parameter collects arguments into an array:"
                },
                {
                  "type": "snippet",
                  "code": "function show(a, b, ...args) {\n  console.log(a, b, args);\n}\nshow(1, 2, 3, 4, 5); // 1 2 [3, 4, 5]"
                },
                {
                  "type": "sentence",
                  "text": "The spread operator unpacks arrays or objects:"
                },
                {
                  "type": "snippet",
                  "code": "let numArr = [1, 2, 3];\nconsole.log([...numArr, 4, 5]); // [1, 2, 3, 4, 5]"
                }
              ],
              "locked": true
            }
            ,
            {
              "title": "JavaScript Arrow Function",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript arrow functions provide a concise syntax for function expressions."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "// an arrow function to add two numbers\nconst addNumbers = (a, b) => a + b;\n\n// call the function with two numbers\nconst result = addNumbers(5, 3);\nconsole.log(result);\n\n// Output: 8"
                },
                {
                  "type": "sentence",
                  "text": "In this example, addNumbers() takes two parameters, a and b, and returns their sum."
                },
                {
                  "type": "sentence",
                  "text": "Arrow Function Syntax"
                },
                {
                  "type": "snippet",
                  "code": "let myFunction = (arg1, arg2, ...argN) => {\n    statement(s)\n}"
                },
                {
                  "type": "sentence",
                  "text": "• myFunction: name of the function."
                },
                {
                  "type": "sentence",
                  "text": "• arg1, arg2, ...argN: function arguments."
                },
                {
                  "type": "sentence",
                  "text": "• statement(s): function body."
                },
                {
                  "type": "snippet",
                  "code": "let myFunction = (arg1, arg2, ...argN) => expression"
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Arrow Function With No Argument"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const sayHello = () => \"Hello, World!\";\n\n// call the arrow function\nconsole.log(sayHello());\n\n// Output: Hello, World!"
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Arrow Function With One Argument"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const square = x => x * x;\n\n// square a number\nconsole.log(square(5));\n\n// Output: 25"
                },
                {
                  "type": "sentence",
                  "text": "this Keyword With Arrow Function"
                },
                {
                  "type": "snippet",
                  "code": "// constructor function\nfunction Person() {\n    this.age = 25;\n    this.sayName = function () {\n        console.log(this.age);\n        let innerFunc = () => {\n            console.log(this.age);\n        }\n        innerFunc();\n    }\n}\n\nconst x = new Person();\nx.sayName();\n\n// Output: 25, 25"
                },
                {
                  "type": "sentence",
                  "text": "Inside the arrow function, this refers to the parent scope, i.e., Person()."
                }
              ],
              "locked": true
            }
            ,
            {
              "title": "JavaScript Spread Operator",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript spread operator (...) expands elements of an iterable like arrays, strings, or objects."
                },
                {
                  "type": "sentence",
                  "text": "It's useful for combining arrays, passing elements to functions, or copying arrays."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let numbers = [1, 2, 3];\nconsole.log(...numbers);\n\n// Output: 1 2 3"
                },
                {
                  "type": "sentence",
                  "text": "The spread operator expands the numbers array into individual elements."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator Inside Arrays"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nlet moreFruits1 = [\"Dragonfruit\", fruits, \"Elderberry\"];\nlet moreFruits2 = [\"Dragonfruit\", ...fruits, \"Elderberry\"];\n\nconsole.log(moreFruits1);\nconsole.log(moreFruits2);\n\n// Output\n\n[ 'Dragonfruit', [ 'Apple', 'Banana', 'Cherry' ], 'Elderberry' ]\n[ 'Dragonfruit', 'Apple', 'Banana', 'Cherry', 'Elderberry' ]"
                },
                {
                  "type": "sentence",
                  "text": "Using ...fruits expands the array within moreFruits2, unlike moreFruits1, which keeps fruits as an inner array."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator With Objects"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let obj1 = { x: 1, y: 2 };\nlet obj2 = { z: 3 };\nlet obj3 = { ...obj1, ...obj2 };\nlet obj4 = { obj1, obj2 };\n\nconsole.log(\"obj3 =\", obj3);\nconsole.log(\"obj4 =\", obj4);\n\n// Output\n\nobj3 = { x: 1, y: 2, z: 3 }\nobj4 = { obj1: { x: 1, y: 2 }, obj2: { z: 3 } }"
                },
                {
                  "type": "sentence",
                  "text": "Using the spread operator, properties of obj1 and obj2 are combined into obj3."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Rest Parameter"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let printArray = function(...args) {\n    console.log(args);\n}\n\nprintArray(3);\nprintArray(4, 5, 6);\n\n// Output\n\n[ 3 ]\n[ 4, 5, 6 ]"
                },
                {
                  "type": "sentence",
                  "text": "The rest parameter collects arguments into an array."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator in Function Arguments"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "function sum(num1, num2, num3) {\n    console.log(num1 + num2 + num3);\n}\n\nlet num1 = [1, 3, 4, 5];\nsum(...num1);\n\n// Output: 8"
                },
                {
                  "type": "sentence",
                  "text": "The function takes required arguments and ignores the rest when using the spread operator."
                }
              ],
              "locked": true
            }
            ,
            {
              "title": "JavaScript Map",
              "content": [
                { "type": "sentence", "text": "JavaScript ES6 introduced Map and WeakMap." },
                { "type": "sentence", "text": "Map stores elements in key/value pairs, similar to objects but can use any data type as keys." },
                { "type": "sentence", "text": "Maps maintain insertion order." },
                { "type": "sentence", "text": "Create a Map with new Map(). Example:" },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const map1 = new Map(); // an empty map\nconsole.log(map1); // Map {}"
                },
                { "type": "sentence", "text": "Insert elements using set(). Example:" },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: 26});\nconsole.log(map1);"
                },
                { "type": "sentence", "text": "Objects or functions can be keys in a Map. Example:" },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let map2 = new Map();\nlet obj = {};\nmap2.set(obj, {name: 'Jack', age: '26'});\nconsole.log(map2);"
                },
                { "type": "sentence", "text": "Access Map elements using get()." },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: '26'});\nconsole.log(map1.get('info'));"
                },
                { "type": "sentence", "text": "Check elements with has()." },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: '26'});\nconsole.log(map1.has('info'));"
                },
                { "type": "sentence", "text": "Remove elements using delete() or clear()." },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: '26'});\nmap1.delete('info');\nconsole.log(map1);"
                },
                { "type": "sentence", "text": "Get the size of a Map with size property." },
                {
                  "type": "snippet",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: '26'});\nconsole.log(map1.size);"
                },
                { "type": "sentence", "text": "Iterate over Map using for...of or forEach()." },
                {
                  "type": "snippet",
                  "code": "let map1 = new Map();\nmap1.set('name', 'Jack');\nfor (let [key, value] of map1) {\n  console.log(key + '- ' + value);\n}"
                },
                { "type": "sentence", "text": "JavaScript Map vs Object:" },
                { "type": "sentence", "text": "Map: Can have any data type as keys, directly iterable, size is accessible." },
                { "type": "sentence", "text": "Object: Only strings and symbols as keys, not directly iterable, size is manual." },
                { "type": "sentence", "text": "JavaScript WeakMap: Similar to Map but only objects as keys." },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const weakMap = new WeakMap();\nlet obj = {};\nweakMap.set(obj, 'hello');\nconsole.log(weakMap);"
                },
                { "type": "sentence", "text": "WeakMaps are not iterable." }
              ],
              "locked": true
            },
           
            {
              "title": "JavaScript Destructuring Assignment",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Destructuring"
                },
                {
                  "type": "sentence",
                  "text": "Destructuring assignment in ES6 simplifies assigning array values and object properties."
                },
                {
                  "type": "sentence",
                  "text": "Before ES6:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const person = { name: 'Sara', age: 25, gender: 'female' }\nlet name = person.name;\nlet age = person.age;\nlet gender = person.gender;\nconsole.log(name, age, gender);"
                },
                {
                  "type": "sentence",
                  "text": "With ES6 destructuring:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let { name, age, gender } = person;\nconsole.log(name, age, gender);"
                },
                {
                  "type": "sentence",
                  "text": "Order doesn’t matter:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let { age, gender, name } = person;\nconsole.log(name);"
                },
                {
                  "type": "sentence",
                  "text": "Use correct variable names:"
                },
                {
                  "type": "snippet",
                  "code": "let {name1, age, gender} = person;\nconsole.log(name1); // undefined"
                },
                {
                  "type": "sentence",
                  "text": "Assigning different variable names:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let { name: name1, age: age1, gender:gender1 } = person;\nconsole.log(name1, age1, gender1);"
                },
                {
                  "type": "sentence",
                  "text": "Array Destructuring:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const arr = ['one', 'two', 'three'];\nconst [x, y, z] = arr;\nconsole.log(x, y, z);"
                },
                {
                  "type": "sentence",
                  "text": "Default values:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let [x = 5,  y = 7] = [10];\nconsole.log(x, y);"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const { name, age = 26} = { name: 'Jack' };\nconsole.log(name, age);"
                },
                {
                  "type": "sentence",
                  "text": "Swapping variables:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let x = 4, y = 7;\n[x, y] = [y, x];\nconsole.log(x, y);"
                },
                {
                  "type": "sentence",
                  "text": "Skipping items:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const [x, , z] = ['one', 'two', 'three'];\nconsole.log(x, z);"
                },
                {
                  "type": "sentence",
                  "text": "Rest elements:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const [x, ...y] = ['one', 'two', 'three'];\nconsole.log(x, y);"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "let { name, ...rest } = { name: 'Sara', age: 25, gender: 'female' };\nconsole.log(rest);"
                },
                {
                  "type": "sentence",
                  "text": "Nested Destructuring:"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const arr = ['one', ['two', 'three']];\nconst [x, [y, z]] = arr;\nconsole.log(y, z);"
                },
                {
                  "type":"codeconsole",
                  "language": "javascript",
                  "code": "const {name, hobbies: {read}} = {name: 'Jack', hobbies: {read: true}};\nconsole.log(read);"
                }
              ],
              "locked": true
            }
            

          
          
                 
          ],
          "quiz": [
            {
              "question": "What is the purpose of the `let` keyword introduced in ES6?",
              "options": [
                "To declare global variables",
                "To create block-scoped variables",
                "To declare constants",
                "To create function-scoped variables"
              ],
              "correctAnswer": "To create block-scoped variables",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of the following code snippet?\n\n```javascript\nconst fruit = \"Apple\";\nfruit = \"Banana\";\nconsole.log(fruit);\n```",
              "options": [
                "Apple",
                "Banana",
                "Error: Assignment to constant variable",
                "undefined"
              ],
              "correctAnswer": "Error: Assignment to constant variable",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do template literals improve string handling in JavaScript ES6?",
              "options": [
                "By allowing string concatenation with `+` operator",
                "By supporting multi-line strings and embedded expressions",
                "By converting strings to uppercase",
                "By escaping special characters in strings"
              ],
              "correctAnswer": "By supporting multi-line strings and embedded expressions",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the output of the following code snippet using arrow functions?\n\n```javascript\nconst addNumbers = (a, b) => a + b;\nconsole.log(addNumbers(5, 3));\n```",
              "options": ["5", "3", "8", "Error"],
              "correctAnswer": "8",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which of the following is a correct way to use destructuring to extract values from an object?",
              "options": [
                "```javascript\nconst { key1, key2 } = object;\n```",
                "```javascript\nconst key1, key2 = object;\n```",
                "```javascript\nconst key1 = object.key1;\nconst key2 = object.key2;\n```",
                "```javascript\nconst object = { key1, key2 };\n```"
              ],
              "correctAnswer": "```javascript\nconst { key1, key2 } = object;\n```",
              "points": 2,
              "locked": true
            },
            {
              "question": "What does the `rest` parameter do in a function definition?",
              "options": [
                "It allows a function to accept a variable number of arguments as an array",
                "It defines a fixed number of arguments for the function",
                "It creates a default value for function arguments",
                "It spreads the arguments across multiple functions"
              ],
              "correctAnswer": "It allows a function to accept a variable number of arguments as an array",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the purpose of the JavaScript spread operator?",
              "options": [
                "To merge objects into one.",
                "To expand elements of an iterable into individual elements.",
                "To copy an object.",
                "To iterate over elements in an array."
              ],
              "correctAnswer": "To expand elements of an iterable into individual elements.",
              "points": 2,
              "locked": true
            },
            {
              "question": "What will be the output of `console.log(...numbers)` where `let numbers = [1, 2, 3]`?",
              "options": ["[1, 2, 3]", "1 2 3", "1,2,3", "undefined"],
              "correctAnswer": "1 2 3",
              "points": 2,
              "locked": true
            },
            {
              "question": "What is the difference between `Map` and `Object` in JavaScript?",
              "options": [
                "Map can only contain strings as keys, while Object can contain any data type.",
                "Map maintains insertion order of keys, while Object does not.",
                "Map is iterable, while Object is not.",
                "Object supports various methods for manipulation, while Map does not."
              ],
              "correctAnswer": "Map maintains insertion order of keys, while Object does not.",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which method removes all elements from a Set?",
              "options": ["delete()", "clear()", "remove()", "discard()"],
              "correctAnswer": "clear()",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "Using let, const, and Template Literals",
              "description": "Practice using `let`, `const`, and template literals introduced in ES6.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "In this activity, you will write JavaScript code using ES6 features such as `let`, `const`, and template literals.\n\n1. Declare a constant `name` and assign it the value `'John'`.\n\n2. Declare a `let` variable `age` and assign it the value `30`.\n\n3. Use a template literal to print the message 'My name is John and I am 30 years old.' by replacing 'John' and '30' with the values of `name` and `age`.\n\nEnsure that the code executes without any errors and prints the correct message.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "const name = 'John';\nlet age = 30;\nconsole.log(`My name is ${name} and I am ${age} years old.`);",
                  "output": "My name is John and I am 30 years old.",
                  "required": [
                    "const name = 'John';",
                    "let age = 30;",
                    "console.log(`My name is ${name} and I am ${age} years old.`);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare a constant `name` with the value 'John'.",
                    "Declare a `let` variable `age` with the value 30.",
                    "Use a template literal to print 'My name is John and I am 30 years old.' by inserting `name` and `age` in the message."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Destructuring Arrays and Objects",
              "description": "Practice using ES6 destructuring syntax to unpack values from arrays and objects.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "In this activity, you will practice destructuring arrays and objects. You will unpack values from an array and object and print them.\n\n1. Declare an array `colors` with the values `['red', 'green', 'blue']` and use destructuring to assign the first two values to variables `color1` and `color2`. Print both.\n\n2. Declare an object `person` with properties `name` and `age`. Use destructuring to assign the values to variables `name` and `age` and print them.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "let colors = ['red', 'green', 'blue'];\nlet [color1, color2] = colors;\nconsole.log(color1);\nconsole.log(color2);\nlet person = {name: 'John', age: 25};\nlet {name, age} = person;\nconsole.log(name);\nconsole.log(age);",
                  "output": "red\ngreen\nJohn\n25",
                  "required": [
                    "let colors = ['red', 'green', 'blue'];",
                    "let [color1, color2] = colors;",
                    "let person = {name: 'John', age: 25};",
                    "let {name, age} = person;"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Declare an array `colors` with a value of ['red','green','blue']",
                    "Use destructuring to unpack the first two values of the colors array.",
                    "Declare an object `person`",
                    "Use destructuring to unpack `name` and `age`."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Template Literals and Default Parameters",
              "description": "Learn to use template literals and default parameter values in functions.",
              "language": "JavaScriptConsole",
              "difficulty": "medium",
              "problemStatement": "Create a function that takes two parameters. Use template literals to create a message string that includes these parameters. Also, set default values for the parameters and show how they are used if no argument is provided.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": "// Function with default parameters and template literals\nfunction createGreeting(firstName = 'Guest', lastName = 'User') {\n    console.log(`Hello, ${firstName} ${lastName}!`);\n}\n\n// Test the function with different arguments\ncreateGreeting('Jack', 'Sparrow'); // Should print: Hello, Jack Sparrow!\ncreateGreeting('Alice'); // Should print: Hello, Alice User!\ncreateGreeting(); // Should print: Hello, Guest User!"
              },
              "testCases": [
                {
                  "input": "createGreeting('Jack', 'Sparrow');\ncreateGreeting('Alice');\ncreateGreeting();",
                  "output": "Hello, Jack Sparrow!\nHello, Alice User!\nHello, Guest User!",
                  "required": [
                    "createGreeting('Jack', 'Sparrow');",
                    "createGreeting('Alice');",
                    "createGreeting();"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Call the `createGreeting` function with two parameters: `'Jack'` and `'Sparrow'`, and print the greeting.",
                    "Call the function with only one parameter and print the greeting with the default last name.",
                    "Call the function without any parameters and print the greeting with the default names."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            }
          ],
          
          "totalPoints": 0,
          "locked": true
        },

        {
          "title": "Lesson: JavaScript DOM Basics",
          "documents": [
            {
              "title": "Introduction to the DOM",
              "content": [
                {
                  "type": "sentence",
                  "text": "The Document Object Model (DOM) is a programming interface for HTML documents."
                },
                {
                  "type": "sentence",
                  "text": "It represents the structure of a document as a tree-like hierarchy of objects."
                },
                {
                  "type": "sentence",
                  "text": "The DOM allows JavaScript to access and change the content and structure of a web page."
                },
                {
                  "type": "sentence",
                  "text": "Key parts of the DOM include:"
                },
                {
                  "type": "snippet",
                  "code": "- Document: The entire web page\n- Elements: HTML tags in the document\n- Attributes: Extra information for elements\n- Text: The content within elements"
                },
                {
                  "type": "sentence",
                  "text": "Example of accessing the DOM:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "// Change the text of an element\nconst heading = document.getElementById('mainHeading');\nheading.textContent = 'Welcome to the DOM!';\n\n// Change the color of an element\nheading.style.color = 'blue';",
                  "supportingCode": "<html>\n<body>\n  <h1 id=\"mainHeading\">Hello, DOM!</h1>\n</body>\n</html>"
                }
              ],
              "locked": true
            },
            {
              "title": "Selecting DOM Elements",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript provides several ways to select DOM elements:"
                },
                {
                  "type": "snippet",
                  "code": "1. getElementById(): Selects a single element by its ID\n2. getElementsByClassName(): Selects elements by their class name\n3. getElementsByTagName(): Selects elements by their tag name\n4. querySelector(): Selects the first element that matches a CSS selector\n5. querySelectorAll(): Selects all elements that match a CSS selector"
                },
                {
                  "type": "sentence",
                  "text": "Examples of selecting elements:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "// Select by ID and change text\nconst element = document.getElementById('myId');\nelement.textContent = 'Changed by ID';\n\n// Select by class name and change color\nconst elements = document.getElementsByClassName('myClass');\nfor (let el of elements) {\n  el.style.color = 'red';\n}\n\n// Select by tag name and add border\nconst paragraphs = document.getElementsByTagName('p');\nfor (let p of paragraphs) {\n  p.style.border = '1px solid black';\n}\n\n// Select using CSS selector and change background\nconst firstElement = document.querySelector('.myClass');\nfirstElement.style.backgroundColor = 'yellow';\n\n// Select all matching elements and add padding\nconst allElements = document.querySelectorAll('.myClass');\nallElements.forEach(el => el.style.padding = '10px');",
                  "supportingCode": "<div id=\"myId\">This is a div with ID</div>\n<p class=\"myClass\">This is a paragraph with class</p>\n<p>This is another paragraph</p>\n<span class=\"myClass\">This is a span with class</span>"
                }
              ],
              "locked": true
            },
            {
              "title": "Creating and Removing DOM Elements",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript allows you to create new elements and remove existing ones from the web page."
                },
                {
                  "type": "sentence",
                  "text": "Creating a new element:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "// Create a new paragraph element\nconst newParagraph = document.createElement('p');\n\n// Add text to the paragraph\nnewParagraph.textContent = 'This is a new paragraph.';\n\n// Add the new paragraph to the body\ndocument.body.appendChild(newParagraph);\n\n// Show the updated body content\nconst bodyContent = document.body.innerHTML;\ndocument.getElementById('output').textContent = bodyContent;",
                  "supportingCode": "<body>\n  <h1>Original Content</h1>\n  <div id=\"output\"></div>\n</body>"
                },
                {
                  "type": "sentence",
                  "text": "Removing an element:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "// Select the element to remove\nconst elementToRemove = document.getElementById('removeMe');\n\n// Remove the element\nelementToRemove.remove();\n\n// Show the updated body content\nconst bodyContent = document.body.innerHTML;\ndocument.getElementById('output').textContent = bodyContent;",
                  "supportingCode": "<body>\n  <div id=\"removeMe\">Remove this element</div>\n  <div>Keep this element</div>\n  <div id=\"output\"></div>\n</body>"
                },
                {
                  "type": "sentence",
                  "text": "When you remove an element, all of its child elements are also removed from the web page."
                }
              ],
              "locked": true
            },
            {
              "title": "Responding to User Actions with Events",
              "content": [
                {
                  "type": "sentence",
                  "text": "DOM events allow your JavaScript code to react when something happens on the web page."
                },
                {
                  "type": "sentence",
                  "text": "Adding an event listener:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "const button = document.getElementById('myButton');\nconst output = document.getElementById('output');\n\nbutton.addEventListener('click', function() {\n  output.textContent = 'Button was clicked!';\n});\n\n// You can click the button to see the result",
                  "supportingCode": "<button id=\"myButton\">Click me</button>\n<div id=\"output\"></div>"
                },
                {
                  "type": "sentence",
                  "text": "Common DOM events include:"
                },
                {
                  "type": "snippet",
                  "code": "- click: When an element is clicked\n- mouseover: When the mouse moves over an element\n- keydown: When a key is pressed\n- load: When a page finishes loading\n- submit: When a form is submitted"
                },
                {
                  "type": "sentence",
                  "text": "Removing an event listener:"
                },
                {
                  "type":"javascriptweb",
                  "language": "javascript",
                  "code": "function handleClick() {\n  output.textContent = 'Button was clicked!';\n}\n\nbutton.addEventListener('click', handleClick);\n\n// Later, when you want to remove the event listener:\nbutton.removeEventListener('click', handleClick);\n\noutput.textContent = 'Event listener removed. Try clicking the button now.';",
                  "supportingCode": "<button id=\"myButton\">Click me</button>\n<div id=\"output\"></div>"
                },
                {
                  "type": "sentence",
                  "text": "To remove an event listener, you need to use the same function that was originally added to the event."
                }
              ],
              "locked": true
            }
          ],
          "quiz": [
            {
              "question": "What does DOM stand for?",
              "options": [
                "Document Object Model",
                "Data Object Model",
                "Document Oriented Model",
                "Digital Object Model"
              ],
              "correctAnswer": "Document Object Model",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which method is used to select a single element by its ID?",
              "options": [
                "querySelector()",
                "getElementsByClassName()",
                "getElementById()",
                "getElementsByTagName()"
              ],
              "correctAnswer": "getElementById()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you change the text content of an element?",
              "options": [
                "element.innerText = 'New content';",
                "element.textContent = 'New content';",
                "element.innerHTML = 'New content';",
                "element.content = 'New content';"
              ],
              "correctAnswer": "element.textContent = 'New content';",
              "points": 2,
              "locked": true
            },
            {
              "question": "Which method is used to create a new DOM element?",
              "options": [
                "document.makeElement()",
                "document.createElement()",
                "document.newElement()",
                "document.addElement()"
              ],
              "correctAnswer": "document.createElement()",
              "points": 2,
              "locked": true
            },
            {
              "question": "How do you add an event listener to an element?",
              "options": [
                "element.addEvent('click', function() {});",
                "element.addEventListener('click', function() {});",
                "element.on('click', function() {});",
                "element.eventListener('click', function() {});"
              ],
              "correctAnswer": "element.addEventListener('click', function() {});",
              "points": 2,
              "locked": true
            }
          ],
          "activities": [
            {
              "title": "DOM Element Selection and Modification",
              "description": "Practice selecting and modifying DOM elements.",
              "language": "JavaScriptWeb",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will select a paragraph element by its ID and change its text content.\n\n1. Use getElementById() to select the paragraph with the ID 'myParagraph'.\n2. Change the text content of the selected paragraph to 'This text has been changed!'.\n\nEnsure that your code executes without any errors and modifies the paragraph's content correctly.",
              "codeEditor": {
                "html": "<p id=\"myParagraph\">Original text content</p>",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "const paragraph = document.getElementById('myParagraph');\nparagraph.textContent = 'This text has been changed!';",
                  "output": "This text has been changed!",
                  "required": [
                    "document.getElementById('myParagraph')",
                    ".textContent = 'This text has been changed!'"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Select the paragraph element with ID 'myParagraph'.",
                    "Change the text content of the selected paragraph."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Changing Element Style",
              "description": "Practice changing the style of an element using JavaScript.",
              "language": "JavaScriptWeb",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will change the color of a text element.\n\n1. Select the heading element with the ID 'myHeading' using document.getElementById().\n2. Change the color of the selected heading to 'blue'.\n\nEnsure that your code executes without any errors and changes the color of the heading.",
              "codeEditor": {
                "html": "<h1 id=\"myHeading\">Welcome to DOM Manipulation</h1>",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "const heading = document.getElementById('myHeading');\nheading.style.color = 'blue';",
                  "output": "<h1 id=\"myHeading\" style=\"color: blue;\">Welcome to DOM Manipulation</h1>",
                  "required": [
                    "document.getElementById('myHeading')",
                    ".style.color = 'blue'"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Select the heading element with ID 'myHeading'.",
                    "Change the color of the heading to blue."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Changing Image Source",
              "description": "Practice changing the source of an image element using JavaScript.",
              "language": "JavaScriptWeb",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will change the source of an image element.\n\n1. Select the image element with the ID 'myImage' using document.getElementById().\n2. Change the src attribute of the selected image to 'https://example.com/new-image.jpg'.\n\nEnsure that your code executes without any errors and changes the image source.",
              "codeEditor": {
                "html": "<img id=\"myImage\" src=\"https://example.com/original-image.jpg\" alt=\"My Image\">",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "const image = document.getElementById('myImage');\nimage.src = '/cat.png';",
                  "output": "<img id=\"myImage\" src=\"/cat.png\" alt=\"My Image\">",
                  "required": [
                    "document.getElementById('myImage')",
                    ".src = '/cat.png'"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Select the image element with ID 'myImage'.",
                    "Change the src attribute of the image to '/cat.png'."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
            {
              "title": "Change Text on Button Click",
              "description": "Practice changing text content when a button is clicked.",
              "language": "JavaScriptWeb",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will change the text of a paragraph when a button is clicked.\n\n1. Select the button element with the ID 'changeTextBtn'.\n2. Select the paragraph element with the ID 'displayText'.\n3. Add a click event listener to the button.\n4. When the button is clicked, change the text of the paragraph to 'Text changed!'.\n\nEnsure that your code executes without any errors and changes the paragraph text when the button is clicked.",
              "codeEditor": {
                "html": "<button id=\"changeTextBtn\">Click me</button>\n<p id=\"displayText\">Original text</p>",
                "css": "",
                "js": "// Your JavaScript code goes here"
              },
              "testCases": [
                {
                  "input": "const button = document.getElementById('changeTextBtn');\nconst paragraph = document.getElementById('displayText');\n\nbutton.addEventListener('click', function() {\n  paragraph.textContent = 'Text changed!';\n});",
                  "output": "Paragraph text changes to 'Text changed!' when button is clicked",
                  "required": [
                    "const button = document.getElementById('changeTextBtn')",
                    "const paragraph = document.getElementById('displayText')",
                    "button.addEventListener('click'",
                    "function () {",
                    "paragraph.textContent = 'Text changed!'"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Select the button and assign it to a let variable called button.",
                    "Select the paragraph and assign it to a let variable called paragraph.",
                    "Add a click event listener to the button.",
                    "Create a function inside the event listener.",
                    "Inside the function, Change the paragraph's text content to 'Text changed!' when the button is clicked."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            }
          ],
          "totalPoints": 0,
          "locked": true
        }
      ],
      "badges":"JS Master",
      "locked": true
    }
  ]
}
