{
  "courses": [
    {
      "title": "JavaScript",
      "lessons": [
        {
          "title": "Lesson 1: JS Introduction",
          "documents": [
            {
              "title": "JS Introduction?",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript is a versatile, high-level programming language that is widely supported across all major operating systems."
              },
              {
                  "type": "sentence",
                  "text": "To run JavaScript code, your system should have Node.js installed. Alternatively, you can use our free online editor to execute JavaScript directly in your browser without any installation."
              },
              {
                  "type": "sentence",
                  "text": "For those who prefer to install JavaScript on your computer, this guide will walk you through the installation process on Windows, macOS, and Linux (Ubuntu)."
              },
              {
                  "type": "sentence",
                  "text": "Install JavaScript on Windows: To install JavaScript on your Windows, just follow these steps:"
              },
              {
                  "type": "sentence",
                  "text": "Step 1: Install VS Code"
              },
              {
                  "type": "sentence",
                  "text": "Go to the VS Code Official website and download the Windows installer. Once the download is complete, run the installer and follow the installation process. Click Finish to complete the installation process."
              },
              {
                  "type": "sentence",
                  "text": "Step 2: Download the Node File"
              },
              {
                  "type": "sentence",
                  "text": "Go to the official Node website and download the Node LTS version."
              },
              {
                  "type": "sentence",
                  "text": "Step 3: Run the Installer"
              },
              {
                  "type": "sentence",
                  "text": "Now, go to your download folder and run the msi file you just downloaded. Depending on your security settings, you might be prompted to allow access. Just click on Next. Simply allow it and proceed. Then you will come across the install part. Simply click on install, Node will be successfully installed in your device."
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "console.log(\"Hello World\")"
              },
              {
                  "type": "sentence",
                  "text": "Step 4: Verify your installation"
              },
              {
                  "type": "sentence",
                  "text": "After the installation is complete, you can verify whether JavaScript is installed by using the following command in the command prompt: node --version. Note: The version number might differ from the one above, depending on your installed version. Now, you are all set to run JavaScript programs on your device."
              },
              {
                  "type": "sentence",
                  "text": "Run Your First JavaScript Program: First open VS Code, click on the File in the top menu and then select New File. Then, save this file with a .js extension by clicking on File again, then Save As, and type your filename ending in .js. (Here, we are saving it as helloWorld.js)."
              },
              {
                  "type": "sentence",
                  "text": "Before you start coding, make sure the extension Code Runner is installed in VS Code. Open VS Code and click on Extensions on the left sidebar. Then, search for the Code Runner and click on install."
              },
              {
                  "type": "sentence",
                  "text": "Now, write the following code into your helloWorld.js file: console.log(\"Hello World\")."
              },
              {
                  "type": "sentence",
                  "text": "Then click on the run button on the top right side of your screen. You should see Hello World! printed to the output."
              },
              {
                  "type": "sentence",
                  "text": "Now that you have set everything up to run JavaScript programs on your computer, you'll be learning how the basic program works in JavaScript in the next tutorial."
              }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Variables and Constants",
              "content": [
                  {
                      "type": "sentence",
                      "text": "A JavaScript variable is a container for storing data."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let num = 5;"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, num is a variable that stores the number 5."
                  },
                  {
                      "type": "sentence",
                      "text": "Declare Variables in JavaScript: In JavaScript, we use the var or let keywords to declare variables."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "var age;\nlet name;"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, age and name are variables."
                  },
                  {
                      "type": "sentence",
                      "text": "What is the difference between var and let? Both var and let are used to declare variables. However, there are some differences between them."
                  },
                  {
                      "type": "sentence",
                      "text": "var is used in older versions of JavaScript."
                  },
                  {
                      "type": "sentence",
                      "text": "Variables created with var are function-scoped, meaning they can be accessed anywhere within the function they were defined in."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "var x;"
                  },
                  {
                      "type": "sentence",
                      "text": "let is the new way of declaring variables, starting with ES6 (ES2015)."
                  },
                  {
                      "type": "sentence",
                      "text": "Variables declared with let are block-scoped, meaning they can only be accessed within the block where they were declared."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let y;"
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more, visit JavaScript let Vs var."
                  },
                  {
                      "type": "sentence",
                      "text": "Note: It is recommended we use let instead of var. However, there are a few browsers that do not support let. To learn more, visit JavaScript let browser support."
                  },
                  {
                      "type": "sentence",
                      "text": "Initialize Variables in JavaScript: We use the assignment operator = to assign a value to a variable."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// declare variable num\nlet num;\n\n// assign 5 to num\nnum = 5;"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, 5 is assigned to the variable num."
                  },
                  {
                      "type": "sentence",
                      "text": "You can also initialize variables during its declaration."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// declare variable num1 and assign 5 to it\nlet num1 = 5;\n\n// declare variable num2 and assign 6 to it\nlet num2 = 6;"
                  },
                  {
                      "type": "sentence",
                      "text": "Declare multiple variables in a single statement. In JavaScript, it's possible to declare multiple variables in a single statement."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// declare variables num1, num2, and num3\n// assign values 5, 6, and 7 respectively\nlet num1 = 5, num2 = 6, num3 = 7;"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, we have declared and assigned values to three variables in a single line:"
                  },
                  {
                      "type": "sentence",
                      "text": "The value assigned to num1 is 5."
                  },
                  {
                      "type": "sentence",
                      "text": "The value assigned to num2 is 6."
                  },
                  {
                      "type": "sentence",
                      "text": "The value assigned to num3 is 7."
                  },
                  {
                      "type": "sentence",
                      "text": "Use a variable without initializing it."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// declare variable num\nlet num;\n\n// print num\nconsole.log(num);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output: undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, we have declared a variable named num. However, since it does not contain any value, its value is undefined."
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more about undefined, visit JavaScript null and undefined."
                  },
                  {
                      "type": "sentence",
                      "text": "Change the Value of Variables: The value of a variable may vary. Hence, the name variable."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// assign 5 to variable score\nlet score = 5;\nconsole.log(score); // 5\n\n// change the value of score to 3\nscore = 3;\nconsole.log(score); // 3"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, the value of the score variable is changed from 5 to 3 when we assign a new value to it."
                  },
                  {
                      "type": "sentence",
                      "text": "Rules for Naming JavaScript Variables: Variable names must start with a letter, an underscore _, or the dollar sign $. For example:"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// valid\nlet message = \"hello\";\nlet _message = \"hello\";\nlet $message = \"hello\";"
                  },
                  {
                      "type": "sentence",
                      "text": "Variables cannot start with numbers. For example:"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// invalid\nlet 1message = \"hello\"; // this gives an error"
                  },
                  {
                      "type": "sentence",
                      "text": "Variable names are case-sensitive. So age and Age are different variables. For example:"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let age = 23;\nlet Age = 20;\n\nconsole.log(age); // 23\nconsole.log(Age); // 20"
                  },
                  {
                      "type": "sentence",
                      "text": "Variable names cannot be keywords (special words reserved for specific purposes in JavaScript such as if, else, let, var, etc.). For example:"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "//invalid\nlet new = 5; // Error! new is a keyword"
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript Constants: A constant is a type of variable whose value cannot be changed."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// assign 5 to num \nconst num = 5;"
                  },
                  {
                      "type": "sentence",
                      "text": "Once a constant is initialized, we cannot change its value."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// assign 5 to num\nconst num = 5;\n\n// assign 10 to num\nnum = 10;\nconsole.log(num) // Error! constant cannot be changed"
                  },
                  {
                      "type": "sentence",
                      "text": "Always Initialize a Constant During Declaration: If you do not initialize a constant at the time of declaration, it throws an error."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// Error! Missing initializer in const declaration\nconst x;\n\n// attempt to initialize constant after declaration\nx = 5;\n\nconsole.log(x)"
                  },
                  {
                      "type": "sentence",
                      "text": "Note: If you are sure that the value of a variable won't change throughout the program, we recommend you use const."
                  },
                  {
                      "type": "sentence",
                      "text": "However, there are a few browsers that do not support const. Visit JavaScript const browser support to learn more."
                  }
              ],
              "locked": true
            },
            {
              "title": "JavaScript console.log()",
              "content": [
                  {
                      "type": "sentence",
                      "text": "In JavaScript, the console.log() method displays messages or variables in the browser's console."
                  },
                  {
                      "type": "sentence",
                      "text": "Here's a quick example of console.log(). You can read the rest of the tutorial for more details."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let message = \"Hello, JavaScript!\";\nconsole.log(message);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output: Hello, JavaScript!"
                  },
                  {
                      "type": "sentence",
                      "text": "When we run the above code, Hello, JavaScript! is printed on the console."
                  },
                  {
                      "type": "sentence",
                      "text": "Syntax of JavaScript console.log()"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "console.log(message);"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, message is a value or a variable whose value is to be printed to the console."
                  },
                  {
                      "type": "sentence",
                      "text": "Example 1: JavaScript console.log() Method"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "console.log(\"Good Morning!\");\nconsole.log(2000);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "Good Morning!"
                  },
                  {
                      "type": "sentence",
                      "text": "2000"
                  },
                  {
                      "type": "sentence",
                      "text": "Here,"
                  },
                  {
                      "type": "sentence",
                      "text": "console.log(\"Good Morning!\") prints the string \"Good Morning!\" to the console."
                  },
                  {
                      "type": "sentence",
                      "text": "console.log(2000) prints the number 2000 to the console."
                  },
                  {
                      "type": "sentence",
                      "text": "Example 2: Print Values Stored in Variables"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// store value in greet variable\nconst greet = \"Hello\";\n\n// print the value of greet variable\nconsole.log(greet);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "Hello"
                  },
                  {
                      "type": "sentence",
                      "text": "In this example, we have used console.log() to print the value of the greet variable, which is set to the string \"Hello\"."
                  }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Data Types",
              "content": [
                {
                  "type": "sentence",
                  "text": "Data types represent the different kinds of values we can use in JavaScript."
              },
              {
                  "type": "sentence",
                  "text": "There are altogether 8 basic data types in JavaScript."
              },
              {
                  "type": "sentence",
                  "text": "The data types are as follows:"
              },
              {
                  "type": "sentence",
                  "text": "String: Textual data. Examples include 'hello' and \"hello world!\"."
              },
              {
                  "type": "sentence",
                  "text": "Number: An integer or a floating-point number. Examples include 3, 3.234, and 3e-2."
              },
              {
                  "type": "sentence",
                  "text": "BigInt: An integer with arbitrary precision. Examples include 900719925124740999n and 1n."
              },
              {
                  "type": "sentence",
                  "text": "Boolean: Any of two values: true or false."
              },
              {
                  "type": "sentence",
                  "text": "undefined: A data type whose variable is not initialized. Example: let a;"
              },
              {
                  "type": "sentence",
                  "text": "null: Denotes a null value. Example: let a = null;"
              },
              {
                  "type": "sentence",
                  "text": "Symbol: A data type whose instances are unique and immutable. Example: let value = Symbol('hello');"
              },
              {
                  "type": "sentence",
                  "text": "Object: Key-value pairs of a collection of data. Example: let student = {name: \"John\"};"
              },
              {
                  "type": "sentence",
                  "text": "Note: JavaScript data types are divided into primitive and non-primitive types."
              },
              {
                  "type": "sentence",
                  "text": "Primitive Data Types: They can hold a single simple value. String, Number, BigInt, Boolean, undefined, null, and Symbol are primitive data types."
              },
              {
                  "type": "sentence",
                  "text": "Non-Primitive Data Types: They can hold multiple values. Objects are non-primitive data types."
              },
                  {
                      "type": "sentence",
                      "text": "JavaScript String"
                  },
                  {
                      "type": "sentence",
                      "text": "A string represents textual data. It contains a sequence of characters. For example, \"hello\", \"JavaScript\", etc."
                  },
                  {
                      "type": "sentence",
                      "text": "In JavaScript, strings are surrounded by quotes:"
                  },
                  {
                      "type": "sentence",
                      "text": "Single quotes: 'Hello'"
                  },
                  {
                      "type": "sentence",
                      "text": "Double quotes: \"Hello\""
                  },
                  {
                      "type": "sentence",
                      "text": "Backticks: `Hello`"
                  },
                  {
                      "type": "sentence",
                      "text": "For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// string enclosed within single quotes\nlet fruit = 'apple';\nconsole.log(fruit);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "apple"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// string enclosed within double quotes\nlet country = \"USA\";\nconsole.log(country);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "USA"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// string enclosed within backticks\nlet result = `fail`;\nconsole.log(result);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "fail"
                  },
                  {
                      "type": "sentence",
                      "text": "In a string, we can either use single quotes or double quotes. However, it is recommended to use double quotes."
                  },
                  {
                      "type": "sentence",
                      "text": "Note: It is illegal to mismatch quotes in strings. For example, the strings 'hello\" and \"world' are enclosed inside one single quote and one double quote, which results in an error."
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more about strings, visit JavaScript String."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript Number"
                  },
                  {
                      "type": "sentence",
                      "text": "In JavaScript, the number type represents numeric values (both integers and floating-point numbers)."
                  },
                  {
                      "type": "sentence",
                      "text": "Integers - Numeric values without any decimal parts. Example: 3, -74, etc."
                  },
                  {
                      "type": "sentence",
                      "text": "Floating-Point - Numeric values with decimal parts. Example: 3.15, -1.3, etc."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// integer value\nlet integer_number = -3;\nconsole.log(integer_number);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "-3"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// floating-point value\nlet float_number = 3.15;\nconsole.log(float_number);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "3.15"
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more about numbers, visit JavaScript Number."
                  },
                  {
                      "type": "sentence",
                      "text": "Special Numeric Values"
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript can also represent special numeric values."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let number1 = 3 / 0;\nconsole.log(number1);  // Infinity"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "Infinity"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let number2 = -3 / 0;\nconsole.log(number2);  // -Infinity"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "-Infinity"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// strings can't be divided by numbers\nlet number3 = \"abc\" / 3;\nconsole.log(number3);  // NaN"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "NaN"
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript BigInt"
                  },
                  {
                      "type": "sentence",
                      "text": "BigInt is a type of number that can represent very large or very small integers beyond the range of the regular number data type."
                  },
                  {
                      "type": "sentence",
                      "text": "Note: The regular number data type can handle values less than (2^53 - 1) and greater than -(2^53 - 1)."
                  },
                  {
                      "type": "sentence",
                      "text": "A BigInt number is created by appending n to the end of an integer. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// BigInt value\nlet value1 = 900719925124740998n;\n\n// add two big integers\nlet result1 = value1 + 1n;\nconsole.log(result1);  // \"900719925124740999n\""
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "900719925124740999n"
                  },
                  {
                      "type": "sentence",
                      "text": "Note: BigInt was introduced in a newer version of JavaScript (ES11) and is not supported by many browsers, including Safari. To learn more, visit JavaScript BigInt support."
                  },
                  {
                      "type": "sentence",
                      "text": "You can't mix BigInt and number"
                  },
                  {
                      "type": "sentence",
                      "text": "You can't mix BigInt and number values."
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// BigInt value\nlet value = 900719925124740998n;\n\n// Error! BitInt and number cannot be added\nlet sum = value + 1;\nconsole.log(sum);"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "TypeError: Cannot mix BigInt and other types, use explicit conversions"
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript Boolean"
                  },
                  {
                      "type": "sentence",
                      "text": "A Boolean data can only have one of two values: true or false. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let dataChecked = true;\nconsole.log(dataChecked);  // true"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "true"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let valueCounted = false;\nconsole.log(valueCounted);  // false"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "false"
                  },
                  {
                      "type": "sentence",
                      "text": "If you want to learn more about booleans, visit JavaScript Booleans."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "In JavaScript, undefined represents the absence of a value."
                  },
                  {
                      "type": "sentence",
                      "text": "If a variable is declared but the value is not assigned, then the value of that variable will be undefined. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let name;\nconsole.log(name);  // undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "It is also possible to explicitly assign undefined as a variable value. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let name = undefined;\nconsole.log(name);  // undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "Note: You should avoid explicitly assigning undefined to a variable. Usually, we assign null to variables to indicate \"unknown\" or \"empty\" values."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript null"
                  },
                  {
                      "type": "sentence",
                      "text": "In JavaScript, null represents \"no value\" or \"nothing.\" For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let number = null;\nconsole.log(number);  // null"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "null"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, let number = null; indicates that the number variable is set to have no value."
                  },
                  {
                      "type": "sentence",
                      "text": "Visit JavaScript null and undefined to learn more."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript Symbol"
                  },
                  {
                      "type": "sentence",
                      "text": "A Symbol is a unique and primitive value. This data type was introduced in ES6."
                  },
                  {
                      "type": "sentence",
                      "text": "When you create a Symbol, JavaScript guarantees that it is distinct from all other symbols, even if they have the same descriptions. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// two symbols with the same description\nlet value1 = Symbol(\"CodeCraft\");\nlet value2 = Symbol(\"CodeCraft\");\n\nconsole.log(value1 === value2);  // false"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "false"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, we have used === to compare value1 and value2. It returns true if the two values are exactly the same. Otherwise, it returns false."
                  },
                  {
                      "type": "sentence",
                      "text": "Though both value1 and value2 contain \"CodeCraft\", JavaScript treats them as different since they are of the Symbol type. Hence, value1 === value2 returns false."
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more, visit JavaScript Symbol."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript Object"
                  },
                  {
                      "type": "sentence",
                      "text": "An Object holds data in the form of key-value pairs. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let student = {\n    firstName: \"John\",\n    lastName: null,\n    class: 10\n};"
                  },
                  {
                      "type": "sentence",
                      "text": "Here, we have created an object named student that contains key-value pairs:"
                  },
                  {
                      "type": "sentence",
                      "text": "Key - Value"
                  },
                  {
                      "type": "sentence",
                      "text": "firstName - \"John\""
                  },
                  {
                      "type": "sentence",
                      "text": "lastName - null"
                  },
                  {
                      "type": "sentence",
                      "text": "class - 10"
                  },
                  {
                      "type": "sentence",
                      "text": "To learn more, visit JavaScript Objects."
                  },
                  {
                      "type": "sentence",
                      "text": "More on JavaScript Data Types"
                  },
                  {
                      "type": "sentence",
                      "text": "How can you check the data type of a variable?"
                  },
                  {
                      "type": "sentence",
                      "text": "You can use the typeof operator to find the data type of a variable. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let name = \"ram\";\nconsole.log(typeof(name));  // string"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "string"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let number = 4;\nconsole.log(typeof(number));  // number"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "number"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let valueChecked = true;\nconsole.log(typeof(valueChecked));  // boolean"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "boolean"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "let a = null;\nconsole.log(typeof(a));  // object"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "object"
                  },
                  {
                      "type": "sentence",
                      "text": "Note: Notice that typeof returned object for the null type. This has been a known issue in JavaScript since its first release."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript automatically determines the variable's data type."
                  },
                  {
                      "type": "sentence",
                      "text": "JavaScript determines the type of a variable based on the value assigned to it."
                  },
                  {
                      "type": "sentence",
                      "text": "As a result, changing the value of a variable can also change its type, provided the new value is of a different type. For example,"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// data is of undefined type\nlet data;\nconsole.log(typeof(data));  // undefined"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "undefined"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// data is of number type\ndata = 5;\nconsole.log(typeof(data));  // number"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "number"
                  },
                  {
                      "type": "code",
                      "language": "javascript",
                      "code": "// data is of string type\ndata = \"JavaScript Programming\";\nconsole.log(typeof(data));  // string"
                  },
                  {
                      "type": "sentence",
                      "text": "Output"
                  },
                  {
                      "type": "sentence",
                      "text": "string"
                  }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Operators",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript operators are special symbols that perform operations on one or more operands (values)."
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "2 + 3;  // 5"
              },
              {
                "type": "sentence",
                "text": "Here, we used the + operator to add the operands 2 and 3."
              },
              {
                  "type": "sentence",
                  "text": "JavaScript Operator Types"
              },
              {
                "type": "sentence",
                "text": "Here is a list of different JavaScript operators you will learn in this tutorial:"
              },
              {
                  "type": "sentence",
                  "text": "1. Arithmetic Operators"
              },
              {
                  "type": "sentence",
                  "text": "2. Assignment Operators"
              },
              {
                  "type": "sentence",
                  "text": "3. Comparison Operators"
              },
              {
                  "type": "sentence",
                  "text": "4. Logical Operators"
              },
              {
                  "type": "sentence",
                  "text": "5. Bitwise Operators"
              },
              {
                  "type": "sentence",
                  "text": "6. String Operators"
              },
              {
                  "type": "sentence",
                  "text": "7. Miscellaneous Operators"
              },
              {
                  "type": "sentence",
                  "text": "1. JavaScript Arithmetic Operators"
              },
              {
                  "type": "sentence",
                  "text": "We use arithmetic operators to perform arithmetic calculations like addition, subtraction, etc. For example,"
              },
              {
                  "type": "code",
                  "language": "javascript",
                  "code": "5 - 3;  // 2"
              },
              {
                  "type": "sentence",
                  "text": "Here, we used the - operator to subtract 3 from 5."
              },
              {
                "type": "sentence",
                "text": "A. Operator: + (Addition)"
            },
            {
                "type": "sentence",
                "text": "Output: 3 + 4  // 7"
            },
            {
                "type": "sentence",
                "text": "B. Operator: - (Subtraction)"
            },
            {
                "type": "sentence",
                "text": "Output: 5 - 3  // 2"
            },
            {
                "type": "sentence",
                "text": "C. Operator: * (Multiplication)"
            },
            {
                "type": "sentence",
                "text": "Output: 2 * 3  // 6"
            },
            {
                "type": "sentence",
                "text": "D. Operator: / (Division)"
            },
            {
                "type": "sentence",
                "text": "Output: 4 / 2  // 2"
            },
            {
                "type": "sentence",
                "text": "E. Operator: % (Remainder)"
            },
            {
                "type": "sentence",
                "text": "Output: 5 % 2  // 1"
            },
            {
                "type": "sentence",
                "text": "F. Operator: ++ Increment (increments by 1)"
            },
            {
                "type": "sentence",
                "text": "Output: ++5 or 5++  // 6"
            },
            {
                "type": "sentence",
                "text": "G. Operator: -- Decrement (decrements by 1)"
            },
            {
                "type": "sentence",
                "text": "Output: --4 or 4--  // 3"
            },
            {
                "type": "sentence",
                "text": "H. Operator: ** Exponentiation (Power)"
            },
            {
                "type": "sentence",
                "text": "Output: 4 ** 2  // 16"
            },
            {
          "type": "sentence",
          "text": "Example 1: Arithmetic Operators in JavaScript"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "let x = 5;"
      },
      {
          "type": "sentence",
          "text": "Perform arithmetic operations and display the results."
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// addition operator\nconsole.log(\"Addition: x + 3 = \", x + 3);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// subtraction operator\nconsole.log(\"Subtraction: x - 3 =\", x - 3);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// multiplication operator\nconsole.log(\"Multiplication: x * 3 =\", x * 3);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// division operator\nconsole.log(\"Division: x / 3 =\", x / 3);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// remainder operator\nconsole.log(\"Remainder: x % 3 =\", x % 3);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// increment operator\nconsole.log(\"Increment: ++x =\", ++x);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// decrement operator\nconsole.log(\"Decrement: --x =\", --x);"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "// exponentiation operator\nconsole.log(\"Exponentiation: x ** 3 =\", x ** 3);"
      },
      {
          "type": "sentence",
          "text": "Output"
      },
      {
          "type": "code",
          "language": "javascript",
          "code": "Addition: x + 3 =  8\nSubtraction: x - 3 = 2\nMultiplication: x * 3 = 15\nDivision: x / 3 = 1.6666666666666667\nRemainder: x % 3 = 2\nIncrement: ++x = 6\nDecrement: --x = 5\nExponentiation: x ** 3 = 125"
      },
        {
          "type": "sentence",
          "text": "Note: The increment operator ++ adds 1 to the operand. And, the decrement operator -- decreases the value of the operand by 1."
      },
      {
        "type": "sentence",
        "text": "To learn more, visit Increment ++ and Decrement -- Operators."
    },
    {
      "type": "sentence",
      "text": "2. JavaScript Assignment Operators"
  },
    {
      "type": "sentence",
      "text": "We use assignment operators to assign values to variables. For example,"
  },
  {
      "type": "code",
      "language": "javascript",
      "code": "let x = 5;"
  },
  {
      "type": "sentence",
      "text": "Here, we used the = operator to assign the value 5 to the variable x."
  },
  {
      "type": "sentence",
      "text": "Commonly Used Assignment Operators"
  },
  {
    "type": "sentence",
    "text": "A. Operator: = (Assignment Operator)"
},
{
    "type": "sentence",
    "text": "Example: a = 7;"
},
{
    "type": "sentence",
    "text": "B. Operator: += (Addition Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a += 5;  // a = a + 5"
},
{
    "type": "sentence",
    "text": "C. Operator: -= (Subtraction Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a -= 2;  // a = a - 2"
},
{
    "type": "sentence",
    "text": "D. Operator: *= (Multiplication Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a *= 3;  // a = a * 3"
},
{
    "type": "sentence",
    "text": "E. Operator: /= (Division Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a /= 2;  // a = a / 2"
},
{
    "type": "sentence",
    "text": "F. Operator: %= (Remainder Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a %= 2;  // a = a % 2"
},
{
    "type": "sentence",
    "text": "G. Operator: **= (Exponentiation Assignment)"
},
{
    "type": "sentence",
    "text": "Example: a **= 2;  // a = a**2"
},
{
  "type": "sentence",
  "text": "Example 2: Assignment Operators in JavaScript"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// assignment operator\nlet a = 7;\nconsole.log(\"Assignment: a = 7, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// addition assignment operator\na += 5;  // a = a + 5\nconsole.log(\"Addition Assignment: a += 5, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// subtraction assignment operator\na -= 5;  // a = a - 5\nconsole.log(\"Subtraction Assignment: a -= 5, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// multiplication assignment operator\na *= 2;  // a = a * 2\nconsole.log(\"Multiplication Assignment: a *= 2, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// division assignment operator\na /= 2;  // a = a / 2\nconsole.log(\"Division Assignment: a /= 2, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// remainder assignment operator\na %= 2;  // a = a % 2\nconsole.log(\"Remainder Assignment: a %= 2, a =\", a);"
},
{
  "type": "code",
  "language": "javascript",
  "code": "// exponentiation assignment operator\na **= 2;  // a = a**2\nconsole.log(\"Exponentiation Assignment: a **= 2, a =\", a);"
},
{
  "type": "sentence",
  "text": "Output"
},
{
  "type": "code",
  "language": "javascript",
  "code": "Assignment: a = 7, a = 7\nAddition Assignment: a += 5, a = 12\nSubtraction Assignment: a -= 5, a = 7\nMultiplication Assignment: a *= 2, a = 14\nDivision Assignment: a /= 2, a = 7\nRemainder Assignment: a %= 2, a = 1\nExponentiation Assignment: a **= 2, a = 1"
},
{
"type": "sentence",
"text": "3. JavaScript Comparison Operators"
},
{
"type": "sentence",
"text": "We use comparison operators to compare two values and return a boolean value (true or false). For example,"
},
{
"type": "code",
"language": "javascript",
"code": "const a = 3, b = 2;\nconsole.log(a > b);\n\nOutput: true"
},
{
"type": "sentence",
"text": "Here, we have used the > comparison operator to check whether a (whose value is 3) is greater than b (whose value is 2)."
},
{
"type": "sentence",
"text": "Since 3 is greater than 2, we get true as output."
},
{
"type": "sentence",
"text": "Note: In the above example, a > b is called a boolean expression since evaluating it results in a boolean value."
},
{
"type": "sentence",
"text": "Commonly Used Comparison Operators"
},
{
"type": "sentence",
"text": "A. Operator: == (Equal to)"
},
{
"type": "sentence",
"text": "Example: 3 == 5 gives us false"
},
{
"type": "sentence",
"text": "B. Operator: != (Not equal to)"
},
{
"type": "sentence",
"text": "Example: 3 != 4 gives us true"
},
{
"type": "sentence",
"text": "C. Operator: > (Greater than)"
},
{
"type": "sentence",
"text": "Example: 4 > 4 gives us false"
},
{
"type": "sentence",
"text": "D. Operator: < (Less than)"
},
{
"type": "sentence",
"text": "Example: 3 < 3 gives us false"
},
{
"type": "sentence",
"text": "E. Operator: >= (Greater than or equal to)"
},
{
"type": "sentence",
"text": "Example: 4 >= 4 gives us true"
},
{
"type": "sentence",
"text": "F. Operator: <= (Less than or equal to)"
},
{
"type": "sentence",
"text": "Example: 3 <= 3 gives us true"
},
{
"type": "sentence",
"text": "G. Operator: === (Strictly equal to)"
},
{
"type": "sentence",
"text": "Example: 3 === \"3\" gives us false"
},
{
"type": "sentence",
"text": "H. Operator: !== (Strictly not equal to)"
},
{
"type": "sentence",
"text": "Example: 3 !== \"3\" gives us true"
},
{
"type": "sentence",
"text": "Example 3: Comparison Operators in JavaScript"
},
{
"type": "code",
"language": "javascript",
"code": "// equal to operator\nconsole.log(\"Equal to: 2 == 2 is\", 2 == 2);"
},
{
"type": "code",
"language": "javascript",
"code": "// not equal operator\nconsole.log(\"Not equal to: 3 != 3 is\", 3 != 3);"
},
{
"type": "code",
"language": "javascript",
"code": "// strictly equal to operator\nconsole.log(\"Strictly equal to: 2 === '2' is\", 2 === '2');"
},
{
"type": "code",
"language": "javascript",
"code": "// strictly not equal to operator\nconsole.log(\"Strictly not equal to: 2 !== '2' is\", 2 !== '2');"
},
{
"type": "code",
"language": "javascript",
"code": "// greater than operator\nconsole.log(\"Greater than: 3 > 3 is\", 3 > 3);"
},
{
"type": "code",
"language": "javascript",
"code": "// less than operator\nconsole.log(\"Less than: 2 > 2 is\", 2 > 2);"
},
{
"type": "code",
"language": "javascript",
"code": "// greater than or equal to operator\nconsole.log(\"Greater than or equal to: 3 >= 3 is\", 3 >= 3);"
},
{
"type": "code",
"language": "javascript",
"code": "// less than or equal to operator\nconsole.log(\"Less than or equal to: 2 <= 2 is\", 2 <= 2);"
},
{
"type": "sentence",
"text": "Output"
},
{
"type": "code",
"language": "javascript",
"code": "Equal to: 2 == 2 is true\nNot equal to: 3 != 3 is false\nStrictly equal to: 2 === '2' is false\nStrictly not equal to: 2 !== '2' is true\nGreater than: 3 > 3 is false\nLess than: 2 > 2 is false\nGreater than or equal to: 3 >= 3 is true\nLess than or equal to: 2 <= 2 is true"
},
{
"type": "sentence",
"text": "Difference between equality (== and !=) and strict equality (=== and !==) operators."
},
{
"type": "sentence",
"text": "The equality operators (== and !=) convert both operands to the same type before comparing their values."
},
{
"type": "code",
"language": "javascript",
"code": "// Equality operator\nconsole.log(3 == \"3\");  // true"
},
{
"type": "sentence",
"text": "Here, we used the == operator to compare the number 3 and the string \"3\". By default, JavaScript converts the string \"3\" to number 3 and compares the values."
},
{
"type": "sentence",
"text": "However, the strict equality operators (=== and !==) do not convert operand types before comparing their values."
},
{
"type": "code",
"language": "javascript",
"code": "// Strict equality operator\nconsole.log(4 === \"4\");  // false"
},
{
"type": "sentence",
"text": "Here, JavaScript didn't convert string 4 to number 4 before comparing their values."
},
{
"type": "sentence",
"text": "Thus, the result is false, as number 4 isn't equal to string 4."
},
{
"type": "sentence",
"text": "4. JavaScript Logical Operators"
},
{
"type": "sentence",
"text": "We use logical operators to perform logical operations on boolean expressions."
},
{
"type": "code",
"language": "javascript",
"code": "const x = 5, y = 3;\nconsole.log((x < 6) && (y < 5));"
},
{
"type": "sentence",
"text": "Here, && is the logical operator AND. Since both x < 6 and y < 5 are true, the combined result is true."
},
{
"type": "sentence",
"text": "Output: true"
},
{
"type": "sentence",
"text": "Commonly Used Logical Operators"
},
{
"type": "sentence",
"text": "A. Operator: && (Logical AND)"
},
{
"type": "sentence",
"text": "Description: true only if both expression1 and expression2 are true"
},
{
"type": "sentence",
"text": "B. Operator: || (Logical OR)"
},
{
"type": "sentence",
"text": "Description: true if either expression1 or expression2 is true"
},
{
"type": "sentence",
"text": "C. Operator: ! (Logical NOT)"
},
{
"type": "sentence",
"text": "Description: false if expression is true and vice versa"
},
{
"type": "sentence",
"text": "Example 4: Logical Operators in JavaScript"
},
{
"type": "code",
"language": "javascript",
"code": "let x = 3;\n\n// logical AND\nconsole.log((x < 5) && (x > 0));  // true\nconsole.log((x < 5) && (x > 6));  // false"
},
{
"type": "code",
"language": "javascript",
"code": "// logical OR\nconsole.log((x > 2) || (x > 5));  // true\nconsole.log((x > 3) || (x < 0));  // false"
},
{
"type": "code",
"language": "javascript",
"code": "// logical NOT\nconsole.log(!(x == 3));  // false\nconsole.log(!(x < 2));  // true"
},
{
"type": "sentence",
"text": "Note: We use comparison and logical operators in decision-making and loops. You will learn about them in detail in later tutorials."
},
{
"type": "sentence",
"text": "5. JavaScript Bitwise Operators"
},
{
"type": "sentence",
"text": "We use bitwise operators to perform binary operations on integers."
},
{
"type": "sentence",
"text": "A. Operator: & (Bitwise AND)"
},
{
"type": "sentence",
"text": "Example: 5 & 3  // 1"
},
{
"type": "sentence",
"text": "B. Operator: | (Bitwise OR)"
},
{
"type": "sentence",
"text": "Example: 5 | 3  // 7"
},
{
"type": "sentence",
"text": "C. Operator: ^ (Bitwise XOR)"
},
{
"type": "sentence",
"text": "Example: 5 ^ 3  // 6"
},
{
"type": "sentence",
"text": "D. Operator: ~ (Bitwise NOT)"
},
{
"type": "sentence",
"text": "Example: ~5  // -6"
},
{
"type": "sentence",
"text": "E. Operator: << (Left shift)"
},
{
"type": "sentence",
"text": "Example: 5 << 1  // 10"
},
{
"type": "sentence",
"text": "F. Operator: >> (Sign-propagating right shift)"
},
{
"type": "sentence",
"text": "Example: -10 >> 1  // -5"
},
{
"type": "sentence",
"text": "G. Operator: >>> (Zero-fill right shift)"
},
{
"type": "sentence",
"text": "Example: -10 >>> 1  // 2147483643"
},
{
"type": "sentence",
"text": "Note: We rarely use bitwise operators in everyday programming. If you are interested, visit JavaScript Bitwise Operators to learn more."
},
{
"type": "sentence",
"text": "6. JavaScript String Concatenation Operator"
},
{
"type": "sentence",
"text": "In JavaScript, you can also use the + operator to concatenate (join) two strings. For example,"
},
{
"type": "code",
"language": "javascript",
"code": "let str1 = \"Hel\", str2 = \"lo\";\nconsole.log(str1 + str2);\n\n"
},
{
"type": "sentence",
"text": ""
},
{
"type": "sentence",
"text": "Here, we used the + operator to concatenate str1 and str2."
},
{
"type": "sentence",
"text": "7. JavaScript Miscellaneous Operators"
},
{
"type": "sentence",
"text": "JavaScript has many more operators besides the ones we listed above. You will learn about them in detail in later tutorials."
},
{
"type": "sentence",
"text": "A. Operator: , (Comma)"
},
{
"type": "sentence",
"text": "Description: Evaluates multiple operands and returns the value of the last operand."
},
{
"type": "sentence",
"text": "Example: let a = (1, 3, 4);  // 4"
},
{
"type": "sentence",
"text": "B. Operator: ?: (Ternary)"
},
{
"type": "sentence",
"text": "Description: Returns value based on the condition."
},
{
"type": "sentence",
"text": "Example: (50 > 40) ? 'pass' : 'fail';  // 'pass'"
},
{
"type": "sentence",
"text": "C. Operator: typeof"
},
{
"type": "sentence",
"text": "Description: Returns the data type of the variable."
},
{
"type": "sentence",
"text": "Example: typeof 3;  // 'number'"
},
{
"type": "sentence",
"text": "D. Operator: instanceof"
},
{
"type": "sentence",
"text": "Description: Returns true if the specified object is a valid object of the specified class."
},
{
"type": "sentence",
"text": "Example: objectX instanceof ClassX"
},
{
"type": "sentence",
"text": "E. Operator: void"
},
{
"type": "sentence",
"text": "Description: Discards any expression's return value."
},
{
"type": "sentence",
"text": "Example: void(x)  // undefined"
}
              ],
              "locked":true
            },
            {
              "title": "JavaScript Comments",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript comments are annotations in the code that are completely ignored by the compiler. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// display \"Programiz\" to the screen\nconsole.log(\"Programiz\");\n\nOutput:\nProgramiz"
                },
                {
                  "type": "sentence",
                  "text": "Here, // display \"Programiz\" to the screen is a comment. As a result, it is ignored by the JavaScript engine."
                },
                {
                  "type": "sentence",
                  "text": "Types of JavaScript Comments"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, there are two ways to add comments to code:"
                },
                {
                  "type": "sentence",
                  "text": "1. // - Single-Line Comments"
                },
                {
                  "type": "sentence",
                  "text": "2. /* */ - Multiline Comments"
                },
                {
                  "type": "sentence",
                  "text": "Single Line Comments"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, any line that starts with // is a single-line comment. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "name = \"Jack\";\n\n// display name on the console\nconsole.log(\"Hello \" + name);"
                },
                {
                  "type": "sentence",
                  "text": "Here, // display name on the console is a single-line comment."
                },
                {
                  "type": "sentence",
                  "text": "Note: You can also use single-line comments like this:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "name = \"Jack\";\n\nconsole.log(\"Hello \" + name);  // display name on the console"
                },
                {
                  "type": "sentence",
                  "text": "However, avoid using comments this way if they are long and descriptive."
                },
                {
                  "type": "sentence",
                  "text": "Multiline Comments"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, multiline comments allow you to add comments that can span more than one line. They start with /* and end with */. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "/* This is a multiline comment.\nIt can span several lines.\n*/\n\nlet numberOfStudents = 50;\nconsole.log(numberOfStudents);"
                },
                {
                  "type": "sentence",
                  "text": "Here, we have used a multiline comment that can span any number of lines."
                },
                {
                  "type": "sentence",
                  "text": "We can use comments to remove unwanted code that we might require later."
                },
                {
                  "type": "sentence",
                  "text": "Comments can be helpful if you want to remove an unwanted line of code that can still be useful in the future. Consider the program below:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "console.log(\"Welcome to JavaScript programming.\");\nconsole.log(\"JavaScript is fun!\");"
                },
                {
                  "type": "sentence",
                  "text": "Suppose the line console.log(\"JavaScript is fun!\"); isn't required right now. But you know that you might change your mind in the future."
                },
                {
                  "type": "sentence",
                  "text": "In this case, you can simply convert the unnecessary line into a comment instead of deleting it from your program."
                },
                {
                  "type": "sentence",
                  "text": "This way, you can uncomment the code whenever you need to use it."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "console.log(\"Welcome to JavaScript programming.\");\n// console.log(\"JavaScript is fun!\");"
                },
                {
                  "type": "sentence",
                  "text": "Make Code Easier to Understand"
                },
                {
                  "type": "sentence",
                  "text": "As a JavaScript developer, you'll write code and also need to update code written by others."
                },
                {
                  "type": "sentence",
                  "text": "If you write comments on your code, it will be easier for you to understand the code in the future. It will also be easier for your fellow developers to understand the code."
                },
                {
                  "type": "sentence",
                  "text": "As a general rule of thumb, use comments to explain why you did something rather than how you did something."
                },
                {
                  "type": "sentence",
                  "text": "Notes:"
                },
                {
                  "type": "sentence",
                  "text": "Comments shouldn't be used for explaining poorly written code. Your code should always be well-structured and self-explanatory."
                },
                {
                  "type": "sentence",
                  "text": "Remember the shortcut for using comments; it can be extremely helpful. For most code editors, it's Ctrl + / for Windows and Cmd + / for Mac."
                }
              ],
              "locked": true
            },
            {
              "title": "JS Type Convertions",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In programming, type conversion is the process of converting data of one type to another. For example, converting string data to number."
                },
                {
                  "type": "sentence",
                  "text": "There are two types of type conversion in JavaScript:"
                },
                {
                  "type": "sentence",
                  "text": "Implicit Conversion - Automatic type conversion."
                },
                {
                  "type": "sentence",
                  "text": "Explicit Conversion - Manual type conversion."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Implicit Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In certain situations, JavaScript automatically converts data of one type to another (to the right type). This is known as implicit conversion. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// numeric string used with + gives string type\nlet result;\n\n// convert number to string\nresult = \"3\" + 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"3\" + true;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"3\" + null;\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "plaintext",
                  "code": "32 - string\n3true - string\n3null - string"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we performed implicit type conversion using the + operator with a string and another data type."
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + 2 - Converts the number 2 to string and joins it to \"3\", resulting in the string \"32\"."
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + true - Converts the boolean true to string and joins it to \"3\", resulting in the string \"3true\"."
                },
                {
                  "type": "sentence",
                  "text": "\"3\" + null - Converts null to string and joins it to \"3\", resulting in the string \"3null\"."
                },
                {
                  "type": "sentence",
                  "text": "Note: The typeof operator gives the data type of the variable."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Explicit Conversion"
                },
                {
                  "type": "sentence",
                  "text": "In explicit type conversion, you manually convert one type of data into another using built-in functions. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let result;\n\n// convert string to number\nresult = Number(\"5\");\nconsole.log(result, \"-\", typeof(result));\n\n// convert boolean to string\nresult = String(true);\nconsole.log(result, \"-\", typeof(result));\n\n// convert number to boolean\nresult = Boolean(0);\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "plaintext",
                  "code": "5 - number\ntrue - string\nfalse - boolean"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "Number(\"5\") changes the string \"5\" into the number 5."
                },
                {
                  "type": "sentence",
                  "text": "String(true) turns the boolean true into the string \"true\"."
                },
                {
                  "type": "sentence",
                  "text": "Boolean(0) converts the number 0 to the boolean false because 0 is considered a false value in JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "More on JavaScript Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "Implicit Conversion to Number"
                },
                {
                  "type": "sentence",
                  "text": "When you use arithmetic operators like -, *, or / with numeric strings, JavaScript automatically changes those strings into numbers."
                },
                {
                  "type": "sentence",
                  "text": "Let's look at an example."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// numeric string used with - , / , *\n// results in number type\n\nlet result;\n\nresult = \"4\" - \"2\";\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" - 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" * 2;\nconsole.log(result, \"-\", typeof(result));\n\nresult = \"4\" / 2;\nconsole.log(result, \"-\", typeof(result));"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "plaintext",
                  "code": "2 - number\n2 - number\n8 - number\n2 - number"
                },
                {
                  "type": "sentence",
                  "text": "Rules for Type Conversion"
                },
                {
                  "type": "sentence",
                  "text": "Understanding the rules for type conversion is crucial for avoiding unexpected results in your JavaScript code."
                },
                {
                  "type": "sentence",
                  "text": "Here are some key points:"
                },
                {
                  "type": "sentence",
                  "text": "Operations involving binary + will convert numbers to strings in the case of string and number concatenation."
                },
                {
                  "type": "sentence",
                  "text": "Logical operations convert operands to boolean values."
                },
                {
                  "type": "sentence",
                  "text": "When subtracting a string from another string, JavaScript attempts to convert both strings to numbers."
                },
                {
                  "type": "sentence",
                  "text": "When you change an object's type, some data might get lost."
                }
                
                  
                 ],
                  "locked": true
                }
                ],        
          "quiz":   [
            {
              "question": "What is JavaScript?",
              "options": [
                  "A low-level programming language",
                  "A high-level programming language",
                  "A database management system",
                  "A markup language"
              ],
              "correctAnswer": "A high-level programming language",
              "points": 1,
              "locked": true
            },
          {
              "question": "Which tool is used to run JavaScript code on your local machine?",
              "options": [
                  "Node.js",
                  "React",
                  "Angular",
                  "Django"
              ],
              "correctAnswer": "Node.js",
              "points": 1,
              "locked": true
          },
          {
              "question": "What command verifies if Node.js is installed correctly?",
              "options": [
                  "node --version",
                  "node --check",
                  "npm --version",
                  "node --status"
              ],
              "correctAnswer": "node --version",
              "points": 1,
              "locked": true
          },
          {
              "question": "How do you declare a variable in JavaScript using the modern ES6 syntax?",
              "options": [
                  "var",
                  "const",
                  "let",
                  "dynamic"
              ],
              "correctAnswer": "let",
              "points": 1,
              "locked": true
          },
          {
              "question": "What will be the output of `console.log(num)` if `let num;` is declared and not initialized?",
              "options": [
                  "null",
                  "0",
                  "undefined",
                  "Error"
              ],
              "correctAnswer": "undefined",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which keyword is used to declare a constant in JavaScript?",
              "options": [
                  "const",
                  "let",
                  "var",
                  "final"
              ],
              "correctAnswer": "const",
              "points": 1,
              "locked": true
          },
          {
              "question": "Can the value of a constant declared with `const` be changed?",
              "options": [
                  "Yes",
                  "No",
                  "Only if reassigned",
                  "Only in strict mode"
              ],
              "correctAnswer": "No",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which data type represents textual data in JavaScript?",
              "options": [
                  "Number",
                  "Boolean",
                  "String",
                  "Object"
              ],
              "correctAnswer": "String",
              "points": 1,
              "locked": true
          },
          {
              "question": "What symbol is used to represent a BigInt in JavaScript?",
              "options": [
                  "b",
                  "n",
                  "N",
                  "x"
              ],
              "correctAnswer": "n",
              "points": 1,
              "locked": true
          },
          {
              "question": "What is the result of `5 / 0` in JavaScript?",
              "options": [
                  "0",
                  "Infinity",
                  "NaN",
                  "Error"
              ],
              "correctAnswer": "Infinity",
              "points": 1,
              "locked": true
          },
          {
              "question": "How do you initialize a variable with a value in JavaScript?",
              "options": [
                  "let variable = value;",
                  "variable = value;",
                  "initialize variable with value;",
                  "var variable value;"
              ],
              "correctAnswer": "let variable = value;",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which operator is used for addition in JavaScript?",
              "options": [
                  "+",
                  "-",
                  "*",
                  "/"
              ],
              "correctAnswer": "+",
              "points": 1,
              "locked": true
          },
          {
              "question": "What does the `===` operator do in JavaScript?",
              "options": [
                  "Checks for equality with type conversion",
                  "Checks for strict equality without type conversion",
                  "Assigns a value",
                  "Compares two values for less than"
              ],
              "correctAnswer": "Checks for strict equality without type conversion",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which logical operator returns true if either of the conditions is true?",
              "options": [
                  "&&",
                  "||",
                  "!",
                  "??"
              ],
              "correctAnswer": "||",
              "points": 1,
              "locked": true
          },
          {
              "question": "What is the result of `~5` in JavaScript?",
              "options": [
                  "5",
                  "-6",
                  "0",
                  "-5",
                  "Error"
              ],
              "correctAnswer": "-6",
              "points": 1,
              "locked": true
          },
          {
              "question": "What does the `%` operator do in JavaScript?",
              "options": [
                  "Division",
                  "Multiplication",
                  "Remainder",
                  "Exponentiation"
              ],
              "correctAnswer": "Remainder",
              "points": 1,
              "locked": true
          },
          {
              "question": "What type of operator is `**` in JavaScript?",
              "options": [
                  "Arithmetic",
                  "Comparison",
                  "Logical",
                  "Bitwise"
              ],
              "correctAnswer": "Arithmetic",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which operator is used to perform a bitwise AND operation?",
              "options": [
                  "&",
                  "|",
                  "^",
                  "~"
              ],
              "correctAnswer": "&",
              "points": 1,
              "locked": true
          },
          {
              "question": "How do you declare multiple variables in a single statement in JavaScript?",
              "options": [
                  "let a = 1, b = 2;",
                  "var a = 1; b = 2;",
                  "const a = 1 and b = 2;",
                  "let a: 1, b: 2;"
              ],
              "correctAnswer": "let a = 1, b = 2;",
              "points": 1,
              "locked": true
          },
          {
              "question": "Which data type in JavaScript can represent a unique and immutable value?",
              "options": [
                  "Symbol",
                  "Number",
                  "String",
                  "Object"
              ],
              "correctAnswer": "Symbol",
              "points": 1,
              "locked": true
          }
          ],
          "activities": [
            {
              "title": "Printing to the Console",
              "description": "Learn how to use `console.log` to print messages and values to the console.",
              "language": "JavaScriptConsole",
              "difficulty": "easy",
              "problemStatement": "In this activity, you will write JavaScript code to print text and numbers to the console using `console.log`.\n\n1. Use `console.log` to print the message `'Hello, World!'`.\n\n2. Print the result of the addition of two numbers, 5 and 3, using `console.log`.",
              "codeEditor": {
                "html": "",
                "css": "",
                "js": "// Print a message to the console\nconsole.log('Hello, World!');\n\n// Print the result of 5 + 3\nconsole.log(5 + 3);"
              },
              "testCases": [
                {
                  "input": "console.log('Hello, World!');\nconsole.log(5 + 3);",
                  "output": "Hello, World!\n8",
                  "required": [
                    "console.log('Hello, World!');",
                    "console.log(5 + 3);"
                  ],
                  "isHidden": false,
                  "testCaseSentences": [
                    "Use `console.log` to print the message `'Hello, World!'`.",
                    "Use `console.log` to print the result of 5 + 3."
                  ]
                }
              ],
              "locked": true,
              "completed": false
            },
  {
    "title": "JavaScript Variable Declarations",
    "description": "Understand the differences between `var`, `let`, and `const` in JavaScript by declaring variables and observing their behaviors.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "You are tasked with writing JavaScript code that demonstrates the differences between `var`, `let`, and `const`. The code should declare a variable with each keyword and print their values to the console.\n\n1. Declare a variable using `var`:\n   - Create a variable named `name` and assign it the value `'Alice'`.\n   - Print the value of `name` to the console.\n\n2. Declare a variable using `let`:\n   - Create a variable named `age` and assign it the value `25`.\n   - Print the value of `age` to the console.\n\n3. Declare a constant using `const`:\n   - Create a constant named `country` and assign it the value `'USA'`.\n   - Print the value of `country` to the console.\n\nEnsure that the code executes without any errors and that the variables hold the correct values throughout.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "var name = 'Alice';\nlet age = 25;\nconst country = 'USA';\nconsole.log('Name using var:', name);\nconsole.log('Age using let:', age);\nconsole.log('Country using const:', country);",
        "output": "Name using var: Alice\nAge using let: 25\nCountry using const: USA",
        "required": [
          "var name = \"Alice\";",
          "let age = 25;",
          "const country = \"USA\";",
          "console.log(\"Name using var:\", name);",
          "console.log(\"Age using let:\", age);",
          "console.log(\"Country using const:\", country);"
       ],
        "isHidden": false,
        "testCaseSentences": [
            "Declare a variable named 'name' using var and assign it the value 'Alice'.",
            "Declare a variable named 'age' using let and assign it the value 25.",
            "Declare a constant named 'country' using const and assign it the value 'USA'.",
            "Print the value of 'name' using console.log.",
            "Print the value of 'age' using console.log.",
            "Print the value of 'country' using console.log."
          ],
          "expectedImage": "/activities/jsacts/1.1.png"
      }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Data Types and Operators",
    "description": "Learn about basic data types and arithmetic operators in JavaScript by declaring variables and performing operations.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "You are tasked with writing JavaScript code that demonstrates the usage of basic data types (`String`, `Number`, `Boolean`) and arithmetic operators (`+`, `-`, `*`, `/`). The code should declare variables for each data type, perform arithmetic operations, and print the results to the console.\n\n1. tring Data Type:\n   - Create a variable named `greeting` and assign it the value `'Hello, World!'`.\n   - Print the value of `greeting` to the console.\n\n2. Number Data Type:\n   - Create a variable named `year` and assign it the value `2024`.\n   - Print the value of `year` to the console.\n\n3. Boolean Data Type:\n   - Create a variable named `isStudent` and assign it the value `true`.\n   - Print the value of `isStudent` to the console.\n\n4. Using Arithmetic Operators:\n   - Create a variable named `sum` that stores the result of adding `10 + 20`.\n   - Print the value of `sum` to the console.\n   - Create a variable named `difference` that stores the result of subtracting `30 - 10`.\n   - Print the value of `difference` to the console.\n   - Create a variable named `product` that stores the result of multiplying `5 * 4`.\n   - Print the value of `product` to the console.\n   - Create a variable named `quotient` that stores the result of dividing `40 / 5`.\n   - Print the value of `quotient` to the console.\n\nEnsure that the code executes without any errors and that the variables hold the correct values throughout.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "let greeting = \"Hello, World!\";\nlet year = 2024;\nlet isStudent = true;\nlet sum = 10 + 20;\nlet difference = 30 - 10;\nlet product = 5 * 4;\nlet quotient = 40 / 5;\nconsole.log(\"Greeting:\", greeting);\nconsole.log(\"Year:\", year);\nconsole.log(\"Is Student:\", isStudent);\nconsole.log(\"Sum:\", sum);\nconsole.log(\"Difference:\", difference);\nconsole.log(\"Product:\", product);\nconsole.log(\"Quotient:\", quotient);",
        "output": "Greeting: Hello, World!\nYear: 2024\nIs Student: true\nSum: 30\nDifference: 20\nProduct: 20\nQuotient: 8",
        "required": [
          "let greeting = \"Hello, World!\";",
          "let year = 2024;",
          "let isStudent = true;",
          "let sum = 10 + 20;",
          "let difference = 30 - 10;",
          "let product = 5 * 4;",
          "let quotient = 40 / 5;",
          "console.log(\"Greeting:\", greeting);",
          "console.log(\"Year:\", year);",
          "console.log(\"Is Student:\", isStudent);",
          "console.log(\"Sum:\", sum);",
          "console.log(\"Difference:\", difference);",
          "console.log(\"Product:\", product);",
          "console.log(\"Quotient:\", quotient);"
       ],
        "isHidden": false,
        "testCaseSentences": [
          "Declare a variable named 'greeting' using let and assign it the value 'Hello, World!'.",
          "Declare a variable named 'year' using let and assign it the value 2024.",
          "Declare a variable named 'isStudent' using let and assign it the value true.",
          "Declare a variable named 'sum' and assign it the result of 10 + 20.",
          "Declare a variable named 'difference' and assign it the result of 30 - 10.",
          "Declare a variable named 'product' and assign it the result of 5 * 4.",
          "Declare a variable named 'quotient' and assign it the result of 40 / 5.",
          "Print the value of 'greeting' to the console.",
          "Print the value of 'year' to the console.",
          "Print the value of 'isStudent' to the console.",
          "Print the value of 'sum' to the console.",
          "Print the value of 'difference' to the console.",
          "Print the value of 'product' to the console.",
          "Print the value of 'quotient' to the console."
        ],
        "expectedImage": "/activities/jsacts/1.2.png"
      }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Comments, Type Conversion, and Variable Operations",
    "description": "Learn how to use single-line and multi-line comments in JavaScript, perform type conversion, and carry out arithmetic operations with variables.",
    "language": "JavaScriptConsole",
    "difficulty": "medium",
    "problemStatement": "In this activity, you will write JavaScript code that demonstrates the use of comments, type conversion, and variable operations. You will use both single-line and multi-line comments, convert a string to a number, perform an arithmetic operation, and convert a number to a string.\n\n1. Single-line Comments:\n   - Use single-line comments to explain variable declarations.\n\n2. Variable Declaration and Type:\n   - Declare a variable `a` with a string value of `'10'` and a variable `b` with a number value of `5`.\n\n3. Multi-line Comments:\n   - Use a multi-line comment to describe the process of converting a string to a number and performing an addition operation.\n\n4. Type Conversion and Arithmetic Operation:\n   - Convert the string `a` to a number using `parseInt()` and store the result in a new variable `convertedA`.\n   - Add `convertedA` and `b`, storing the result in a variable `sum`.\n   - Print the value of `sum` to the console with the message `'Sum after conversion:'`.\n\n5. Converting Number to String:\n   - Convert the number `b` to a string using `toString()` and store the result in `numberToString`.\n   - Print the value of `numberToString` to the console with the message `'Converted Number to String:'`.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "let a = \"10\";\nlet b = 5;\nlet convertedA = parseInt(a);\nlet sum = convertedA + b;\nconsole.log(\"Sum after conversion:\", sum);\nlet numberToString = b.toString();\nconsole.log(\"Converted Number to String:\", numberToString);",
        "output": "Sum after conversion: 15\nConverted Number to String: 5",
        "required": [
          "let a = \"10\";",
          "let b = 5;",
          "let convertedA = parseInt(a);",
          "let sum = convertedA + b;",
          "console.log(\"Sum after conversion:\", sum);",
          "let numberToString = b.toString();",
          "console.log(\"Converted Number to String:\", numberToString);"
        ],
        "testCaseSentences": [
          "Declare a variable 'a' with a string value of '10'.",
          "Declare a variable 'b' with a number value of 5.",
          "Convert 'a' to a number using parseInt() and store it in 'convertedA'.",
          "Add 'convertedA' and 'b' and store the result in 'sum'.",
          "Print the value of 'sum' to the console.",
          "Convert the number 'b' to a string using toString() and store it in 'numberToString'.",
          "Print the value of 'numberToString' to the console."
        ],
        "expectedImage": "/activities/jsacts/1.3.png",
        "isHidden": false
      }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Variables, Constants, and Arithmetic Operations",
    "description": "Practice working with variables, constants, type conversion, and arithmetic operations in JavaScript. You will calculate the total price of items including tax.",
    "language": "JavaScriptConsole",
    "difficulty": "hard",
    "problemStatement": "In this activity, you will write JavaScript code that demonstrates the use of variables, constants, type conversion, and arithmetic operations. The task involves calculating the total cost of items before and after tax.\n\n1. Variable and Constant Declaration:\n   - Declare a variable `price` as a string representing a price value (e.g., `'100.50'`).\n   - Declare a variable `quantity` as a number representing the quantity of items.\n   - Declare a constant `taxRate` with a value of `0.08` representing the tax rate.\n\n2. Type Conversion:\n   - Convert the `price` from a string to a floating-point number using `parseFloat()` and store the result in `convertedPrice`.\n   - Print the converted price to the console.\n\n3. Arithmetic Operations:\n   - Calculate the total price before tax by multiplying `convertedPrice` by `quantity`, storing the result in `totalBeforeTax`, and printing it to the console.\n   - Calculate the tax amount by multiplying `totalBeforeTax` by `taxRate`, storing the result in `taxAmount`, and printing it to the console.\n   - Calculate the total price after tax by adding `totalBeforeTax` and `taxAmount`, storing the result in `totalAfterTax`, and printing it to the console.\n\n4. Formatting Output:\n   - Use `toFixed(2)` to format `totalAfterTax` with two decimal places.\n\n5. Template Literals:\n   - Use template literals to print a final message that includes the quantity and the total amount after tax, formatted as currency.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "let price = \"100.50\";\nlet quantity = 3;\nconst TAX_RATE = 0.08;\nlet convertedPrice = parseFloat(price);\nlet totalPriceBeforeTax = convertedPrice * quantity;\nlet totalTax = totalPriceBeforeTax * TAX_RATE;\nlet totalPriceAfterTax = totalPriceBeforeTax + totalTax;\nconsole.log(\"Total Price (before tax):\", totalPriceBeforeTax);\nconsole.log(\"Total Tax:\", totalTax);\nconsole.log(\"Total Price (after tax):\", totalPriceAfterTax);",
        "output": "Total Price (before tax): 301.5\nTotal Tax: 24.12\nTotal Price (after tax): 325.62",
        "required": [
          "let price = \"100.50\";",
          "let quantity = 3;",
          "const TAX_RATE = 0.08;",
          "let convertedPrice = parseFloat(price);",
          "let totalPriceBeforeTax = convertedPrice * quantity;",
          "let totalTax = totalPriceBeforeTax * TAX_RATE;",
          "let totalPriceAfterTax = totalPriceBeforeTax + totalTax;",
          "console.log(\"Total Price (before tax):\", totalPriceBeforeTax);",
          "console.log(\"Total Tax:\", totalTax);",
          "console.log(\"Total Price (after tax):\", totalPriceAfterTax);"
        ],
        "testCaseSentences": [
          "Declare a variable 'price' with a string value representing the price.",
          "Declare a variable 'quantity' with a number value representing the quantity of items.",
          "Declare a constant 'TAX_RATE' with a value representing the tax rate.",
          "Convert 'price' to a number using parseFloat().",
          "Calculate the total price before tax by multiplying the price and quantity.",
          "Calculate the total tax by multiplying the total price before tax and the TAX_RATE.",
          "Calculate the total price after tax by adding the total tax to the total price before tax.",
          "Print the total price before tax to the console.",
          "Print the total tax to the console.",
          "Print the total price after tax to the console."
        ],
        "expectedImage": "/activities/jsacts/1.4.png",
        "isHidden": false
      }
    ],
    "locked": true,
    "completed": false
  }
],
          "totalPoints": 0,
          "locked": true
        },
        {
          "title": "Lesson 2: JS Control Flow",
          "documents": [
            {
              "title": "JS Comparison Operators",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Comparison and Logical Operators"
              },
              {
                  "type": "sentence",
                  "text": "JavaScript Comparison Operators"
              },
              {
                  "type": "sentence",
                  "text": "Comparison operators compare two values and return a boolean value (true or false). For example,"
              },
              {
                  "type": "code",
                  "language": "javascript",
                  "code": "const a = 3, b = 2;\nconsole.log(a > b);"
              },
              {
                  "type": "sentence",
                  "text": "Output"
              },
              {
                  "type": "code",
                  "language": "plaintext",
                  "code": "true"
              },
              {
                  "type": "sentence",
                  "text": "Here, we have used the > comparison operator to check whether a (whose value is 3) is greater than b (whose value is 2)."
              },
              {
                  "type": "sentence",
                  "text": "Since 3 is greater than 2, we get true as output."
              },
              {
                  "type": "sentence",
                  "text": "Note: In the above example, a > b is called a boolean expression since evaluating it results in a boolean value."
              },
              {
                "type": "sentence",
                "text": "Commonly Used Comparison Operators"
              },
              {
                "type": "sentence",
                "text": "A. Operator: == (Equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if two values are equal."
              },
              {
                "type": "sentence",
                "text": "Example: 3 == 5  // false"
              },
              {
                "type": "sentence",
                "text": "B. Operator: != (Not equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if two values are not equal."
              },
              {
                "type": "sentence",
                "text": "Example: 3 != 4  // true"
              },
              {
                "type": "sentence",
                "text": "C. Operator: === (Strictly equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if two values are equal and of the same type."
              },
              {
                "type": "sentence",
                "text": "Example: 3 === '3'  // false"
              },
              {
                "type": "sentence",
                "text": "D. Operator: !== (Strictly not equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if two values are not equal or not of the same type."
              },
              {
                "type": "sentence",
                "text": "Example: 3 !== '3'  // true"
              },
              {
                "type": "sentence",
                "text": "E. Operator: > (Greater than)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if a value is greater than another."
              },
              {
                "type": "sentence",
                "text": "Example: 4 > 4  // false"
              },
              {
                "type": "sentence",
                "text": "F. Operator: < (Less than)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if a value is less than another."
              },
              {
                "type": "sentence",
                "text": "Example: 3 < 3  // false"
              },
              {
                "type": "sentence",
                "text": "G. Operator: >= (Greater than or equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if a value is greater than or equal to another."
              },
              {
                "type": "sentence",
                "text": "Example: 4 >= 4  // true"
              },
              {
                "type": "sentence",
                "text": "H. Operator: <= (Less than or equal to)"
              },
              {
                "type": "sentence",
                "text": "Meaning: Checks if a value is less than or equal to another."
              },
              {
                "type": "sentence",
                "text": "Example: 3 <= 3  // true"
              },
              {
                "type": "sentence",
                "text": "1. Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The equal to operator == evaluates to"
              },
              {
                "type": "sentence",
                "text": "• true if the values of the operands are equal."
              },
              {
                "type": "sentence",
                "text": "• false if the values of the operands are not equal."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// same value, same type\nconsole.log(5 == 5);  // true\n\n// same value, different type\nconsole.log(2 == \"2\");  // true\n\n// different values, same type\nconsole.log(\"hello\" == \"Hello\");  // false"
              },
              {
                "type": "sentence",
                "text": "Note: In JavaScript, == is a comparison operator, whereas = is an assignment operator. If you mistakenly use = instead of ==, you might get unexpected results."
              },
              {
                "type": "sentence",
                "text": "2. Not Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The not equal to operator != evaluates to"
              },
              {
                "type": "sentence",
                "text": "• true if the values of the operands aren't equal."
              },
              {
                "type": "sentence",
                "text": "• false if the values of the operands are equal."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// same value, same type\nconsole.log(2 != 2);  // false\n\n// same value, different type\nconsole.log(2 != \"2\");  // false\n\n// different value, same type\nconsole.log(2 != 3);  // true"
              },
              {
                "type": "sentence",
                "text": "3. Strict Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The strict equal to operator === evaluates to"
              },
              {
                "type": "sentence",
                "text": "• true if both the values and the types of the operands are the same."
              },
              {
                "type": "sentence",
                "text": "• false if either the values or the types of the operands are not the same."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// same value, same type\nconsole.log(2 === 2);  // true\n\n// same value, different type\nconsole.log(2 === \"2\");  // false"
              },
              {
                "type": "sentence",
                "text": "4. Strict Not Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The strict not equal to operator !== evaluates to"
              },
              {
                "type": "sentence",
                "text": "• true if either the values or the types of the operands are not the same."
              },
              {
                "type": "sentence",
                "text": "• false if both the values and the types of the operands are the same."
              },
              {
                "type": "sentence",
                "text": "For example"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// same value, same type\nconsole.log(2 !== 2);  // false\n\n// same value, different type\nconsole.log(2 !== \"2\");  // true\n\n// different value, same type\nconsole.log(\"Hello\" !== \"World\");  // true"
              },
              {
                "type": "sentence",
                "text": "5. Greater Than Operator"
              },
              {
                "type": "sentence",
                "text": "The greater than operator > returns"
              },
              {
                "type": "sentence",
                "text": "• true if the value on the left is greater than the value on the right."
              },
              {
                "type": "sentence",
                "text": "• false if the value on the left isn't greater than the value on the right."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// left operand is greater\nconsole.log(3 > 2);  // true\n\n// both operands are equal\nconsole.log(4 > 4);  // false\n\n// left operand is smaller\nconsole.log(2 > 5);  // false"
              },
              {
                "type": "sentence",
                "text": "6. Greater Than Or Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The greater than or equal to operator >= returns"
              },
              {
                "type": "sentence",
                "text": "• true if the value on the left is greater than or equal to the value on the right."
              },
              {
                "type": "sentence",
                "text": "• false if the value on the left is less than the value on the right."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// left operand is greater\nconsole.log(3 >= 2);  // true\n\n// both operands are equal\nconsole.log(4 >= 4);  // true\n\n// left operand is smaller\nconsole.log(2 >= 5);  // false"
              },
              {
                "type": "sentence",
                "text": "7. Less Than Operator"
              },
              {
                "type": "sentence",
                "text": "The less than operator < returns"
              },
              {
                "type": "sentence",
                "text": "• true if the value on the left is less than the value on the right."
              },
              {
                "type": "sentence",
                "text": "•false if the value on the left isn't less than the value on the right."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// left operand is smaller\nconsole.log(2 < 5);  // true\n\n// both operands are equal\nconsole.log(4 < 4);  // false\n\n// left operand is greater\nconsole.log(3 < 2);  // false"
              },
              {
                "type": "sentence",
                "text": "8. Less Than Or Equal To Operator"
              },
              {
                "type": "sentence",
                "text": "The less than or equal to operator <= returns"
              },
              {
                "type": "sentence",
                "text": "• true if the value on the left is less than or equal to the value on the right."
              },
              {
                "type": "sentence",
                "text": "• false if the value on the left is greater than the value on the right."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// left operand is smaller\nconsole.log(2 <= 5);  // true\n\n// both operands are equal\nconsole.log(4 <= 4);  // true\n\n// left operand is greater\nconsole.log(3 <= 2);  // false"
              },
              {
                "type": "sentence",
                "text": "JavaScript Logical Operators"
              },
              {
                "type": "sentence",
                "text": "Logical operators return a boolean value by evaluating boolean expressions."
              },
              {
                "type": "sentence",
                "text": "For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "const x = 5, y = 3;\n\nconsole.log((x < 6) && (y < 5));\n\n// Output: true"
              },
              {
                "type": "sentence",
                "text": "Here, && is the logical operator AND. Since both the boolean expressions x < 6 and y < 5 are true, evaluating them with the && operator also results in true."
              },
              {
                "type": "sentence",
                "text": "Operator: && (Logical AND)"
            },
            {
                "type": "sentence",
                "text": "Syntax: expression1 && expression2"
            },
            {
                "type": "sentence",
                "text": "Description: True only if both expression1 and expression2 are true"
            },
            {
                "type": "sentence",
                "text": "Operator: || (Logical OR)"
            },
            {
                "type": "sentence",
                "text": "Syntax: expression1 || expression2"
            },
            {
                "type": "sentence",
                "text": "Description: True if either expression1 or expression2 is true"
            },
            {
                "type": "sentence",
                "text": "Operator: ! (Logical NOT)"
            },
            {
                "type": "sentence",
                "text": "Syntax: !expression"
            },
            {
                "type": "sentence",
                "text": "Description: False if expression is true and vice versa"
            },
            {
              "type": "sentence",
              "text": "1. Logical AND Operator"
            },
            {
              "type": "sentence",
              "text": "The logical AND operator && returns true if both the expressions are true."
            },
            {
              "type": "code",
              "language": "javascript",
              "code": "let x = 2;\n\n// both expressions are true\nconsole.log((x < 4) && (4 >= x));  // true\n\n// only one expression is true\nconsole.log((x <= 4) && (2 == 4));  // false\n\n// both expressions are false\nconsole.log((x > 4) && (x == 4));  // false"
            },
            {
              "type": "sentence",
              "text": "Here,"
            },
            {
              "type": "sentence",
              "text": "(x < 4) && (4 >= x) results in true because both expressions are true."
            },
            {
              "type": "sentence",
              "text": "(x <= 4) && (2 == 4) results in false because the expression 2 == 4 is false."
            },
            {
              "type": "sentence",
              "text": "(x > 4) && (x == 4) results in false because both expressions are false."
            },
            {
              "type": "sentence",
              "text": "2. Logical OR Operator"
            },
            {
              "type": "sentence",
              "text": "The logical OR operator || returns true if at least one expression is true."
            },
            {
              "type": "code",
              "language": "javascript",
              "code": "let x = 2;\n\n// both expressions are true\nconsole.log((x < 4) || (4 >= x));  // true\n\n// only one expression is true\nconsole.log((x <= 4) || (2 == 4));  // true\n\n// both expressions are false\nconsole.log((x > 4) || (x == 4));  // false"
            },
            {
              "type": "sentence",
              "text": "Here,"
            },
            {
              "type": "sentence",
              "text": "(x < 4) || (4 >= x) results in true because both expressions are true."
            },
            {
              "type": "sentence",
              "text": "(x <= 4) || (2 == 4) results in true because the expression x <= 4 is true."
            },
            {
              "type": "sentence",
              "text": "(x > 4) || (x == 4) results in false because both expressions are false."
            },
            {
              "type": "sentence",
              "text": "3. Logical NOT Operator"
            },
            {
              "type": "sentence",
              "text": "The logical NOT operator ! returns true if the specified expression is false and vice versa."
            },
            {
              "type": "code",
              "language": "javascript",
              "code": "// NOT on true\nconsole.log(!true);  // false\n\n// NOT on false\nconsole.log(!false);  // true\n\n// comparison example\nconsole.log(!(2 < 3));  // false"
            },
            {
              "type": "sentence",
              "text": "Here,"
            },
            {
              "type": "sentence",
              "text": "!true results in false because ! inverts the value of true to false."
            },
            {
              "type": "sentence",
              "text": "!false results in true because ! inverts the value of false to true."
            },
            {
              "type": "sentence",
              "text": "!(2 < 3) results in false because ! inverts the true value of (2 < 3) to false."
            }
                  
              ],
              "locked": true
            },
            {
              "title": "JavaScript if...else Statement",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript if...else Statement"
                },
                {
                  "type": "sentence",
                  "text": "The JavaScript if...else statement is used to execute or skip a block of code based on a condition."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of the if...else statement. You can read the rest of the tutorial if you want to learn about if...else in greater detail."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let score = 45;\n\n// check if score is fifty or greater\nif (score >= 50) {\n    console.log(\"You passed the examination.\");\n}\nelse {\n    console.log(\"You failed the examination.\");\n}\n\n// Output: You failed the examination."
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the program displays 'You passed the examination.' if the score variable is equal to 50. Otherwise, it displays 'You failed the examination.'"
                },
                {
                  "type": "sentence",
                  "text": "In computer programming, the if...else statement is a conditional statement that executes a block of code only when a specific condition is met."
                },
                {
                  "type": "sentence",
                  "text": "For example, suppose we need to assign different grades to students based on their scores."
                },
                {
                  "type": "sentence",
                  "text": "If a student scores above 90, assign grade A."
                },
                {
                  "type": "sentence",
                  "text": "If a student scores above 75, assign grade B."
                },
                {
                  "type": "sentence",
                  "text": "If a student scores above 65, assign grade C."
                },
                {
                  "type": "sentence",
                  "text": "These conditional tasks can be achieved using the if...else statement."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript if Statement"
                },
                {
                  "type": "sentence",
                  "text": "We use the if keyword to execute code based on some specific condition."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of if statement is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "if (condition) {\n    // block of code\n}"
                },
                {
                  "type": "sentence",
                  "text": "The if keyword checks the condition inside the parentheses ()."
                },
                {
                  "type": "sentence",
                  "text": "If the condition is evaluated to true, the code inside { } is executed."
                },
                {
                  "type": "sentence",
                  "text": "If the condition is evaluated to false, the code inside { } is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Note: The code inside { } is also called the body of the if statement."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: JavaScript if Statement"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Program to check if the number is positive\n\nconst number = prompt(\"Enter a number: \");\n\n// check if number is greater than 0\nif (number > 0) {\n    // the body of the if statement\n    console.log(\"positive number\");\n}\n\nconsole.log(\"nice number\");"
                },
                {
                  "type": "sentence",
                  "text": "Sample Output 1"
                },
                {
                  "type": "sentence",
                  "text": "Enter a number: 5\npositive number\nnice number"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, when we enter 5, the condition number > 0 evaluates to true. Thus, the body of the if statement is executed."
                },
                {
                  "type": "sentence",
                  "text": "Sample Output 2"
                },
                {
                  "type": "sentence",
                  "text": "Enter a number: -1\nnice number"
                },
                {
                  "type": "sentence",
                  "text": "Again, when we enter -1, the condition number > 0 evaluates to false. Hence, the body of the if statement is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Since console.log(\"nice number\"); is outside the body of the if statement, it is always executed."
                },
                {
                  "type": "sentence",
                  "text": "Note: We use comparison and logical operators in our if conditions. To learn more, you can visit JavaScript Comparison and Logical Operators."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript else Statement"
                },
                {
                  "type": "sentence",
                  "text": "We use the else keyword to execute code when the condition specified in the preceding if statement evaluates to false."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the else statement is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "if (condition) {\n    // block of code\n    // execute this if condition is true\n}\nelse {\n    // block of code\n    // execute this if condition is false\n}"
                },
                {
                  "type": "sentence",
                  "text": "The if...else statement checks the condition and executes code in two ways:"
                },
                {
                  "type": "sentence",
                  "text": "If condition is true, the code inside if is executed. And, the code inside else is skipped."
                },
                {
                  "type": "sentence",
                  "text": "If condition is false, the code inside if is skipped. Instead, the code inside else is executed."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: JavaScript if…else Statement"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let age = 17;\n\n// if age is 18 or above, you are an adult\n// otherwise, you are a minor\n\nif (age >= 18) {\n    console.log(\"You are an adult\");\n}\nelse {\n    console.log(\"You are a minor\");\n}\n\n// Output: You are a minor"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the if statement checks for the condition age >= 18."
                },
                {
                  "type": "sentence",
                  "text": "Since we set the value of age to 17, the condition evaluates to false."
                },
                {
                  "type": "sentence",
                  "text": "Thus, the code inside if is skipped. And, code inside else is executed."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript else if Statement"
                },
                {
                  "type": "sentence",
                  "text": "We can use the else if keyword to check for multiple conditions."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the else if statement is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// check for first condition\nif (condition1) {\n    // if body\n}\n\n// check for second condition\nelse if (condition2){\n    // else if body\n}\n\n// if no condition matches\nelse {\n    // else body\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "First, the condition in the if statement is checked. If the condition evaluates to true, the body of if is executed, and the rest is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Otherwise, the condition in the else if statement is checked. If true, its body is executed and the rest is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Finally, if no condition matches, the block of code in else is executed."
                },
                {
                  "type": "sentence",
                  "text": "Example 3: JavaScript if...else if Statement"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let rating = 4;\n\n// rating of 2 or below is bad\n// rating of 4 or above is good\n// else, the rating is average\n\nif (rating <= 2) {\n    console.log(\"Bad rating\");\n}\nelse if (rating >= 4) {\n    console.log(\"Good rating!\");\n}\nelse {\n    console.log(\"Average rating\");\n}\n\n// Output: Good rating!"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we used the if statement to check for the condition rating <= 2."
                },
                {
                  "type": "sentence",
                  "text": "Likewise, we used the else if statement to check for another condition, rating >= 4."
                },
                {
                  "type": "sentence",
                  "text": "Since the else if condition is satisfied, the code inside it is executed."
                },
                {
                  "type": "sentence",
                  "text": "Nested if...else Statement"
                },
                {
                  "type": "sentence",
                  "text": "When we use an if...else statement inside another if...else statement, we create a nested if...else statement."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let marks = 60;\n\n// outer if...else statement\n// student passed if marks 40 or above\n// otherwise, student failed\n\nif (marks >= 40) {\n\n    // inner if...else statement\n    // Distinction if marks is 80 or above\n\n    if (marks >= 80) {\n        console.log(\"Distinction\");\n    }\n    else {\n        console.log(\"Passed\");\n    }\n}\n\nelse {\n    console.log(\"Failed\");\n}\n\n// Output: Passed"
                },
                {
                  "type": "sentence",
                  "text": "Outer if...else"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the outer if condition checks if a student has passed or failed using the condition marks >= 40. If it evaluates to false, the outer else statement will print Failed."
                },
                {
                  "type": "sentence",
                  "text": "On the other hand, if marks >= 40 evaluates to true, the program moves to the inner if...else statement."
                },
                {
                  "type": "sentence",
                  "text": "Inner if...else statement"
                },
                {
                  "type": "sentence",
                  "text": "The inner if condition checks whether the student has passed with distinction using the condition marks >= 80."
                },
                {
                  "type": "sentence",
                  "text": "If marks >= 80 evaluates to true, the inner if statement will print Distinction."
                },
                {
                  "type": "sentence",
                  "text": "Otherwise, the inner else statement will print Passed."
                },
                {
                  "type": "sentence",
                  "text": "Note: Avoid nesting multiple if…else statements within each other to maintain code readability and simplify debugging."
                }   
              ],
              "locked": true
            },
            {
              "title": "JavaScript for loop",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, the for loop is used for iterating over a block of code a certain number of times, or to iterate over the elements of an array."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of the for loop. You can read the rest of the tutorial for more details."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (let i = 0; i < 3; i++) {\n    console.log(\"Hello, world!\");\n}\n\n// Output:\n// Hello, world!\n// Hello, world!\n// Hello, world!"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we used the for loop to print \"Hello, world!\" three times to the console."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript for loop Syntax"
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the for loop is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (initialExpression; condition; updateExpression) {\n    // for loop body\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "initialExpression - Initializes a counter variable."
                },
                {
                  "type": "sentence",
                  "text": "condition - The condition to be evaluated. If true, the body of the for loop is executed."
                },
                {
                  "type": "sentence",
                  "text": "updateExpression - Updates the value of initialExpression."
                },
                {
                  "type": "sentence",
                  "text": "Once an iteration of the loop is completed, the condition is evaluated again. The process continues until the condition is false."
                },
                {
                  "type": "sentence",
                  "text": "To learn more about the condition, visit JavaScript Comparison and Logical Operators."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Print Numbers From 1 to 5"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (let i = 1; i < 6; i++) {\n    console.log(i);\n}\n\n// Output\n// 1\n// 2\n// 3\n// 4\n// 5"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we have printed numbers from 1 to 5 using a for loop."
                },
                {
                  "type": "sentence",
                  "text": "Here is how this program works:"
                },
                {
                  "type": "sentence",
                  "text": "A. Iteration: 1st"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 1"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: 1 is printed. i is increased to 2."
              },
              {
                  "type": "sentence",
                  "text": "B. Iteration: 2nd"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 2"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: 2 is printed. i is increased to 3."
              },
              {
                  "type": "sentence",
                  "text": "C. Iteration: 3rd"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 3"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: 3 is printed. i is increased to 4."
              },
              {
                  "type": "sentence",
                  "text": "D. Iteration: 4th"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 4"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: 4 is printed. i is increased to 5."
              },
              {
                  "type": "sentence",
                  "text": "E. Iteration: 5th"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 5"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: 5 is printed. i is increased to 6."
              },
              {
                  "type": "sentence",
                  "text": "F. Iteration: 6th"
              },
              {
                  "type": "sentence",
                  "text": "Variable: i = 6"
              },
              {
                  "type": "sentence",
                  "text": "Condition: i < 6"
              },
              {
                  "type": "sentence",
                  "text": "Action: The loop is terminated."
              },
              {
                "type": "sentence",
                "text": "Example 2: Display Sum of n Natural Numbers"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "let sum = 0;\nconst n = 100;\n\n// loop from i = 1 to i = n\n// in each iteration, i is increased by 1\nfor (let i = 1; i <= n; i++) {\n    sum += i;  // sum = sum + i\n}\n\nconsole.log(`sum: ${sum}`);\n\n// Output: sum: 5050"
              },
              {
                "type": "sentence",
                "text": "Initially, the value of sum is 0, while n has a constant value of 100."
              },
              {
                "type": "sentence",
                "text": "Then, we iterate a for loop from i = 1 to n. In each iteration,"
              },
              {
                "type": "sentence",
                "text": "i is added to sum."
              },
              {
                "type": "sentence",
                "text": "Then, the value of i is increased by 1."
              },
              {
                "type": "sentence",
                "text": "When i becomes 101, the test condition becomes false and sum will be equal to 0 + 1 + 2 + ... + 100."
              },
              {
                "type": "sentence",
                "text": "Iterate Through an Array"
              },
              {
                "type": "sentence",
                "text": "A for loop can also be used to iterate over elements of an array. For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "const fruits = [\"apple\", \"banana\", \"cherry\"];\n\nfor (let i = 0; i < fruits.length; i++) {\n    console.log(fruits[i]);\n}\n\n// Output\n// apple\n// banana\n// cherry"
              },
              {
                "type": "sentence",
                "text": "This loop iterates through the fruits array and prints each element to the console."
              }
              ],
              "locked": true
            },
            {
              "title": "JavaScript while and do...while Loop",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript while Loop"
                },
                {
                  "type": "sentence",
                  "text": "The while loop repeatedly executes a block of code as long as a specified condition is true."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the while loop is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "while (condition) {\n    // body of loop\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "1. The while loop first evaluates the condition inside ( )."
                },
                {
                  "type": "sentence",
                  "text": "2. If the condition evaluates to true, the code inside { } is executed."
                },
                {
                  "type": "sentence",
                  "text": "3. Then, the condition is evaluated again."
                },
                {
                  "type": "sentence",
                  "text": "4. This process continues as long as the condition evaluates to true."
                },
                {
                  "type": "sentence",
                  "text": "5. If the condition evaluates to false, the loop stops."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Display Numbers From 1 to 3"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// initialize variable i\nlet i = 1;\n\n// loop runs until i is less than 4\nwhile (i < 4) {\n    console.log(i);\n    i += 1;\n}\n\nOutput\n1\n2\n3"
                },
                {
                  "type": "sentence",
                  "text": "Here is how the above program works in each iteration of the loop:"
                },
                {
                  "type": "sentence",
                  "text": "A. Variable: i = 1"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i < 4 TRUE"
                },
                {
                  "type": "sentence",
                  "text": "Action: 1 is printed. i is increased to 2."
                },
                {
                  "type": "sentence",
                  "text": "B. Variable: i = 2"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i < 4 TRUE"
                },
                {
                  "type": "sentence",
                  "text": "Action: 2 is printed. i is increased to 3."
                },
                {
                  "type": "sentence",
                  "text": "C. Variable: i = 3"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i < 4 TRUE"
                },
                {
                  "type": "sentence",
                  "text": "Action: 3 is printed. i is increased to 4."
                },
                {
                  "type": "sentence",
                  "text": "D. Variable: i = 4"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i < 4 TRUE"
                },
                {
                  "type": "sentence",
                  "text": "Action: The loop is terminated."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Sum of Only Positive Numbers"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let num = 0, sum = 0;\n\n// loop as long as num is 0 or positive\nwhile (num >= 0) {\n\n    // add all positive numbers\n    sum += num;\n\n    // take input from the user\n    num = parseInt(prompt(\"Enter a number: \"));\n}\n\n// last, display sum\nconsole.log(`The sum is ${sum}`);\n\n// Output\n// Enter a number: 2\n// Enter a number: 4\n// Enter a number: -3\n// The sum is 6"
                },
                {
                  "type": "sentence",
                  "text": "The above program prompts the user to enter a number."
                },
                {
                  "type": "sentence",
                  "text": "Since JavaScript prompt() only takes inputs as string, parseInt() converts the input to a number."
                },
                {
                  "type": "sentence",
                  "text": "As long as we enter positive numbers, the while loop adds them up and prompts us to enter more numbers."
                },
                {
                  "type": "sentence",
                  "text": "So when we enter a negative number, the loop terminates."
                },
                {
                  "type": "sentence",
                  "text": "Finally, we display the total sum of positive numbers."
                },
                {
                  "type": "sentence",
                  "text": "Note: When we add two or more numeric strings, JavaScript treats them as strings. For example, \"2\" + \"3\" = \"23\". So, we should always convert numeric strings to numbers to avoid unexpected behaviors."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript do...while Loop"
                },
                {
                  "type": "sentence",
                  "text": "The do...while loop executes a block of code once, then repeatedly executes it as long as the specified condition is true."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the do...while loop is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "do {\n    // body of loop\n} while(condition);"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "The do…while loop executes the code inside { }."
                },
                {
                  "type": "sentence",
                  "text": "Then, it evaluates the condition inside ( )."
                },
                {
                  "type": "sentence",
                  "text": "If the condition evaluates to true, the code inside { } is executed again."
                },
                {
                  "type": "sentence",
                  "text": "This process continues as long as the condition evaluates to true."
                },
                {
                  "type": "sentence",
                  "text": "If the condition evaluates to false, the loop terminates."
                },
                {
                  "type": "sentence",
                  "text": "Example 3: Display Numbers from 3 to 1"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let i = 3;\n\n// do...while loop\ndo {\n    console.log(i);\n    i--;\n} while (i > 0);\n\n// Output\n// 3\n// 2\n// 1"
                },
                {
                  "type": "sentence",
                  "text": "Here, the initial value of i is 3. Then, we used a do...while loop to iterate over the values of i. Here is how the loop works in each iteration:"
                },
                {
                  "type": "sentence",
                  "text": "Action: 3 is printed. i is decreased to 2."
                },
                {
                  "type": "sentence",
                  "text": "Variable: i = 2"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i > 0"
                },
                {
                  "type": "sentence",
                  "text": "Action: 2 is printed. i is decreased to 1."
                },
                {
                  "type": "sentence",
                  "text": "Variable: i = 1"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i > 0"
                },
                {
                  "type": "sentence",
                  "text": "Action: 1 is printed. i is decreased to 0."
                },
                {
                  "type": "sentence",
                  "text": "Variable: i = 0"
                },
                {
                  "type": "sentence",
                  "text": "Condition: i > 0"
                },
                {
                  "type": "sentence",
                  "text": "Action: The loop is terminated."
                },
                {
                  "type": "sentence",
                  "text": "Example 4: Sum of Positive Numbers"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let sum = 0, num = 0;\n\ndo {\n    // add all positive numbers\n    sum += num;\n\n    // take input from the user\n    num = parseInt(prompt(\"Enter a number: \"));\n\n    // loop terminates if num is negative\n} while (num >= 0);\n\n// last, display sum\nconsole.log(`The sum is ${sum}`);\n\n// Output\n// Enter a number: 2\n// Enter a number: 4\n// Enter a number: -3\n// The sum is 6"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the do...while loop prompts the user to enter a number."
                },
                {
                  "type": "sentence",
                  "text": "As long as we enter positive numbers, the loop adds them up and prompts us to enter more numbers."
                },
                {
                  "type": "sentence",
                  "text": "If we enter a negative number, the loop terminates without adding the negative number."
                }
                ],
                  "locked": true
            },  
            {
              "title": "JavaScript break Statement",
              "content": [
                {
                  "type": "sentence",
                  "text": "The break statement terminates the loop immediately when it's encountered."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of the break statement."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// infinite loop because condition is always true\nwhile (true) {\n\n    // get number input from user\n    let num = Number(prompt(\"Enter a number: \"));\n\n    // break condition\n    if (num == 0) {\n        break;\n    }\n\n    console.log(num);\n}\n\n// Output:\n// Enter a number: 5\n// 5\n// Enter a number: "
                },
                {
                  "type": "sentence",
                  "text": "In this example, the break statement terminates the infinite loop when the user input num is 0. If it isn't 0, the loop keeps taking input and printing it to the screen."
                },
                {
                  "type": "sentence",
                  "text": "Note: The break statement is usually used inside decision-making statements such as if...else."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: JavaScript break With for Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Program to print the value of i\n\nfor (let i = 1; i <= 5; i++) {\n\n    // break condition\n    if (i == 3) {\n        break;\n    }\n\n    console.log(i);\n}\n\n// Output\n// 1\n// 2"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, we have used a for loop to print numbers from 1 to 5. Notice the use of break inside the if statement. When the value of i becomes 3, the break statement is executed, which terminates the loop."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: JavaScript break With while Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Program to find the sum of positive numbers\n// the while loop runs infinitely\n// loop terminates only when user enters a negative number\n\nlet sum = 0;\n\n// infinite loop\nwhile (true) {\n\n    // get number input\n    let num = Number(prompt(\"Enter a number: \" ));\n\n    // terminate the loop if num is negative\n    if (num < 0)\n        break;\n    }\n\n    // otherwise, add num to sum\n    else {\n        sum += num;\n    }\n}\n\n// print the sum\nconsole.log(`Sum: ${sum}`);\n\n// Output\n// Enter a number: 3\n// Enter a number: 5\n// Enter a number: 0\n// Enter a number: 8\n// Enter a number: -3\n// Sum: 16"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have used a while loop whose condition is always true. Inside the loop, we ask for user input. If the input value is negative, the break statement terminates the loop. Otherwise, the input value is added to the sum variable."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript continue Statement",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript continue Statement"
                },
                {
                  "type": "sentence",
                  "text": "The continue statement skips the current iteration of the loop and proceeds to the next iteration."
                },
                {
                  "type": "sentence",
                  "text": "Here's a brief example to demonstrate the continue statement."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// display odd numbers\n\nfor (let i = 1; i <= 5; i++) {\n    // skip the iteration if i is even\n    if (i % 2 === 0) {\n        continue;\n    }\n    console.log(i);\n}\n\n// Output:\n// 1\n// 3\n// 5"
                },
                {
                  "type": "sentence",
                  "text": "Here, continue skips the rest of the loop's body when i is even. Thus, only odd numbers are printed."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: JavaScript continue With for Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (let i = 1; i <= 10; ++i) {\n\n    // skip iteration if value of\n    // i is between 4 and 9\n    if (i > 4 && i < 9) {\n        continue;\n    }\n    console.log(i);\n}\n\n// Output\n// 1\n// 2\n// 3\n// 4\n// 9\n// 10"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we used a for loop to print the value of the variable i in each iteration. Notice the statement,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "if (i > 4 && i < 9) {\n    continue;\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here, the continue statement is executed whenever i becomes more than 4 and less than 9. Hence, the output skips the values 5, 6, 7, and 8."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: JavaScript continue With while Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "var num = 1;\n\nwhile (num <= 10) {\n\n    // skip iteration if num is even\n    if (num % 2 === 0) {\n        ++num;\n        continue;\n    }\n\n    console.log(num);\n    ++num;\n}\n\n// Output\n// 1\n// 3\n// 5\n// 7\n// 9"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we used a while loop to print odd numbers from 1 to 10. Notice the line,"
                },
                {
                  "type": "sentence",
                  "text": "When the number is even,"
                },
                {
                  "type": "sentence",
                  "text": "1. The value of num is incremented for the next iteration."
                },
                {
                  "type": "sentence",
                  "text": "2. The continue statement then skips the current iteration."
                },
                {
                  "type": "sentence",
                  "text": "Notice that we have increased the value of num both inside and outside the if statement."
                },
                {
                  "type": "sentence",
                  "text": "Inside the if Block:"
                },
                {
                  "type": "sentence",
                  "text": "You must increase the value of num before the continue statement is executed. Otherwise, you will end up creating an infinite loop because num <= 10 will always be true."
                },
                {
                  "type": "sentence",
                  "text": "Outside the if Block:"
                },
                {
                  "type": "sentence",
                  "text": "When the if block is not executed, your code to increase num will also be skipped. Thus, you must increase num again outside the if block to prevent an infinite loop."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript switch Statement",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript switch...case statement executes different blocks of code based on the value of a given expression."
                },
                {
                  "type": "sentence",
                  "text": "Here's a simple example of the switch...case statement. You can read the rest of the tutorial for more."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let trafficLight = \"green\";\nlet message = \"\"\n\nswitch (trafficLight) {\n    case \"red\":\n        message = \"Stop immediately.\";\n        break;\n    case \"yellow\":\n        message = \"Prepare to stop.\";\n        break;\n    case \"green\":\n        message = \"Proceed or continue driving.\";\n        break;\n    default:\n        message = \"Invalid traffic light color.\";\n}\n\nconsole.log(message)\n\n// Output: Proceed or continue driving."
                },
                {
                  "type": "sentence",
                  "text": "The above program checks the value of trafficLight and prints the corresponding meaning of the traffic light. If the value doesn't match any of the specified cases, it prints Invalid traffic light color."
                },
                {
                  "type": "sentence",
                  "text": "Syntax of the switch...case Statement"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "switch (expression) {\n\n    case value1:\n        // code block to be executed\n        // if expression matches value1\n        break;\n\n    case value2:\n        // code block to be executed\n        // if expression matches value2\n        break;\n\n    ...\n\n    default:\n        // code block to be executed\n        // if expression doesn't match any case\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "The switch statement first evaluates the expression."
                },
                {
                  "type": "sentence",
                  "text": "After that, it compares the result against value1. If a matching is found, the corresponding code block is executed. Then, the break statement immediately stops further checking of other cases."
                },
                {
                  "type": "sentence",
                  "text": "If there is no match for value1, the program compares the result with the next specified case value (value2). This process continues until a matching case is found."
                },
                {
                  "type": "sentence",
                  "text": "If none of the case values match, the code block in the default block is executed."
                },
                {
                  "type": "sentence",
                  "text": "Let's try to understand this process with a flowchart below."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Simple Program Using switch...case"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let day = 3;\nlet activity;\n\nswitch (day) {\n\n    case 1:\n        console.log(\"Sunday\");\n        break;\n\n    case 2:\n        console.log(\"Monday\");\n        break;\n\n    case 3:\n        console.log(\"Tuesday\");\n        break;\n\n    case 4:\n        console.log(\"Wednesday\");\n        break;\n\n    case 5:\n        console.log(\"Thursday\");\n        break;\n\n    case 6:\n        console.log(\"Friday\");\n        break;\n\n    case 7:\n        console.log(\"Saturday\");\n        break;\n\n    default:\n        console.log(\"Invalid Day\");\n}\n\n// Output\n// Tuesday"
                },
                {
                  "type": "sentence",
                  "text": "This program prints the day based on the number stored in the day variable (1 for Sunday, 2 for Monday, and so on)."
                },
                {
                  "type": "sentence",
                  "text": "Here, the switch statement checks the value of day against a series of cases:"
                },
                {
                  "type": "sentence",
                  "text": "First, it checks day against case 1. Since it doesn't match, this case is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Next, it checks day against case 2. Since it doesn't match, this case is skipped."
                },
                {
                  "type": "sentence",
                  "text": "Then, it checks day against case 3. Since there is a match, its code block is executed (Tuesday is printed)."
                },
                {
                  "type": "sentence",
                  "text": "After printing Tuesday, a break statement is encountered, which terminates the switch statement."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Simple Calculator Using switch...case"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// take user input for two numbers\nlet number1 = Number(prompt(\"Enter the value of number1: \")); \nlet number2 = Number(prompt(\"Enter the value of number2: \")); \n\n// take user input to select an operator \nconst operator = prompt(\"Enter a operator ( either +, -, * or / ): \");\n\nswitch(operator) {\n\n    case \"+\":\n        result = number1 + number2;\n        console.log(`${number1} + ${number2} = ${result}`);\n        break;\n\n    case \"-\":\n        result = number1 - number2;\n        console.log(`${number1} - ${number2} = ${result}`);\n        break;\n\n    case \"*\":\n        result = number1 * number2;\n        console.log(`${number1} * ${number2} = ${result}`);\n        break;\n\n    case \"/\":\n        result = number1 / number2;\n        console.log(`${number1} / ${number2} = ${result}`);\n        break;\n\n    default:\n        console.log(\"Invalid operator\");\n}"
                },
                {
                  "type": "sentence",
                  "text": "Sample Output 1"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Enter the value of number1: 6\nEnter the value of number2: 3\nEnter a operator ( either +, -, * or / ): *\n6 * 3 = 18"
                },
                {
                  "type": "sentence",
                  "text": "Sample Output 2"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Enter the value of number1: 6\nEnter the value of number2: 3\nEnter a operator ( either +, -, * or / ): +\n6 + 3 = 9"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, we prompted the user to:"
                },
                {
                  "type": "sentence",
                  "text": "Enter two numbers: number1 and number2."
                },
                {
                  "type": "sentence",
                  "text": "Select an operator: +, -, *, or /."
                },
                {
                  "type": "sentence",
                  "text": "Based on the user input, the switch statement performs the corresponding calculation."
                },
                {
                  "type": "sentence",
                  "text": "Note: Here, we have used template literal `${number1} + ${number2} = ${result}` that combines text and variable into one string."
                },
                {
                  "type": "sentence",
                  "text": "It shows the values of number1, number2, and result directly in the message, like 5 + 3 = 8. To learn more about template literals, visit JavaScript Template Literals."
                }
              ],
              "locked": true
            }                                                                                          
          ],
          "quiz": [
            {
              "question": "Which of the following operators is used to check if two values are equal in JavaScript?",
              "options": [
                "!=",
                "===",
                "!==",
                ">="
              ],
              "correctAnswer": "===",
              "points": 1,
              "locked": true
            },
            {
              "question": "What will be the output of the following code: `console.log(5 > 3 && 2 < 4);`?",
              "options": [
                "true",
                "false",
                "undefined",
                "null"
              ],
              "correctAnswer": "true",
              "points": 1,
              "locked": true
            },
            {
              "question": "How does the `else if` statement work in JavaScript?",
              "options": [
                "It executes code only if the previous `if` condition is false and the `else if` condition is true.",
                "It executes code if the condition of the previous `else if` statement is false.",
                "It executes code only if the `else` condition is false.",
                "It executes code if the previous `if` condition is true."
              ],
              "correctAnswer": "It executes code only if the previous `if` condition is false and the `else if` condition is true.",
              "points": 1,
              "locked": true
            },
            {
              "question": "What will the following code output: `console.log(10 % 3);`?",
              "options": [
                "3",
                "1",
                "0",
                "10"
              ],
              "correctAnswer": "1",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which keyword is used to define a function in JavaScript?",
              "options": [
                "function",
                "define",
                "func",
                "method"
              ],
              "correctAnswer": "function",
              "points": 1,
              "locked": true
            },
            {
              "question": "What does the `parseInt()` function do in JavaScript?",
              "options": [
                "Converts a string to a floating-point number",
                "Converts a string to an integer",
                "Converts an integer to a string",
                "Parses JSON data"
              ],
              "correctAnswer": "Converts a string to an integer",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which operator is used for string concatenation in JavaScript?",
              "options": [
                "+",
                "-",
                "*",
                "/"
              ],
              "correctAnswer": "+",
              "points": 1,
              "locked": true
            },
            {
              "question": "How can you create a new array in JavaScript?",
              "options": [
                "var arr = []",
                "var arr = new Array()",
                "Both of the above",
                "None of the above"
              ],
              "correctAnswer": "Both of the above",
              "points": 1,
              "locked": true
            },
            {
              "question": "What will the following code output: `console.log(typeof 'hello');`?",
              "options": [
                "string",
                "number",
                "object",
                "undefined"
              ],
              "correctAnswer": "string",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which method can be used to add elements to the end of an array in JavaScript?",
              "options": [
                "push()",
                "pop()",
                "shift()",
                "unshift()"
              ],
              "correctAnswer": "push()",
              "points": 1,
              "locked": true
            },
            {
              "question": "What does `console.log()` do in JavaScript?",
              "options": [
                "Logs data to the console",
                "Displays an alert box",
                "Writes data to the document",
                "None of the above"
              ],
              "correctAnswer": "Logs data to the console",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which method is used to remove the last element from an array in JavaScript?",
              "options": [
                "pop()",
                "push()",
                "shift()",
                "unshift()"
              ],
              "correctAnswer": "pop()",
              "points": 1,
              "locked": true
            },
            {
              "question": "How can you check if a variable is an array in JavaScript?",
              "options": [
                "Array.isArray()",
                "typeof variable === 'array'",
                "variable instanceof Array",
                "Both Array.isArray() and variable instanceof Array"
              ],
              "correctAnswer": "Both Array.isArray() and variable instanceof Array",
              "points": 1,
              "locked": true
            },
            {
              "question": "What is the result of `2 ** 3` in JavaScript?",
              "options": [
                "6",
                "8",
                "9",
                "12"
              ],
              "correctAnswer": "8",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which loop is guaranteed to execute at least once?",
              "options": [
                "for",
                "while",
                "do...while",
                "foreach"
              ],
              "correctAnswer": "do...while",
              "points": 1,
              "locked": true
            },
            {
              "question": "What will the following code output: `console.log([1,2,3] == [1,2,3]);`?",
              "options": [
                "true",
                "false",
                "undefined",
                "NaN"
              ],
              "correctAnswer": "false",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which statement will correctly declare a variable in JavaScript?",
              "options": [
                "let x = 10;",
                "var x = 10;",
                "const x = 10;",
                "All of the above"
              ],
              "correctAnswer": "All of the above",
              "points": 1,
              "locked": true
            },
            {
              "question": "What will the following code output: `console.log(!!'text');`?",
              "options": [
                "true",
                "false",
                "undefined",
                "null"
              ],
              "correctAnswer": "true",
              "points": 1,
              "locked": true
            },
            {
              "question": "How do you write a single-line comment in JavaScript?",
              "options": [
                "// This is a comment",
                "<!-- This is a comment -->",
                "# This is a comment",
                "/* This is a comment */"
              ],
              "correctAnswer": "// This is a comment",
              "points": 1,
              "locked": true
            },
            {
              "question": "Which JavaScript method can be used to convert a string to lowercase?",
              "options": [
                "toLowerCase()",
                "toUpperCase()",
                "toString()",
                "parse()"
              ],
              "correctAnswer": "toLowerCase()",
              "points": 1,
              "locked": true
            }
          ],
          "activities": [
  {
    "title": "JavaScript Conditional Statements",
    "description": "Practice using conditional statements in JavaScript to evaluate and respond to different conditions based on variable values.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "In this activity, you will write JavaScript code to evaluate a number and print whether it is positive, negative, or zero.\n\n1. Variable Declaration:\n   - Declare a variable `number` and initialize it with a value (e.g., `7`).\n\n2. Conditional Statements:\n   - Use an `if` statement to check if the number is greater than 0. If true, print 'The number is positive.'\n   - Use an `else if` statement to check if the number is less than 0. If true, print 'The number is negative.'\n   - Use an `else` statement to cover the case where the number is equal to 0 and print 'The number is zero.'",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "let number = 7;\nif (number > 0) {\n    console.log('The number is positive.');\n} else if (number < 0) {\n    console.log('The number is negative.');\n} else {\n    console.log('The number is zero.');\n}",
          "output": "The number is positive.",
          "required": [
            "let number = 7;",
            "if (number > 0) {",
            "    console.log('The number is positive.');",
            "} else if (number < 0) {",
            "    console.log('The number is negative.');",
            "} else {",
            "    console.log('The number is zero.');"
       
          ],
          "testCaseSentences": [
            "Declare a variable 'number' with a value of 7.",
            "Check if the number is greater than 0 using an if statement.",
            "Print 'The number is positive.' if the condition is true.",
            "Use an else if statement to check if the number is less than 0.",
            "Print 'The number is negative.' if the condition is true.",
            "Use an else statement to handle the number being 0.",
            "Print 'The number is zero.' if the number equals 0."
          ],
          "expectedImage": "/activities/jsacts/2.1.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Loop Control Statements",
    "description": "Practice using `continue` and `break` statements in a loop to control the flow of execution.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "In this activity, you will write JavaScript code using a `for` loop that demonstrates the use of `continue` and `break` statements to control the execution flow.\n\n1. Looping:\n   - Use a `for` loop to iterate through numbers from `1` to `10`.\n\n2. Using `continue`:\n   - Inside the loop, use a `continue` statement to skip printing the number `5`.\n\n3. Using `break`:\n   - Use a `break` statement to stop the loop when the number `8` is reached.\n\n4. Output:\n   - Print each number except `5`, and stop the loop when reaching `8`.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "for (let i = 1; i <= 10; i++) {\n    if (i === 5) {\n        continue; // Skip the number 5\n    }\n    if (i === 8) {\n        break; // Stop the loop when i is 8\n    }\n    console.log('Number:', i);\n}",
          "output": "Number: 1\nNumber: 2\nNumber: 3\nNumber: 4\nNumber: 6\nNumber: 7",
          "required": [
            "for (let i = 1; i <= 10; i++) {",
            "    if (i === 5) { continue;",
    
            "    if (i === 8) { break;",

            "    console.log(\"Number:\", i);"
      
          ],
          "testCaseSentences": [
            "Use a for loop to iterate through numbers from 1 to 10.",
            "Skip printing the number 5 using a continue statement.",
            "Stop the loop when the number reaches 8 using a break statement.",
            "Print each number except for 5, stopping at 8."
          ],
          "expectedImage": "/activities/jsacts/2.2.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript While Loop with Even and Odd Numbers",
    "description": "Practice using a `while` loop to iterate through numbers and determine if they are even or odd.",
    "language": "JavaScriptConsole",
    "difficulty": "medium",
    "problemStatement": "In this activity, you will write JavaScript code using a `while` loop to check and print whether numbers from `10` down to `0` are even or odd.\n\n1. Looping:\n   - Use a `while` loop to iterate from `10` to `0`.\n\n2. Checking Even/Odd:\n   - Inside the loop, use the modulus operator (`%`) to determine if the current number is even or odd.\n   - Print the result indicating whether the number is even or odd.\n\n3. Decrementing:\n   - Decrement the counter variable in each iteration of the loop.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "let number = 10;\nwhile (number >= 0) {\n    if (number % 2 === 0) {\n        console.log(`${number} is even.`);\n    } else {\n        console.log(`${number} is odd.`);\n    }\n    number--; // Decrement the counter\n}",
          "output": "10 is even.\n9 is odd.\n8 is even.\n7 is odd.\n6 is even.\n5 is odd.\n4 is even.\n3 is odd.\n2 is even.\n1 is odd.\n0 is even.",
          "required": [
            "let number = 10;",
            "while (number >= 0) {",
            "    if (number % 2 === 0) {",
            "        console.log(`${number} is even.`);",
            "    } else {",
            "        console.log(`${number} is odd.`);",
            "    number--;"
       
          ],
          "testCaseSentences": [
            "Initialize a variable 'number' to 10.",
            "Use a while loop to check whether the current number is greater than or equal to 0.",
            "Check if the number is even using the modulus operator.",
            "Print that the number is even if the condition is true.",
            "Otherwise,using else statement, print that the number is odd.",
            "Print that the number is odd.",
            "Decrement the number in each iteration."
          ],
          "expectedImage": "/activities/jsacts/2.3.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title":"JavaScript Multiplication Using a Loop",
    "description":  "Practice using loops and basic arithmetic operations in JavaScript. This activity involves calculating the product of two numbers using a loop.",
    "language": "JavaScriptConsole",
    "difficulty": "hard",
    "problemStatement":"In this activity, you will write JavaScript code to perform multiplication using a loop. The task involves calculating the product of two numbers by repeatedly adding one number to itself.\n\n1. Variable Declaration:\n   - Declare two variables `num1` and `num2` to represent the numbers to be multiplied. Set `num1` to 5 and `num2` to 3.\n\n2. Multiplication Using Loop:\n   - Initialize a variable `result` to 0.\n   - Use a `for` loop to add `num1` to `result`, `num2` times.\n   - After the loop, print the `result` to the console as the product of `num1` and `num2`.\n\n3. Expected Output:\n   - For the given values of `num1` and `num2`, the output should show `Multiplication result: 15`.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "let num1 = 5;\nlet num2 = 3;\nlet result = 0;\nfor (let i = 0; i < num2; i++) {\n    result += num1; // Add num1 to result\n}\nconsole.log('Multiplication result:', result);",
          "output": "Multiplication result: 15",
          "required": [
            "let num1 = 5;",
            "let num2 = 3;",
            "let result = 0;",
            "for (let i = 0; i < num2; i++) {",
            "    result += num1;",
            "console.log('Multiplication result:', result);"
          ],
          "testCaseSentences": [
            "Declare two variables 'num1' and 'num2' with values 5 and 3 respectively.",
            "Initialize a result variable to 0.",
            "Use a for loop to add 'num1' to 'result' for 'num2' times.",
            "Add the result to num1.",
            "Print the result as the multiplication of 'num1' and 'num2'."
          ],
          "expectedImage": "/activities/jsacts/2.4.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  }
 ],
          "totalPoints": 0,
          "locked": true
        },
        {
          "title": "Lesson 3: JS Functions",
          "documents": [
            {
              "title": "JavaScript Function",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Function and Function Expressions"
                },
                {
                  "type": "sentence",
                  "text": "A function is an independent block of code that performs a specific task, while a function expression is a way to store functions in variables."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of function and function expression. You can read the rest of the tutorial for more."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create a function named greet()\nfunction greet() {\n    console.log(\"Hello World!\");\n}\n\n// store a function in the displayPI variable\n// this is a function expression\nlet displayPI = function() {\n    console.log(\"PI = 3.14\");\n}\n\n// call the greet() function\ngreet();\n\n// call the reply() function\ndisplayPI();\n\n// Output:\n// Hello World!\n// PI = 3.14"
                },
                {
                  "type": "sentence",
                  "text": "Here, we created the greet() function and used the displayPI variable to create a function expression. Then, we called the functions by using their names followed by parentheses () i.e. greet() and displayPI()."
                },
                {
                  "type": "sentence",
                  "text": "Create a JavaScript Function"
                },
                {
                  "type": "sentence",
                  "text": "We can create a function in JavaScript using the function keyword:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet() {\n    console.log(\"Hello World!\");\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here, we have created a simple function named greet() that prints Hello World! on the screen."
                },
                {
                  "type": "sentence",
                  "text": "Our function contains the following parts:"
                },
                {
                  "type": "sentence",
                  "text": "Function Keyword - The function keyword is used to create the function."
                },
                {
                  "type": "sentence",
                  "text": "Function Name - The name of the function is greet, followed by parentheses ()."
                },
                {
                  "type": "sentence",
                  "text": "Function Body - The code that is executed when we call the function. In our case, it is console.log(\"Hello World!\");"
                },
                {
                  "type": "sentence",
                  "text": "Call a Function"
                },
                {
                  "type": "sentence",
                  "text": "Previously, we declared a function named greet():"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet() {\n   console.log(\"Hello World!\");\n}"
                },
                {
                  "type": "sentence",
                  "text": "If we run the above code, we won't get any output. But why?"
                },
                {
                  "type": "sentence",
                  "text": "It's because creating a function doesn't mean we are executing the code inside it. In other words, the function is ready and available for us to execute whenever we choose."
                },
                {
                  "type": "sentence",
                  "text": "And if we want to use the function, we need to call it."
                },
                {
                  "type": "sentence",
                  "text": "Function Call"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "greet();"
                },
                {
                  "type": "sentence",
                  "text": "As you can see, we call a function by writing the function name (greet) followed by parentheses ()."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: JavaScript Function Call"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create a function\nfunction greet() {\n    console.log(\"Hello World!\");\n}\n\n// call the function\ngreet();\n\nconsole.log(\"Outside function\");"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello World!\nOutside function"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we created a function named greet(). Here's how the control of the program flows:"
                },
                {
                  "type": "sentence",
                  "text": "When the greet() function is called, the program's control transfers to the function definition."
                },
                {
                  "type": "sentence",
                  "text": "All the code inside the function is executed (Hello World! is printed)."
                },
                {
                  "type": "sentence",
                  "text": "The program control then jumps to the next statement after the function call (Outside function is printed)."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Function Arguments"
                },
                {
                  "type": "sentence",
                  "text": "Arguments are values you pass to the function when you call it."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function with a parameter called 'name'\nfunction greet(name) {\n    console.log(`Hello ${name}`);\n}\n\n// pass argument to the function\ngreet(\"John\");"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello John"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we passed \"John\" as an argument to the greet() function."
                },
                {
                  "type": "sentence",
                  "text": "Notice the name variable declared inside parentheses:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet(name) {\n    // code\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here, name is a function parameter, which acts as a placeholder to store the function argument."
                },
                {
                  "type": "sentence",
                  "text": "In other words, the argument \"John\" is stored in the name parameter."
                },
                {
                  "type": "sentence",
                  "text": "Remember: A function argument is the value we pass to the function, while a function parameter is a placeholder that stores the argument passed to the function."
                },
                {
                  "type": "sentence",
                  "text": "Pass Different Arguments to the Function"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet(name) {\n    console.log(`Hello ${name}`);\n}\n\n// pass \"John\" as argument\ngreet(\"John\");\n\n// pass \"David\" as argument\ngreet(\"David\");"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello John\nHello David"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have created a function named greet() with a parameter named name."
                },
                {
                  "type": "sentence",
                  "text": "We then passed different arguments to the function in each call, making the function reusable and dynamic."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: JavaScript Function to Add Two Numbers"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function with two arguments\nfunction addNumbers(num1, num2) {\n    let sum = num1 + num2;\n   console.log(`Sum: ${sum}`);\n}\n\n// call function by passing two arguments\naddNumbers(5, 4);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Sum: 9"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have created a function named addNumbers() with two parameters: num1 and num2."
                },
                {
                  "type": "sentence",
                  "text": "Here, num1 takes the value of the first argument, 5."
                },
                {
                  "type": "sentence",
                  "text": "num2 takes the value of the second argument, 4."
                },
                {
                  "type": "sentence",
                  "text": "The function then adds the values of num1 and num2 and the result is printed as output."
                },
                {
                  "type": "sentence",
                  "text": "The return Statement"
                },
                {
                  "type": "sentence",
                  "text": "We can return a value from a JavaScript function using the return statement."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function to find square of a number\nfunction findSquare(num) {\n\n    // return square\n    return num * num;\n}\n\n// call the function and store the result\nlet square = findSquare(3);\n\nconsole.log(`Square: ${square}`);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Square: 9"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have created a function named findSquare(). The function accepts a number and returns the square of the number."
                },
                {
                  "type": "sentence",
                  "text": "In our case, we passed 3 as an argument to the function. So, the function returns the square of 3, which is 9, to the function call."
                },
                {
                  "type": "sentence",
                  "text": "We then stored this return value in the square variable and printed it."
                },
                {
                  "type": "sentence",
                  "text": "The return Statement Terminates the Function"
                },
                {
                  "type": "sentence",
                  "text": "Any code written in the function after the return statement is not executed. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function display() {\n\n    console.log(\"This will be executed.\");\n\n    return \"Returning from function.\";\n\n    console.log(\"This will not be executed.\");\n}\n\nlet message = display();\nconsole.log(message);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "This will be executed.\nReturning from function."
                },
                {
                  "type": "sentence",
                  "text": "In this example, the display() function doesn't execute the second console.log() statement inside it."
                },
                {
                  "type": "sentence",
                  "text": "This is because the function execution stops at the return statement. So, the following code is never reached:"
                },
                {
                  "type": "sentence",
                  "text": "console.log(\"This will not be executed.\");"
                },
                {
                  "type": "sentence",
                  "text": "This is what actually happens:"
                },
                {
                  "type": "sentence",
                  "text": "First, the function prints This will be executed. to the screen."
                },
                {
                  "type": "sentence",
                  "text": "Then, it returns the string Returning from function. to the function call."
                },
                {
                  "type": "sentence",
                  "text": "Finally, the function terminates its execution."
                },
                {
                  "type": "sentence",
                  "text": "The return value is then stored in the message variable and printed."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Library Functions"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript provides some built-in functions that can be directly used in our program. We don't need to create these functions; we just need to call them."
                },
                {
                  "type": "sentence",
                  "text": "Some common JavaScript library functions are:"
                },
                {
                  "type": "sentence",
                  "text": "A. Library Function: console.log()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Prints the string inside the quotation marks."
              },
              {
                  "type": "sentence",
                  "text": "B. Library Function: Math.sqrt()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the square root of a number."
              },
              {
                  "type": "sentence",
                  "text": "C. Library Function: Math.pow()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the power of a number."
              },
              {
                  "type": "sentence",
                  "text": "D. Library Function: toUpperCase()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the string converted to uppercase."
              },
              {
                  "type": "sentence",
                  "text": "E. Library Function: toLowerCase()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the string converted to lowercase."
              },
              {
                "type": "sentence",
                "text": "Example 3: JavaScript Library Function"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// Math.sqrt() computes the square root\nlet squareRoot = Math.sqrt(4);\nconsole.log(\"Square Root of 4 is\", squareRoot);\n\n// Math.pow() computes the power\nlet power = Math.pow(2, 3);\nconsole.log(\"2 to the power of 3 is\", power);\n\n// toUpperCase() converts text to uppercase\nlet band = \"Iron Maiden\";\nlet bandUpper = band.toUpperCase();\nconsole.log(`Favorite Band: ${bandUpper}`);"
              },
              {
                "type": "sentence",
                "text": "Output"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "Square Root of 4 is 2\n2 to the power 3 is 8\nFavorite Band: IRON MAIDEN"
              },
              {
                "type": "sentence",
                "text": "Here,"
              },
              {
                "type": "sentence",
                "text": "Math.sqrt(4) calculates the square root of 4, resulting in 2."
              },
              {
                "type": "sentence",
                "text": "Math.pow(2, 3) computes 2 ^ 3 (2 raised to the power of 3), which is 8."
              },
              {
                "type": "sentence",
                "text": "band.toUpperCase() converts the string in the band variable to uppercase, resulting in IRON MAIDEN."
              },
              {
                "type": "sentence",
                "text": "Function Expressions"
              },
              {
                "type": "sentence",
                "text": "In JavaScript, a function expression is a way to store functions in variables. For example,"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "// store a function in the square variable\nlet square = function(num) {\n    return num * num;\n};\n\nconsole.log(square(5));"
              },
              {
                "type": "sentence",
                "text": "Output"
              },
              {
                "type": "code",
                "language": "javascript",
                "code": "25"
              },
              {
                "type": "sentence",
                "text": "In this example, the function that calculates the square of a number is assigned to the square variable."
              },
              {
                "type": "sentence",
                "text": "We then used this variable to call the function expression using the code square(5), where 5 is the function argument."
              },
              {
                "type": "sentence",
                "text": "Note: Like with functions, we need to use parentheses () with the variable name to call a function expression."
              }
              ],
              "locked": true
            },              
            {
              "title": "Variable Scope",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Variable Scope"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, the scope of a variable determines where it can be accessed within the code."
                },
                {
                  "type": "sentence",
                  "text": "Variables can be declared in different scopes:"
                },
                {
                  "type": "sentence",
                  "text": "Global Scope"
                },
                {
                  "type": "sentence",
                  "text": "Local (Function) Scope"
                },
                {
                  "type": "sentence",
                  "text": "Block-Level Scope"
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function addNumbers() {\n    var sum = 5 + 4;\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here, the sum variable is created inside the addNumbers() function."
                },
                {
                  "type": "sentence",
                  "text": "So, it's accessible only within that function (local or function scope). This kind of variable is known as a local variable."
                },
                {
                  "type": "sentence",
                  "text": "Note: Based on the scope they're declared in, variables can be classified as:"
                },
                {
                  "type": "sentence",
                  "text": "Global Variables"
                },
                {
                  "type": "sentence",
                  "text": "Local Variables"
                },
                {
                  "type": "sentence",
                  "text": "Block-Level Variables"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Local Variables"
                },
                {
                  "type": "sentence",
                  "text": "When variables are declared inside a function, they have a local scope and are accessible only within that function."
                },
                {
                  "type": "sentence",
                  "text": "These types of variables are called local variables. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet() {\n    // local variable\n    var message = \"Hello\";\n    \n    console.log(`Local: ${message}`);\n}\n\ngreet();\n\n// try to access message variable\n// outside the greet() function\nconsole.log(`Global: ${message}`);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Local: Hello\nERROR!\n... ... ...\nReferenceError: message is not defined"
                },
                {
                  "type": "sentence",
                  "text": "Here, the message variable is local to the greet() function. So, it can only be accessed within that function."
                },
                {
                  "type": "sentence",
                  "text": "That's why we get an error when we try to access it outside the greet() function."
                },
                {
                  "type": "sentence",
                  "text": "To fix this issue, we can make the message variable global."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Global Variables"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, a variable declared outside any function or in the global scope is known as a global variable."
                },
                {
                  "type": "sentence",
                  "text": "A global variable can be accessed both inside and outside of functions. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// declare global variable\nvar message = \"Hello\";\n\nfunction greet() {\n    console.log(`Local: ${message}`);\n}\n\ngreet();\n\nconsole.log(`Global: ${message}`);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Local: Hello\nGlobal: Hello"
                },
                {
                  "type": "sentence",
                  "text": "Here, we can access the message variable from outside of the greet() function."
                },
                {
                  "type": "sentence",
                  "text": "This is possible because we have created the message variable in the global scope (outside the function)."
                },
                {
                  "type": "sentence",
                  "text": "Thus, message will be accessible from any scope (region) of the program."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Block-Level Variables"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript ES6 introduced block-level scoping with the let and const keywords."
                },
                {
                  "type": "sentence",
                  "text": "Block-level variables are accessible only within the block {} they are defined in, which can be smaller than a function's scope. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function display_scopes() {\n    // declare variable in local scope\n    let message = \"local\";\n\n    if (true) {\n\n        // declare block-level variable\n        let message = \"block-level\";\n\n        console.log(`inner scope: ${message}`);\n    }\n\n    console.log(`outer scope: ${message}`);\n}\n\ndisplay_scopes();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "inner: block-level\nouter: local"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we have created two separate message variables:"
                },
                {
                  "type": "sentence",
                  "text": "Block-Level: The variable inside the if block (visible only there)."
                },
                {
                  "type": "sentence",
                  "text": "Local-Level: The variable inside the display_scopes() function."
                }
              ],
              "locked": true
            },              
            {
              "title": "JavaScript Hoisting",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Hoisting"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, hoisting is a behavior in which a function or a variable can be used before declaration."
                },
                {
                  "type": "sentence",
                  "text": "Here is a simple example of variable hoisting in JavaScript. Read the rest of the tutorial to learn more."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// use test variable before declaring\nconsole.log(test);\n\n// declare and initialize test variable\nvar test = 5;\n\n// Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "Here, we can use the test variable before declaration because of variable hoisting. However, we get undefined as output because the variable hasn't been initialized at the time it's printed."
                },
                {
                  "type": "sentence",
                  "text": "Hoisting in JavaScript"
                },
                {
                  "type": "sentence",
                  "text": "There are generally two types of hoistings in JavaScript:"
                },
                {
                  "type": "sentence",
                  "text": "Variable Hoisting"
                },
                {
                  "type": "sentence",
                  "text": "Function Hoisting"
                },
                {
                  "type": "sentence",
                  "text": "Let's understand each of them in detail."
                },
                {
                  "type": "sentence",
                  "text": "Variable Hoisting"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, the behavior of hoisting varies depending on whether a variable is declared using var, let, or const."
                },
                {
                  "type": "sentence",
                  "text": "Hoisting With 'var'"
                },
                {
                  "type": "sentence",
                  "text": "When we declare a variable using var, it is hoisted to the top of its current scope. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// use the message variable before declaration\nconsole.log(message);\n\n// variable declaration using var keyword\nvar message;\n\n// Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we can use the message variable before it is declared. This is because the variable is hoisted with the default value of undefined."
                },
                {
                  "type": "sentence",
                  "text": "Thus, the above program is equivalent to:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "var message;\nconsole.log(message);\n\n// Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "Hoisting With 'let' and 'const'"
                },
                {
                  "type": "sentence",
                  "text": "When we declare a variable using let or const, it is hoisted to the top of its current scope. However, the variable does not have a default value when it is hoisted (unlike when declared using var)."
                },
                {
                  "type": "sentence",
                  "text": "Let's take a look at the example below."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// use the message variable before declaration\nconsole.log(message);\n\n// variable declaration using let keyword\nlet message;\n\n// Output\n// ReferenceError: Cannot access 'message' before initialization"
                },
                {
                  "type": "sentence",
                  "text": "Here, the error occurs because a variable declared with let is not assigned any default value when hoisted."
                },
                {
                  "type": "sentence",
                  "text": "Note: We know the message variable was hoisted because the error message 'Cannot access 'message' before initialization' indicates that JavaScript is aware that message exists."
                },
                {
                  "type": "sentence",
                  "text": "Had the variable not been hoisted, we'd get a different error, i.e., ReferenceError: message is not defined."
                },
                {
                  "type": "sentence",
                  "text": "Function Hoisting"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, function hoisting allows us to call the function before its declaration."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function call\ngreeting(); \n\n// function declaration\nfunction greeting() {\n  console.log(\"Welcome to Programiz.\");\n}\n\n// Output\n// Welcome to Programiz."
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we can call greeting() before it is declared because of hoisting."
                },
                {
                  "type": "sentence",
                  "text": "Initializations Are Not Hoisted"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript moves the declaration of variables to the top of its scope before the code runs."
                },
                {
                  "type": "sentence",
                  "text": "However, the initialization part stays in the original place in the code. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// display number\nconsole.log(number);\nvar number = 5;\n\n// Output: undefined"
                },
                {
                  "type": "sentence",
                  "text": "The above program is equivalent to:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "var number;\nconsole.log(number);\nnumber = 5;"
                },
                {
                  "type": "sentence",
                  "text": "As you can see, only the declaration is moved to the top."
                },
                {
                  "type": "sentence",
                  "text": "Hence, the value of the number variable is undefined because it is printed without initializing it."
                },
                {
                  "type": "sentence",
                  "text": "Notes:"
                },
                {
                  "type": "sentence",
                  "text": "Generally, hoisting is not performed in other programming languages like Python, C, C++, and Java."
                },
                {
                  "type": "sentence",
                  "text": "Hoisting can cause undesirable outcomes in your program. So, it's best to avoid this practice."
                }
              ],
              "locked": true
            },                            
            {
              "title": "JavaScript Recursion",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Recursion"
                },
                {
                  "type": "sentence",
                  "text": "Recursion is a programming technique where a function calls itself repeatedly to solve a problem. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Program to countdown till 1\n\n// recursive function\nfunction counter(count) {\n\n    // display count\n    console.log(count);\n\n    // condition for stopping\n    if(count > 1) {\n\n        // decrease count\n        count = count - 1;\n\n        // call counter with new value of count\n        counter(count);\n    } else {\n\n        // terminate execution\n        return;\n    };\n};\n\n// access function\ncounter(5);\n\n// Output\n// 5\n// 4\n// 3\n// 2\n// 1"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have a function counter() that accepts the argument count, which is the starting point for our countdown till 1."
                },
                {
                  "type": "sentence",
                  "text": "The counter() function first displays count then checks if the value of count is greater than 1 with count > 1."
                },
                {
                  "type": "sentence",
                  "text": "If count > 1 evaluates to true, the program decreases the value of count and calls counter() with the new value of count (recursion)."
                },
                {
                  "type": "sentence",
                  "text": "Otherwise, if count > 1 evaluates to false, the program executes the return statement, stopping the recursion."
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "The counter() function is a recursive function, a function that calls itself recursively."
                },
                {
                  "type": "sentence",
                  "text": "The count > 1 condition is called a base case, a condition that specifies when the recursion must stop."
                },
                {
                  "type": "sentence",
                  "text": "Note: Without base cases, a recursive function won't know when to stop, resulting in an infinite recursion (error)."
                },
                {
                  "type": "sentence",
                  "text": "Example: Find Factorial of a Number"
                },
                {
                  "type": "sentence",
                  "text": "Now, let's see an example of how we can use recursion to find the factorial of a number."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// recursive function\nfunction factorial(num) {\n\n    // base case\n    // recurse only if num is greater than 0\n    if (num > 1) {\n        return num * factorial(num - 1);\n    }\n    else {\n        return 1;\n    };\n};\n\nlet x = 3;\n\n// store result of factorial() in variable\nlet y = factorial(x);\n\nconsole.log(`The factorial of ${x} is ${y}`);\n\n// Output\n// The factorial of 3 is 6"
                },
                {
                  "type": "sentence",
                  "text": "Here, the factorial() function calls itself recursively as long as the num variable is greater than 1."
                },
                {
                  "type": "sentence",
                  "text": "We can divide the overall recursion process into two halves."
                },
                {
                  "type": "sentence",
                  "text": "The iterations in the first half includes:"
                },
                {
                  "type": "sentence",
                  "text": "A. Variable: num = 3"
              },
              {
                  "type": "sentence",
                  "text": "Base case: num > 1 TRUE"
              },
              {
                  "type": "sentence",
                  "text": "Action: factorial(3) returns 3 * factorial(2)"
              },
              {
                  "type": "sentence",
                  "text": "B. Variable: num = 2"
              },
              {
                  "type": "sentence",
                  "text": "Base case: num > 1 TRUE"
              },
              {
                  "type": "sentence",
                  "text": "Action: factorial(2) returns 2 * factorial(1)"
              },
              {
                  "type": "sentence",
                  "text": "C. Variable: num = 1"
              },
              {
                  "type": "sentence",
                  "text": "Base case: num <= 1 FALSE"
              },
              {
                  "type": "sentence",
                  "text": "Action: factorial(1) returns 1"
              },
              {
                "type": "sentence",
                "text": "1. factorial(3) returns 3 * factorial(2) and waits for factorial(2) to compute."
              },
              {
                "type": "sentence",
                "text": "2. factorial(2) returns 2 * factorial(1) and waits for factorial(1) to compute."
              },
              {
                "type": "sentence",
                "text": "3. factorial(1) doesn't pass the base case, so it directly returns 1."
              },
              {
                "type": "sentence",
                "text": "After that, the second half takes place in reverse:"
              },
              {
                "type": "sentence",
                "text": "1. factorial(1) returns 1."
              },
              {
                "type": "sentence",
                "text": "2. factorial(2) returns 2 * factorial(1). Since factorial(1) returned 1, factorial(2) returns 2 * 1 = 2."
              },
              {
                "type": "sentence",
                "text": "3. factorial(3) returns 3 * factorial(2). Since factorial(2) returned 2, factorial(3) returns 3 * 2 = 6."
              },
              {
                "type": "sentence",
                "text": "Finally, the returned value from factorial(3) is stored in the result variable."
              }
              ],
              "locked": true
            }                        
          ],
            "quiz": [
              {
                "question": "What is a function in JavaScript?",
                "options": [
                  "A block of code that performs a specific task",
                  "A way to store variables",
                  "A method to handle errors",
                  "A type of loop"
                ],
                "correctAnswer": "A block of code that performs a specific task",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the difference between a function declaration and a function expression?",
                "options": [
                  "A function declaration can be used before it's defined, but a function expression cannot",
                  "A function expression can be used before it's defined, but a function declaration cannot",
                  "Both can be used before they are defined",
                  "Neither can be used before they are defined"
                ],
                "correctAnswer": "A function declaration can be used before it's defined, but a function expression cannot",
                "points": 1,
                "locked": true
              },
              {
                "question": "How do you call a function in JavaScript?",
                "options": [
                  "By writing the function name followed by parentheses",
                  "By using the function keyword",
                  "By defining it within curly braces",
                  "By assigning it to a variable"
                ],
                "correctAnswer": "By writing the function name followed by parentheses",
                "points": 1,
                "locked": true
              },
              {
                "question": "What does the return statement do in a function?",
                "options": [
                  "Ends the function execution and returns a value",
                  "Logs a message to the console",
                  "Declares a new variable",
                  "Replaces the function with another function"
                ],
                "correctAnswer": "Ends the function execution and returns a value",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is hoisting in JavaScript?",
                "options": [
                  "The behavior of moving variable and function declarations to the top of their scope",
                  "The process of converting code into machine language",
                  "The technique of optimizing code execution",
                  "The method of managing asynchronous operations"
                ],
                "correctAnswer": "The behavior of moving variable and function declarations to the top of their scope",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of the following code snippet? `console.log(test); var test = 5;`",
                "options": [
                  "undefined",
                  "'5'",
                  "ReferenceError",
                  "SyntaxError"
                ],
                "correctAnswer": "undefined",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which JavaScript function can be used to convert a string to lowercase?",
                "options": [
                  "toLowerCase()",
                  "toUpperCase()",
                  "parseInt()",
                  "toString()"
                ],
                "correctAnswer": "toLowerCase()",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is recursion in programming?",
                "options": [
                  "A function calling itself",
                  "A function that returns a value",
                  "A method to handle errors",
                  "A loop that iterates through arrays"
                ],
                "correctAnswer": "A function calling itself",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of the following code snippet? `function factorial(num) { if (num > 1) { return num * factorial(num - 1); } else { return 1; } } console.log(factorial(3));`",
                "options": [
                  "6",
                  "3",
                  "9",
                  "Factorial is undefined"
                ],
                "correctAnswer": "6",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will the following code output? `function greet(name) { console.log(`Hello ${name}`); } greet('John'); greet('David');`",
                "options": [
                  "Hello John\nHello David",
                  "Hello John\nHello John",
                  "Hello David\nHello David",
                  "Error"
                ],
                "correctAnswer": "Hello John\nHello David",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which keyword is used to declare a variable with block-level scope in JavaScript?",
                "options": [
                  "let",
                  "var",
                  "const",
                  "function"
                ],
                "correctAnswer": "let",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the purpose of a function parameter in JavaScript?",
                "options": [
                  "To act as a placeholder for values passed to the function",
                  "To define the function's name",
                  "To store the function's return value",
                  "To initialize the function's variables"
                ],
                "correctAnswer": "To act as a placeholder for values passed to the function",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which of the following functions is a built-in JavaScript library function?",
                "options": [
                  "Math.sqrt()",
                  "myCustomFunction()",
                  "parseInt()",
                  "all of the above"
                ],
                "correctAnswer": "Math.sqrt()",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the output of the following code? `let result = Math.pow(3, 2); console.log(result);`",
                "options": [
                  "9",
                  "6",
                  "3",
                  "2"
                ],
                "correctAnswer": "9",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of this code snippet? `console.log('Hello'.toUpperCase());`",
                "options": [
                  "HELLO",
                  "Hello",
                  "hello",
                  "Error"
                ],
                "correctAnswer": "HELLO",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the purpose of the base case in a recursive function?",
                "options": [
                  "To stop the recursion and prevent infinite loops",
                  "To initialize the function's variables",
                  "To declare the function",
                  "To handle errors"
                ],
                "correctAnswer": "To stop the recursion and prevent infinite loops",
                "points": 1,
                "locked": true
              },
              {
                "question": "How do you store a function in a variable using a function expression?",
                "options": [
                  "By assigning a function to a variable",
                  "By using the function keyword",
                  "By defining the function within curly braces",
                  "By calling the function with parentheses"
                ],
                "correctAnswer": "By assigning a function to a variable",
                "points": 1,
                "locked": true
              },
              {
                "question": "What does the following code snippet output? `function display() { var message = 'Hello'; console.log(message); } display(); console.log(message);`",
                "options": [
                  "Hello\nReferenceError",
                  "Hello\nundefined",
                  "ReferenceError\nHello",
                  "undefined\nundefined"
                ],
                "correctAnswer": "Hello\nReferenceError",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which of the following is not a JavaScript built-in function?",
                "options": [
                  "console.log()",
                  "Math.sqrt()",
                  "parseFloat()",
                  "myCustomFunction()"
                ],
                "correctAnswer": "myCustomFunction()",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of the following code snippet? `let x = 10; { let x = 20; console.log(x); } console.log(x);`",
                "options": [
                  "20\n10",
                  "10\n20",
                  "ReferenceError",
                  "undefined\nundefined"
                ],
                "correctAnswer": "20\n10",
                "points": 1,
                "locked": true
              }
            ],
            "activities": [
  {
    "title": "JavaScript Function to Add Two Numbers",
    "description": "Practice writing a simple JavaScript function that adds two numbers and returns the result.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "In this activity, you will write a JavaScript function that takes two numbers as arguments, adds them, and returns the sum.\n\n1. Function Declaration:\n   - Define a function `addNumbers` that takes two parameters `num1` and `num2`.\n   - Inside the function, return the sum of `num1` and `num2`.\n\n2. Function Call and Output:\n   - Call the `addNumbers` function with the numbers `5` and `10` as arguments.\n   - Use `let` to declare a variable `result` that stores the return value from `addNumbers`.\n   - Print the output using `console.log` and ensure it includes the text 'The sum is:' followed by the sum.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "function addNumbers(num1, num2) {\n    return num1 + num2;\n}\nlet result = addNumbers(5, 10);\nconsole.log(\"The sum is: \", result);",
          "output": "The sum is: 15",
          "required": [
            "function addNumbers(num1, num2) {",
            "    return num1 + num2;",
        
            "let result = addNumbers(5, 10);",
            "console.log(\"The sum is: \", result);"
          ],
          "testCaseSentences": [
            "Define a function 'addNumbers' that takes two parameters 'num1' and 'num2'.",
            "Return the sum of 'num1' and 'num2' from the function.",
            "Call 'addNumbers' with arguments 5 and 10.",
            "Print the result with the text 'The sum is:' followed by the sum."
          ],
          "expectedImage": "/activities/jsacts/3.1.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Function to Say Hello",
    "description": "Practice writing a simple JavaScript function that prints a greeting message to the console.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "In this activity, you will write a JavaScript function that prints a greeting message.\n\n1. Function Declaration:\n   - Define a function `sayHello` that takes no parameters.\n   - Inside the function, use `console.log` to print the message 'Hello, World!'.\n\n2. Function Call and Output:\n   - Call the `sayHello` function to display the message in the console.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "function sayHello() {\n    console.log(\"Hello, World!\");\n}\nsayHello();",
        "output": "Hello, World!",
        "required": [
          "function sayHello() {",
          "console.log(\"Hello, World!\");",
          "sayHello();"
        ],
        "testCaseSentences": [
          "Define a function 'sayHello' that takes no parameters.",
          "Print 'Hello, World!' inside the function using 'console.log'.",
          "Call the 'sayHello' function to display the message."
        ],
       
        "isHidden": false
      }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "JavaScript Function to Square a Number",
    "description": "Practice writing a simple JavaScript function that squares a number and returns the result.",
    "language": "JavaScriptConsole",
    "difficulty": "easy",
    "problemStatement": "In this activity, you will write a JavaScript function that takes one number as an argument and returns its square.\n\n1. Function Declaration:\n   - Define a function `squareNumber` that takes one parameter `num`.\n   - Inside the function, return the square of `num` (i.e., `num * num`).\n\n2. Function Call and Output:\n   - Call the `squareNumber` function with the number `4` as the argument.\n   - Use `let` to declare a variable `result` that stores the return value from `squareNumber`.\n   - Print the output using `console.log` to display the square.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
      {
        "input": "function squareNumber(num) {\n    return num * num;\n}\nlet result = squareNumber(4);\nconsole.log(\"The square is: \", result);",
        "output": "The square is: 16",
        "required": [
          "function squareNumber(num) {",
          "    return num * num;",
          "let result = squareNumber(4);",
          "console.log(\"The square is: \", result);"
        ],
        "testCaseSentences": [
          "Define a function 'squareNumber' that takes one parameter 'num'.",
          "Return the square of 'num' from the function.",
          "Call 'squareNumber' with argument 4.",
          "Print the result with the text 'The square is:' followed by the square."
        ],
   
        "isHidden": false
      }
    ],
    "locked": true,
    "completed": false
  },
  {
    "title": "Understanding Hoisting in JavaScript",
    "description": "Explore the concept of hoisting in JavaScript by observing how function and variable declarations are handled before the code is executed.",
    "language": "JavaScriptConsole",
    "difficulty": "medium",
    "problemStatement": "In this activity, you will investigate how hoisting works in JavaScript. Specifically, you will see how function and variable declarations are hoisted to the top of their scope.\n\n1. Function Declaration and Hoisting:\n   - Write a function `hoistedFunction` that returns the string `'I am a hoisted function!'`.\n   - Print the result of calling `hoistedFunction` before its definition using `console.log` with the message `'Result of hoisted function:'`.\n   - Observe that the function call works even before the function is declared.\n\n2. Variable Declaration and Hoisting:\n   - Declare a variable `hoistedVar` using `var` and assign it the value `'I am a hoisted variable!'`.\n   - Print the value of `hoistedVar` before its assignment using `console.log` with the message `'Hoisted variable value:'`.\n   - Observe that the variable is hoisted but its value is `undefined` before the assignment.\n\n3. Expected Output:\n   - The first `console.log` should output `'Result of hoisted function: I am a hoisted function!'`.\n   - The second `console.log` should output `'Hoisted variable value: undefined'`.",
    "codeEditor": {
      "html": "",
      "css": "",
      "js": ""
    },
    "testCases": [
        {
          "input": "console.log(\"Result of hoisted function:\", hoistedFunction());\nconsole.log(\"Hoisted variable value:\", hoistedVar);\nfunction hoistedFunction() {\n    return \"I am a hoisted function!\";\n}\nvar hoistedVar = \"I am a hoisted variable!\";",
          "output": "Result of hoisted function: I am a hoisted function!\nHoisted variable value: undefined",
          "required": [
            "console.log(\"Result of hoisted function:\", hoistedFunction());",
            "console.log(\"Hoisted variable value:\", hoistedVar);",
            "function hoistedFunction() {",
            "    return \"I am a hoisted function!\";",
            "var hoistedVar = \"I am a hoisted variable!\";"
          ],
          "testCaseSentences": [
            "Print the result of calling 'hoistedFunction' before its definition.",
            "Print the value of 'hoistedVar' before its assignment.",
            "Create a function 'hoistedFunction()'","Inside the function, return 'I am a hoisted function!'"
          ],
          "expectedImage": "/activities/jsacts/3.3.png",
          "isHidden": false
        }
    ],
    "locked": true,
    "completed": false
  }
  
],
            "totalPoints": 0,
            "locked": true                              
        },
        {
          "title": "Lesson 4: JS Types",
          "documents": [
            {
              "title": "JavaScript Array",
              "content": [
                {
                  "type": "sentence",
                  "text": "An array is an object that can store multiple values at once."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const age = [17, 18, 15, 19, 14];"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we created an array to record the age of five students."
                },
                {
                  "type": "sentence",
                  "text": "Why Use Arrays?"
                },
                {
                  "type": "sentence",
                  "text": "Arrays allow us to organize related data by grouping them within a single variable."
                },
                {
                  "type": "sentence",
                  "text": "Suppose you want to store a list of fruits. Using only variables, this process might look like this:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let fruit1 = \"Apple\";\nlet fruit2 = \"Banana\";\nlet fruit3 = \"Orange\";"
                },
                {
                  "type": "sentence",
                  "text": "Here, we've only listed a few fruits. But what if we need to store 100 fruits?"
                },
                {
                  "type": "sentence",
                  "text": "For such a case, the easiest solution is to store them in an array."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\", ...];"
                },
                {
                  "type": "sentence",
                  "text": "An array can store many values in a single variable, making it easy to access them by referring to the corresponding index number."
                },
                {
                  "type": "sentence",
                  "text": "Create an Array"
                },
                {
                  "type": "sentence",
                  "text": "We can create an array by placing elements inside an array literal [], separated by commas. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const numbers = [10, 30, 40, 60, 80];"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "numbers - Name of the array."
                },
                {
                  "type": "sentence",
                  "text": "[10, 30, 40, 60, 80] - Elements of the array."
                },
                {
                  "type": "sentence",
                  "text": "Access Elements of an Array"
                },
                {
                  "type": "sentence",
                  "text": "Each element of an array is associated with a number called an index, which specifies its position inside the array."
                },
                {
                  "type": "sentence",
                  "text": "Consider the following array:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let numbers = [10, 30, 40, 60, 80];"
                },
                {
                  "type": "sentence",
                  "text": "Here is the indexing of each element:"
                },
                {
                  "type": "sentence",
                  "text": "We can use an array index to access the elements of the array."
                },
                {
                  "type": "sentence",
                  "text": "A. Code: numbers[0]"
                },
                {
                  "type": "sentence",
                  "text": "Description: Accesses the first element 10."
                },
                {
                  "type": "sentence",
                  "text": "B. Code: numbers[1]"
                },
                {
                  "type": "sentence",
                  "text": "Description: Accesses the second element 30."
                },
                {
                  "type": "sentence",
                  "text": "C. Code: numbers[2]"
                },
                {
                  "type": "sentence",
                  "text": "Description: Accesses the third element 40."
                },
                {
                  "type": "sentence",
                  "text": "D. Code: numbers[3]"
                },
                {
                  "type": "sentence",
                  "text": "Description: Accesses the fourth element 60."
                },
                {
                  "type": "sentence",
                  "text": "E. Code: numbers[4]"
                },
                {
                  "type": "sentence",
                  "text": "Description: Accesses the fifth element 80."
                },
                {
                  "type": "sentence",
                  "text": "Let's look at an example."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let numbers = [10, 30, 40, 60, 80]\n\n// access first element\nconsole.log(numbers[0]);  // 10\n\n// access third element\nconsole.log(numbers[2]);  // 40"
                },
                {
                  "type": "sentence",
                  "text": "Remember: Array indexes always start with 0, not 1."
                },
                {
                  "type": "sentence",
                  "text": "Add Element to an Array"
                },
                {
                  "type": "sentence",
                  "text": "We can add elements to an array using built-in methods like push() and unshift()."
                },
                {
                  "type": "sentence",
                  "text": "1. Using the push() Method"
                },
                {
                  "type": "sentence",
                  "text": "The push() method adds an element at the end of the array."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let dailyActivities = [\"eat\", \"sleep\"];\n\n// add an element at the end\ndailyActivities.push(\"exercise\");\n\nconsole.log(dailyActivities);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ 'eat', 'sleep', 'exercise' ]"
                },
                {
                  "type": "sentence",
                  "text": "2. Using the unshift() Method"
                },
                {
                  "type": "sentence",
                  "text": "The unshift() method adds an element at the beginning of the array."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let dailyActivities = [\"eat\", \"sleep\"];\n\n// add an element at the beginning\ndailyActivities.unshift(\"work\"); \n\nconsole.log(dailyActivities);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ 'work', 'eat', 'sleep' ]"
                },
                {
                  "type": "sentence",
                  "text": "Change the Elements of an Array"
                },
                {
                  "type": "sentence",
                  "text": "We can add or change elements by accessing the index value. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let dailyActivities = [ \"eat\", \"work\", \"sleep\"];\n\n// change the second element\n// use array index 1\ndailyActivities[1] = \"exercise\";\n\nconsole.log(dailyActivities);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ 'eat', 'exercise', 'sleep' ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, we changed the array element in index 1 (second element) from work to exercise."
                },
                {
                  "type": "sentence",
                  "text": "Remove Elements From an Array"
                },
                {
                  "type": "sentence",
                  "text": "We can remove an element from any specified index of an array using the splice() method."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let numbers = [1, 2, 3, 4, 5];\n\n// remove one element\n// starting from index 2\nnumbers.splice(2, 1);\n\nconsole.log(numbers);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ 1, 2, 4, 5 ]"
                },
                {
                  "type": "sentence",
                  "text": "In this example, we removed the element at index 2 (the third element) using the splice() method."
                },
                {
                  "type": "sentence",
                  "text": "Notice the following code:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "numbers.splice(2, 1);"
                },
                {
                  "type": "sentence",
                  "text": "Here, (2, 1) means that the splice() method deletes one element starting from index 2."
                },
                {
                  "type": "sentence",
                  "text": "Note: Suppose you want to remove the second, third, and fourth elements. You can use the following code to do so:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "numbers.splice(1, 3);"
                },
                {
                  "type": "sentence",
                  "text": "Array Methods"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript has various array methods to perform useful operations. Some commonly used array methods in JavaScript are:"
                },
                {
                  "type": "sentence",
                  "text": "A. Method: concat()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Joins two or more arrays and returns a result."
              },
              {
                  "type": "sentence",
                  "text": "B. Method: toString()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Converts an array to a string of (comma-separated) array values."
              },
              {
                  "type": "sentence",
                  "text": "C. Method: indexOf()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Searches an element of an array and returns its position (index)."
              },
              {
                  "type": "sentence",
                  "text": "D. Method: find()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the first value of the array element that passes a given test."
              },
              {
                  "type": "sentence",
                  "text": "E. Method: findIndex()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Returns the first index of the array element that passes a given test."
              },
              {
                  "type": "sentence",
                  "text": "F. Method: forEach()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Calls a function for each element."
              },
              {
                  "type": "sentence",
                  "text": "G. Method: includes()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Checks if an array contains a specified element."
              },
              {
                  "type": "sentence",
                  "text": "H. Method: sort()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Sorts the elements alphabetically in strings and ascending order in numbers."
              },
              {
                  "type": "sentence",
                  "text": "I. Method: slice()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Selects part of an array and returns it as a new array."
              },
              {
                  "type": "sentence",
                  "text": "J. Method: splice()"
              },
              {
                  "type": "sentence",
                  "text": "Description: Removes or replaces existing elements and/or adds new elements."
              }                 
              ],
              "locked": true
            },
            {
              "title": "JS Multidimensional Array",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, multidimensional arrays contain another array inside them."
                },
                {
                  "type": "sentence",
                  "text": "Here is a simple example of a multidimensional array. Read the rest of the tutorial to learn more."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// multidimensional array\n// contains 3 separate arrays as elements\nconst data = [[1, 2, 3], [1, 3, 4], [4, 5, 6]];\n\nconsole.log(data);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ [ 1, 2, 3 ], [ 1, 3, 4 ], [ 4, 5, 6 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, we created a multidimensional array named data with the following arrays as its elements: [ 1, 2, 3 ], [ 1, 3, 4 ], [ 4, 5, 6 ]."
                },
                {
                  "type": "sentence",
                  "text": "Use Existing Arrays as Elements"
                },
                {
                  "type": "sentence",
                  "text": "We can also create multidimensional arrays by nesting existing arrays within them. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// declare three arrays\nlet student1 = ['Jack', 24];\nlet student2 = ['Sara', 23];\nlet student3 = ['Peter', 24];\n\n// create multidimensional array\n// using student1, student2, and student3\nlet studentsData = [student1, student2, student3];\n\n// print the multidimensional array\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23 ], [ 'Peter', 24 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, we first created three arrays named student1, student2, and student3."
                },
                {
                  "type": "sentence",
                  "text": "We then nested these three arrays within the studentsData array to create our multidimensional array:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let studentsData = [student1, student2, student3];"
                },
                {
                  "type": "sentence",
                  "text": "Access Elements of an Array"
                },
                {
                  "type": "sentence",
                  "text": "You can access the elements of a multidimensional array using array indexes. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let x = [\n['Jack', 24],\n['Sara', 23], \n['Peter', 24]\n];\n\n// access the first item \nconsole.log(x[0]);  // [ 'Jack', 24 ]\n\n// access the first item of the first inner array\nconsole.log(x[0][0]);  // Jack\n\n// access the second item of the third inner array\nconsole.log(x[2][1]);  // 24"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ 'Jack', 24 ]\nJack\n24"
                },
                {
                  "type": "sentence",
                  "text": "You can think of a multidimensional array (in this case, x), as a table with 3 rows and 2 columns."
                },
                {
                  "type": "sentence",
                  "text": "Add Elements to a Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "You can use an index notation or the push() method to add elements to a multidimensional array."
                },
                {
                  "type": "sentence",
                  "text": "1. Using Index Notation"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// add \"hello\" as the 3rd element\n// of the 2nd inner array\nstudentsData[1][2] = \"hello\";\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23, 'hello' ] ]"
                },
                {
                  "type": "sentence",
                  "text": "2. Using the push() Method"
                },
                {
                  "type": "sentence",
                  "text": "The push() method inserts an element at the end of the array. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// add element to the end of the outer array\nstudentsData.push([\"Peter\", 24]);\n\nconsole.log(studentsData);\n\n// add \"hello\" as the final element\n// of the 2nd inner array\nstudentsData[1].push(\"hello\");\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ [ 'Jack', 24 ], [ 'Sara', 23 ], [ 'Peter', 24 ] ]\n[ [ 'Jack', 24 ], [ 'Sara', 23, 'hello' ], [ 'Peter', 24 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "Remove Elements From a Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "You can use the splice() method to remove an element from any position in the multidimensional array. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let studentsData = [['Jack', 24], ['Sara', 23],];\n\n// remove one element\n// starting from index 0\nstudentsData.splice(0,1);\n\nconsole.log(studentsData);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "[ [ 'Sara', 23 ] ]"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, studentsData.splice(0,1) removes the first element of the multidimensional array. Here,"
                },
                {
                  "type": "sentence",
                  "text": "0 - The start index from where to modify the array."
                },
                {
                  "type": "sentence",
                  "text": "1 - The number of elements to delete."
                },
                {
                  "type": "sentence",
                  "text": "If you want to delete both arrays, you can use the code studentsData.splice(0,2)."
                },
                {
                  "type": "sentence",
                  "text": "Iterate Over Multidimensional Array"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, you can use nested loops to go through a multidimensional array: one loop for the outer array and another loop inside it for the inner arrays. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let studentsData = [[\"Jack\", 24], [\"Sara\", 23]];\n\n// loop over outer array\nfor(let i = 0; i < studentsData.length; i++) {\n\n    // loop over inner array elements\n    for(let j = 0; j < studentsData[i].length; j++) {\n        console.log(studentsData[i][j]);\n    }\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Jack\n24\nSara\n23"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript String",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript string is a primitive data type that represents textual data. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let name = \"John\";"
                },
                {
                  "type": "sentence",
                  "text": "Create JavaScript Strings"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, we create strings by surrounding them with quotes or backticks."
                },
                {
                  "type": "sentence",
                  "text": "Single Quotes: 'Hello'"
                },
                {
                  "type": "sentence",
                  "text": "Double Quotes: \"Hello\""
                },
                {
                  "type": "sentence",
                  "text": "Backticks: `Hello`"
                },
                {
                  "type": "sentence",
                  "text": "Single quotes and double quotes are practically the same, and you can use either of the two."
                },
                {
                  "type": "sentence",
                  "text": "Backticks are generally used when you need to insert variables or expressions into a string. This is done by wrapping variables or expressions with ${variable or expression}. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// strings example\nlet name1 = 'Peter';\nlet name2 = \"Jack\";\nlet result = `The names are ${name1} and ${name2}`;\n\nconsole.log(result);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "The names are Peter and Jack"
                },
                {
                  "type": "sentence",
                  "text": "Note: In JavaScript, strings enclosed by backticks ` ` are called template literals."
                },
                {
                  "type": "sentence",
                  "text": "Access String Characters"
                },
                {
                  "type": "sentence",
                  "text": "You can access the characters in a string in two ways:"
                },
                {
                  "type": "sentence",
                  "text": "1. Using Indexes"
                },
                {
                  "type": "sentence",
                  "text": "One way is to treat strings as an array and access the character at the specified index. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let message = \"hello\";\n\n// use index 1 to access\n// 2nd character of message\nconsole.log(message[1]);  // e"
                },
                {
                  "type": "sentence",
                  "text": "Here, the code message[1] gives us the character at index 1 of the message string, i.e., its second character."
                },
                {
                  "type": "sentence",
                  "text": "2. Using the charAt() Method"
                },
                {
                  "type": "sentence",
                  "text": "Another way is to supply the position of the character to the charAt() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let message = \"hello\";\n\n// use charAt(1) to get the\n// 2nd character of message\nconsole.log(message.charAt(1));  // e"
                },
                {
                  "type": "sentence",
                  "text": "Here, the code message.charAt(1) gives us the character at index 1 of the message string."
                },
                {
                  "type": "sentence",
                  "text": "Features of JavaScript Strings"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript strings have some interesting features. The most important of these features are:"
                },
                {
                  "type": "sentence",
                  "text": "1. JavaScript Strings are Immutable"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, the characters of a string cannot be changed. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let message = \"hello\";\nmessage[0] = \"H\";\nconsole.log(message);  // hello"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we tried changing the first character of message using the code:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "message[0] = \"H\";"
                },
                {
                  "type": "sentence",
                  "text": "However, this operation failed due to the immutable nature of JavaScript strings."
                },
                {
                  "type": "sentence",
                  "text": "That being said, you can successfully assign a new value to the string variable. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let message = \"hello\";\nmessage = \"Hello\";\nconsole.log(message);  // Hello"
                },
                {
                  "type": "sentence",
                  "text": "2. JavaScript Strings are Case-Sensitive"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, the lowercase and uppercase letters are treated as different values. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let value1 = \"a\";\nlet value2 = \"A\";\nconsole.log(value1 == value2);  // false"
                },
                {
                  "type": "sentence",
                  "text": "As you can see, a and A are treated as different values."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript String Methods"
                },
                {
                  "type": "sentence",
                  "text": "A. Method: charAt()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the character at the specified index."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: concat()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Joins two or more strings."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: replace()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Replace a string with another string."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: split()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts the string to an array of strings."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: substr()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a part of a string by taking the starting position and length of the substring."
                },
                {
                  "type": "sentence",
                  "text": "F. Method: substring()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a part of the string from the specified start index (inclusive) to the end index (exclusive)."
                },
                {
                  "type": "sentence",
                  "text": "G. Method: slice()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a part of the string from the specified start index (inclusive) to the end index (exclusive)."
                },
                {
                  "type": "sentence",
                  "text": "H.Method: toLowerCase()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the passed string in lowercase."
                },
                {
                  "type": "sentence",
                  "text": "I. Method: toUpperCase()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the passed string in uppercase."
                },
                {
                  "type": "sentence",
                  "text": "J. Method: trim()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Removes whitespace from the strings."
                },
                {
                  "type": "sentence",
                  "text": "K. Method: includes()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Searches for a string and returns a boolean value."
                },
                {
                  "type": "sentence",
                  "text": "L. Method: search()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Searches for a string and returns the position of a match."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript String Methods"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let text1 = \"hello\";\nlet text2 = \"world\";\nlet text3 = \"     JavaScript    \";\n\n// concatenate two strings\nlet result1 = text1.concat(' ', text2);\nconsole.log(result1);  // hello world\n\n// convert the text to uppercase\nlet result2 = text1.toUpperCase();\nconsole.log(result2);  // HELLO\n\n// remove whitespace from the string\nlet result3 = text3.trim();\nconsole.log(result3);  // JavaScript\n\n// convert the string to an array\nlet result4 = text1.split();\nconsole.log(result4);  // [ 'hello' ]\n\n// slice the string\nlet result5 = text1.slice(1, 3);\nconsole.log(result5);  // el"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "text",
                  "code": "hello world\nHELLO\nJavaScript\n[ 'hello' ]\nel"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript for...in loop",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript for...in loop iterates over the keys of an object."
                },
                {
                  "type": "sentence",
                  "text": "Here's a simple example of the for...in loop in JavaScript. Read the rest of the tutorial to learn more."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const student = {\n    name: \"Monica\",\n    class: 7\n};\n\n// loop through the keys of student object\nfor (let key in student) {\n    // display the key-value pairs\n    console.log(`${key} => ${student[key]}`);\n};\n\n// Output:\n// name => Monica\n// class => 7"
                },
                {
                  "type": "sentence",
                  "text": "Here, the for...in loop iterates over the keys of the student object. In each iteration of the loop, the key variable stores a single key belonging to student."
                },
                {
                  "type": "sentence",
                  "text": "Syntax of JavaScript for...in Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (key in object) {\n    // body of for...in\n};"
                },
                {
                  "type": "sentence",
                  "text": "Here, object is the object whose keys we want to iterate over, and key is a variable that stores a single key belonging to object."
                },
                {
                  "type": "sentence",
                  "text": "Working of for...in Loop"
                },
                {
                  "type": "sentence",
                  "text": "In the first iteration, the key variable is assigned the first key of object. The body of the loop is then executed."
                },
                {
                  "type": "sentence",
                  "text": "In the second iteration, the key variable is assigned the next key of object. The body of the loop is then executed."
                },
                { 
                  "type": "sentence",
                  "text": "This process continues until there are no more keys over which to iterate."
                },
                { 
                  "type": "sentence",
                  "text": "Note: Once you get the keys of an object, you can easily find their corresponding values."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript for...in Loop"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const salaries = {\n    Jack: 24000,\n    Paul: 34000,\n    Monica: 55000\n};\n\n// use for...in to loop through\n// properties of salaries\nfor (let i in salaries) {\n    // access object key using [ ]\n    // add a $ symbol before the key\n    let salary = \"$\" + salaries[i];\n\n    // display the values\n    console.log(`${i}: ${salary}`);\n};\n\n// Output\n// Jack: $24000\n// Paul: $34000\n// Monica: $55000"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we used the for...in loop to iterate over the properties of the salaries object. Then, we added the string $ to each value of the object."
                },
                {
                  "type": "sentence",
                  "text": "Note: We have used the variable i instead of key because we can use any valid variable name."
                }
                ],
              "locked": true
            },
            {
              "title": "JavaScript Number",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, numbers are used to represent numerical values. They can be whole numbers (like 5, 10, 100) or decimal numbers (like 3.13, 0.5, 10.75)."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let num1 = 5;\nlet num2 = 3.13;\n\nconsole.log(num1); // 5\nconsole.log(num2); // 3.13"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript NaN"
                },
                {
                  "type": "sentence",
                  "text": "NaN (Not a Number) is a special value that is returned when a mathematical operation cannot produce a meaningful numeric result."
                },
                {
                  "type": "sentence",
                  "text": "Performing arithmetic operations (except addition) on numeric values and strings results in NaN."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let num = 4 - \"hello\";\nconsole.log(num); // NaN"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Infinity"
                },
                {
                  "type": "sentence",
                  "text": "Infinity is a special value that signifies an amount larger than any finite number."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let num1 = 2 / 0;\nconsole.log(num1); // Infinity\n\nlet num2 = -2 / 0;\nconsole.log(num2); // -Infinity"
                },
                {
                  "type": "sentence",
                  "text": "Here, dividing a positive number by 0 yields Infinity, while dividing a negative number by 0 results in -Infinity."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Number Methods"
                },
                {
                  "type": "sentence",
                  "text": "Here is a list of built-in number methods in JavaScript."
                },
                {
                  "type": "sentence",
                  "text": "A. Method: isNaN()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is NaN."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: isFinite()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is a finite number."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: isInteger()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is an integer."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: isSafeInteger()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines whether the passed value is a safe integer."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: parseFloat()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts the numeric floating string to a floating-point number."
                },
                {
                  "type": "sentence",
                  "text": "F. Method: parseInt()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts the numeric string to an integer."
                },
                {
                  "type": "sentence",
                  "text": "G. Method: toExponential()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number in exponential notation."
                },
                {
                  "type": "sentence",
                  "text": "H. Method: toFixed()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number in fixed-point notation."
                },
                {
                  "type": "sentence",
                  "text": "I. Method: toPrecision()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value for a number to a specified precision."
                },
                {
                  "type": "sentence",
                  "text": "J. Method: toString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string value in a specified radix (base)."
                },
                {
                  "type": "sentence",
                  "text": "K. Method: valueOf()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the number's value."
                },
                {
                  "type": "sentence",
                  "text": "L. Method: toLocaleString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string with a language-sensitive representation of a number."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript Number Methods"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// check if num1 is integer\nlet num1 = 12;\nconsole.log(Number.isInteger(num1)); // true\n\n// check if num2 is NaN\nlet num2 = NaN;\nconsole.log(Number.isNaN(num2)); // true\n\n// display up to two decimal points\nlet num3 = 5.1234;\nconsole.log(num3.toFixed(2)); // 5.12"
                }
                ],
              "locked": true
            },
            {
              "title": "JavaScript Symbol",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript ES6 introduced a new primitive data type called Symbol. Symbols are immutable (cannot be changed) and are unique."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// two symbols with the same description\n\nconst value1 = Symbol('hello');\nconst value2 = Symbol('hello');\n\nconsole.log(value1 === value2); // false"
                },
                {
                  "type": "sentence",
                  "text": "Though value1 and value2 both contain the same description, they are different."
                },
                {
                  "type": "sentence",
                  "text": "Creating Symbol"
                },
                {
                  "type": "sentence",
                  "text": "You use the Symbol() function to create a Symbol."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// creating symbol\nconst x = Symbol();\n\ntypeof x; // symbol"
                },
                {
                  "type": "sentence",
                  "text": "You can pass an optional string as its description."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\nconsole.log(x); // Symbol(hey)"
                },
                {
                  "type": "sentence",
                  "text": "Access Symbol Description"
                },
                {
                  "type": "sentence",
                  "text": "To access the description of a symbol, we use the .description property."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\nconsole.log(x.description); // hey"
                },
                {
                  "type": "sentence",
                  "text": "Add Symbol as an Object Key"
                },
                {
                  "type": "sentence",
                  "text": "You can add symbols as a key in an object using square brackets []."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let id = Symbol(\"id\");\n\nlet person = {\n    name: \"Jack\",\n\n    // adding symbol as a key\n    [id]: 123 // not \"id\": 123\n};\n\nconsole.log(person); // {name: \"Jack\", Symbol(id): 123}"
                },
                {
                  "type": "sentence",
                  "text": "Symbols are not included in for...in Loop"
                },
                {
                  "type": "sentence",
                  "text": "The for...in loop does not iterate over Symbolic properties."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let id = Symbol(\"id\");\n\nlet person = {\n    name: \"Jack\",\n    age: 25,\n    [id]: 12\n};\n\n// using for...in\nfor (let key in person) {\n    console.log(key);\n}"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Output\n\nname\nage"
                },
                {
                  "type": "sentence",
                  "text": "Benefit of Using Symbols in Object"
                },
                {
                  "type": "sentence",
                  "text": "If the same code snippet is used in various programs, then it is better to use Symbols in the object key. It's because you can use the same key name in different codes and avoid duplication issues."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\n// creating Symbol\nlet id = Symbol(\"id\");\n\n// adding symbol as a key\nperson[id] = 12;"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, if the person object is also used by another program, then you wouldn't want to add a property that can be accessed or changed by another program. Hence by using Symbol, you create a unique property that you can use."
                },
                {
                  "type": "sentence",
                  "text": "Now, if the other program also needs to use a property named id, just add a Symbol named id and there won't be duplication issues."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\nlet id = Symbol(\"id\");\n\nperson[id] = \"Another value\";"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, even if the same name is used to store values, the Symbol data type will have a unique value."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, if the string key was used, then the later program would have changed the value of the property."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let person = {\n    name: \"Jack\"\n};\n\n// using string as key\nperson.id = 12;\nconsole.log(person.id); // 12\n\n// Another program overwrites value\nperson.id = 'Another value';\nconsole.log(person.id); // Another value"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the second user.id overwrites the previous value."
                },
                {
                  "type": "sentence",
                  "text": "Symbol Methods"
                },
                {
                  "type": "sentence",
                  "text": "There are various methods available with Symbol."
                },
                {
                  "type": "sentence",
                  "text": "A. Method: for()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Searches for existing symbols."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: keyFor()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a shared symbol key from the global symbol registry."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: toSource()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the source of the Symbol object."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: toString()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the description of the Symbol."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: valueOf()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the primitive value of the Symbol object."
                },
                {
                  "type": "sentence",
                  "text": "Example: Symbol Methods"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// get symbol by name\nlet sym = Symbol.for('hello');\nlet sym1 = Symbol.for('id');\n\n// get name by symbol\nconsole.log( Symbol.keyFor(sym) ); // hello\nconsole.log( Symbol.keyFor(sym1) ); // id"
                },
                {
                  "type": "sentence",
                  "text": "Symbol Properties"
                },
                {
                  "type": "sentence",
                  "text": "A. Property: asyncIterator"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the default AsyncIterator for an object."
                },
                {
                  "type": "sentence",
                  "text": "B. Property: hasInstance"
                },
                {
                  "type": "sentence",
                  "text": "Description: Determines if a constructor object recognizes an object as its instance."
                },
                {
                  "type": "sentence",
                  "text": "C. Property: isConcatSpreadable"
                },
                {
                  "type": "sentence",
                  "text": "Description: Indicates if an object should be flattened to its array elements."
                },
                {
                  "type": "sentence",
                  "text": "D. Property: iterator"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the default iterator for an object."
                },
                {
                  "type": "sentence",
                  "text": "E. Property: match"
                },
                {
                  "type": "sentence",
                  "text": "Description: Matches against a string."
                },
                {
                  "type": "sentence",
                  "text": "F. Property: matchAll"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns an iterator that yields matches of the regular expression against a string."
                },
                {
                  "type": "sentence",
                  "text": "G. Property: replace"
                },
                {
                  "type": "sentence",
                  "text": "Description: Replaces matched substrings of a string."
                },
                {
                  "type": "sentence",
                  "text": "H. Property: search"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the index within a string that matches the regular expression."
                },
                {
                  "type": "sentence",
                  "text": "I. Property: split"
                },
                {
                  "type": "sentence",
                  "text": "Description: Splits a string at the indices that match a regular expression."
                },
                {
                  "type": "sentence",
                  "text": "J. Property: species"
                },
                {
                  "type": "sentence",
                  "text": "Description: Creates derived objects."
                },
                {
                  "type": "sentence",
                  "text": "K. Property: toPrimitive"
                },
                {
                  "type": "sentence",
                  "text": "Description: Converts an object to a primitive value."
                },
                {
                  "type": "sentence",
                  "text": "L. Property: toStringTag"
                },
                {
                  "type": "sentence",
                  "text": "Description: Gives the default description of an object."
                },
                {
                  "type": "sentence",
                  "text": "M. Property: description"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a string containing the description of the symbol."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const x = Symbol('hey');\n\n// description property\nconsole.log(x.description); // hey\n\nconst stringArray = ['a', 'b', 'c'];\nconst numberArray = [1, 2, 3];\n\n// isConcatSpreadable property\nnumberArray[Symbol.isConcatSpreadable] = false;\n\nlet result = stringArray.concat(numberArray);\nconsole.log(result); // [\"a\", \"b\", \"c\", [1, 2, 3]]"
                }
                ],
              "locked": true
            }
                 
          ],
            "quiz": [
              {
                "question": "What is an array in JavaScript?",
                "options": [
                    "A single value",
                    "A type of object that can store multiple values",
                    "A function",
                    "A string method"
                ],
                "correctAnswer": "A type of object that can store multiple values",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you create an array in JavaScript?",
                "options": [
                    "Using the new Array() constructor",
                    "By declaring variables with comma separation",
                    "By using square brackets []",
                    "By calling the Array.create() method"
                ],
                "correctAnswer": "By using square brackets []",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method adds an element to the end of an array?",
                "options": [
                    "shift()",
                    "pop()",
                    "push()",
                    "unshift()"
                ],
                "correctAnswer": "push()",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you access the second element of an array?",
                "options": [
                    "array[1]",
                    "array[2]",
                    "array.get(1)",
                    "array[0]"
                ],
                "correctAnswer": "array[1]",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method is used to remove elements from an array?",
                "options": [
                    "splice()",
                    "slice()",
                    "concat()",
                    "join()"
                ],
                "correctAnswer": "splice()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method is used to join two or more arrays?",
                "options": [
                    "concat()",
                    "push()",
                    "pop()",
                    "shift()"
                ],
                "correctAnswer": "concat()",
                "points": 1,
                "locked": true
            },
            {
                "question": "How can you access a character in a string?",
                "options": [
                    "string.charAt(index)",
                    "string[index]",
                    "string.get(index)",
                    "Both A and B"
                ],
                "correctAnswer": "Both A and B",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the trim() method do to a string?",
                "options": [
                    "Converts it to uppercase",
                    "Removes whitespace from both ends",
                    "Splits it into an array",
                    "Concatenates it with another string"
                ],
                "correctAnswer": "Removes whitespace from both ends",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you convert a string to a number?",
                "options": [
                    "parseInt() and parseFloat()",
                    "toString()",
                    "Number()",
                    "valueOf()"
                ],
                "correctAnswer": "parseInt() and parseFloat()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method checks if a number is NaN?",
                "options": [
                    "isFinite()",
                    "isInteger()",
                    "isNaN()",
                    "valueOf()"
                ],
                "correctAnswer": "isNaN()",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you create a Symbol in JavaScript?",
                "options": [
                    "Symbol.create()",
                    "new Symbol()",
                    "Symbol()",
                    "Symbol.create()"
                ],
                "correctAnswer": "Symbol()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What is a feature of JavaScript strings?",
                "options": [
                    "Strings are mutable",
                    "Strings are immutable",
                    "Strings can be changed by indexing",
                    "Strings are not case-sensitive"
                ],
                "correctAnswer": "Strings are immutable",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method returns a string with uppercase characters?",
                "options": [
                    "toLowerCase()",
                    "toUpperCase()",
                    "charAt()",
                    "slice()"
                ],
                "correctAnswer": "toUpperCase()",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you add an element at the beginning of an array?",
                "options": [
                    "push()",
                    "pop()",
                    "unshift()",
                    "shift()"
                ],
                "correctAnswer": "unshift()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method removes whitespace from the beginning and end of a string?",
                "options": [
                    "slice()",
                    "trim()",
                    "substring()",
                    "split()"
                ],
                "correctAnswer": "trim()",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method converts a string into an array of substrings?",
                "options": [
                    "split()",
                    "join()",
                    "concat()",
                    "toLowerCase()"
                ],
                "correctAnswer": "split()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the find() method do in arrays?",
                "options": [
                    "Finds the index of an element",
                    "Finds the first value that passes a test",
                    "Finds and removes an element",
                    "Sorts the array"
                ],
                "correctAnswer": "Finds the first value that passes a test",
                "points": 1,
                "locked": true
            },
            {
                "question": "What is the purpose of the for...in loop in JavaScript?",
                "options": [
                    "To iterate over array elements",
                    "To iterate over object keys",
                    "To iterate over string characters",
                    "To iterate over function arguments"
                ],
                "correctAnswer": "To iterate over object keys",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you access the first item of a multidimensional array?",
                "options": [
                    "array[0]",
                    "array[0][0]",
                    "array[1]",
                    "array[1][0]"
                ],
                "correctAnswer": "array[0]",
                "points": 1,
                "locked": true
            },
            {
                "question": "How do you check if a number is finite?",
                "options": [
                    "isFinite()",
                    "isNaN()",
                    "isInteger()",
                    "isSafeInteger()"
                ],
                "correctAnswer": "isFinite()",
                "points": 1,
                "locked": true
            }
            ],
            "activities": [
              {
                "title": "Basic Array Access",
                "description": "Access elements of a JavaScript array using their index.",
                "language": "JavaScriptConsole",
                "difficulty": "easy",
                "problemStatement": "You are given an array of numbers. Write JavaScript code to access and print the second element of the array.\n\n1. Declare an array named `numbers` with the following values: `[5, 10, 15, 20, 25]`.\n\n2. Access and print the second element of the array.\n\nEnsure that the code executes without any errors and that the correct element is printed.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "let numbers = [5, 10, 15, 20, 25];\nconsole.log(numbers[1]);",
                    "output": "10",
                    "required": [
                      "let numbers = [5, 10, 15, 20, 25];",
                      "console.log(numbers[1]);"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Declare an array named `numbers` with the values [5, 10, 15, 20, 25].",
                      "Access and print the second element of the array using index 1."
                    
                    ],
                    "expectedImage": "/activities/jsacts/5.1.png"
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Array Methods",
                "description": "Use array methods to modify and check contents.",
                "language": "JavaScriptConsole",
                "difficulty": "medium",
                "problemStatement": "You are given an array of fruits. Write JavaScript code to modify the array using array methods.\n\n1. Declare an array named `fruits` with the following values: `['Apple', 'Banana', 'Orange']`.\n\n2. Add a new fruit `'Mango'` to the array using the `push()` method.\n\n3. Check if `'Mango'` exists in the array using the `includes()` method and print the result.\n\nEnsure that the code executes without any errors and that the correct result is printed.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "let fruits = ['Apple', 'Banana', 'Orange'];\nfruits.push('Mango');\nconsole.log(fruits.includes('Mango'));",
                    "output": "true",
                    "required": [
                      "let fruits = ['Apple', 'Banana', 'Orange'];",
                      "fruits.push('Mango');",
                      "console.log(fruits.includes('Mango'));"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Declare an array named `fruits` with the values ['Apple', 'Banana', 'Orange'].",
                      "Use the `push()` method to add the fruit 'Mango' to the array.",
                      "Check if 'Mango' is present in the array using the `includes()` method and print the result."
                    ],
                    "expectedImage": "/activities/jsacts/5.2.png"
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Multidimensional Array Manipulation",
                "description": "Work with a multidimensional array to access and modify elements.",
                "language": "JavaScriptConsole",
                "difficulty": "hard",
                "problemStatement": "You are given a multidimensional array representing student data. Write JavaScript code to perform various operations on the array.\n\n1. Declare a multidimensional array named `studentsData` with the following values: `[['Jack', 24], ['Sara', 23], ['Peter', 24]]`.\n\n2. Access and print the name `'Sara'` from the array.\n\n3. Add a new student array `['Anna', 22]` to the `studentsData` array.\n\n4. Remove the first student array from `studentsData`.\n\n5. Print the modified `studentsData` array.\n\nEnsure that the code executes without any errors and that the correct results are printed.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "let studentsData = [['Jack', 24], ['Sara', 23], ['Peter', 24]];\nconsole.log(studentsData[1][0]);\nstudentsData.push(['Anna', 22]);\nstudentsData.shift();\nconsole.log(studentsData);",
                    "output": "Sara\n[ [ 'Sara', 23 ], [ 'Peter', 24 ], [ 'Anna', 22 ] ]",
                    "required": [
                      "let studentsData = [['Jack', 24], ['Sara', 23], ['Peter', 24]];",
                      "console.log(studentsData[1][0]);",
                      "studentsData.push(['Anna', 22]);",
                      "studentsData.shift();",
                      "console.log(studentsData);"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Declare a multidimensional array `studentsData` with values [['Jack', 24], ['Sara', 23], ['Peter', 24]].",
                      "Access and print the name 'Sara' from the array using index [1][0].",
                      "Use the `push()` method to add the student ['Anna', 22] to `studentsData`.",
                      "Use the `shift()` method to remove the first student array from `studentsData`.",
                      "Print the modified array to the console."
                    ],
                    "expectedImage": "/activities/jsacts/5.3.png"
                  }
        ],
        "locked": true,
        "completed": false
      },{
        "title": "Convert String to Number",
        "description": "Write JavaScript code to convert a string containing a number to an actual number type and perform addition.",
        "language": "JavaScriptConsole",
        "difficulty": "medium",
        "problemStatement": "In this activity, you will convert a string to a number and perform an addition.\n\n1. Declare a variable `strNumber` and assign it the string '25'.\n\n2. Convert `strNumber` to a number using `Number()` and store it in a new variable `convertedNumber`.\n\n3. Add `convertedNumber` to the number `5` and store the result in a variable `sum`.\n\n4. Use `console.log` to print the value of `sum`.\n\nEnsure that the code executes without any errors and that the correct sum is printed.",
        "codeEditor": {
          "html": "",
          "css": "",
          "js": ""
        },
        "testCases": [
          {
            "input": "let strNumber = '25';\nlet convertedNumber = Number(strNumber);\nlet sum = convertedNumber + 5;\nconsole.log(sum);",
            "output": "30",
            "required": [
              "let strNumber = '25';",
              "let convertedNumber = Number(strNumber);",
              "let sum = convertedNumber + 5;",
              "console.log(sum);"
            ],
            "isHidden": false,
            "testCaseSentences": [
              "Declare a variable `strNumber` with the string '25'.",
              "Convert `strNumber` to a number using `Number()`.",
              "Add the converted number to 5 and store the result in `sum`.",
              "Print the value of `sum` using `console.log`."
            ]
          }
        ],
        "locked": true,
        "completed": false
      }
      ],         
          "totalPoints": 0,
          "locked": true
          
        },
        {
          "title": "Lesson 5: JS ES6",
          "documents": [
            {
              "title": "JavaScript ES6",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript ES6 (also known as ECMAScript2015 or ECMAScript6) is the sixth edition of JavaScript introduced in June 2015."
                },
                {
                  "type": "sentence",
                  "text": "ECMAScript (European Computer Manufacturers Association Script) is the standard specification of JavaScript to ensure compatibility in all browsers and environments."
                },
                {
                  "type": "sentence",
                  "text": "This tutorial provides a summary of commonly used features and syntax improvements of ES6."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Declarations"
                },
                {
                  "type": "sentence",
                  "text": "Previously, JavaScript only allowed variable declarations using the var keyword."
                },
                {
                  "type": "sentence",
                  "text": "ES6 now allows you to declare variables using two more keywords: let and const."
                },
                {
                  "type": "sentence",
                  "text": "Declaration With let Keyword"
                },
                {
                  "type": "sentence",
                  "text": "The let keyword creates block-scoped variables, which means they are only accessible within a particular block of code. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "{\n    // block of code\n\n    // declare variable with let\n    let name = \"Peter\";\n\n    // can be accessed here\n    console.log(name); // Peter\n\n}\n\n// can't be accessed here\nconsole.log(name);\n\nOutput\n\nPeter\nERROR!\nReferenceError: name is not defined"
                },
                {
                  "type": "sentence",
                  "text": "However, the above program works without any error if we swap let with var. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "{\n    // block of code\n\n    // declare variable with var\n    var name = \"Peter\";\n\n    // can be accessed here\n    console.log(name);\n\n}\n\n// can be accessed here\nconsole.log(name);\n\nOutput\n\nPeter\nPeter"
                },
                {
                  "type": "sentence",
                  "text": "This simply means that we have more control over variables declared with let."
                },
                {
                  "type": "sentence",
                  "text": "To learn more about the difference between let and var, visit JavaScript let vs var."
                },
                {
                  "type": "sentence",
                  "text": "Declaration With const Keyword"
                },
                {
                  "type": "sentence",
                  "text": "The const keyword creates constant variables that cannot be changed after declaration. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// declare variable with const\nconst fruit = \"Apple\";\n\nconsole.log(fruit);\n\n// reassign fruit\n// this code causes an error\nfruit = \"Banana\";\n\nconsole.log(fruit);\n\nOutput\n\nApple\nError: Assignment to constant variable"
                },
                {
                  "type": "sentence",
                  "text": "Here, we used const to declare the variable fruit with the value of Apple."
                },
                {
                  "type": "sentence",
                  "text": "Thus, changing its value to Banana causes an error."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Template Literals"
                },
                {
                  "type": "sentence",
                  "text": "The template literal makes it easier to include variables inside a string."
                },
                {
                  "type": "sentence",
                  "text": "For example, this was how we concatenated strings and variables before:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const firstName = \"Jack\";\nconst lastName = \"Sparrow\";\n\nconsole.log(\"Hello \" + firstName + \" \" + lastName);\n\nOutput: Hello Jack Sparrow"
                },
                {
                  "type": "sentence",
                  "text": "Now, you can simply do this:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const firstName = \"Jack\";\nconst lastName = \"Sparrow\";\n\nconsole.log(`Hello ${firstName} ${lastName}`);\n\nOutput: Hello Jack Sparrow"
                },
                {
                  "type": "sentence",
                  "text": "Default Parameter Values"
                },
                {
                  "type": "sentence",
                  "text": "In ES6, you can pass default values for function parameters. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function to find sum of two numbers\nfunction sum(numA, numB = 5) {\n\n    // default value of numB is 5\n    console.log(numA + numB);\n};\n\n// pass 10 to numA but\n// don't pass value to numB\n// numB takes default value 5\nsum(10);  // 15\n\n// pass 5 to numA and 15 to numB \nsum(5, 15);  // 20"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we included the default parameter value numB = 5 in the function declaration."
                },
                {
                  "type": "sentence",
                  "text": "This means, even if you don't pass the parameter for numB, it will take 5 by default."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Arrow Function"
                },
                {
                  "type": "sentence",
                  "text": "ES6 introduces a new way to write function and function expressions using => called the arrow function."
                },
                {
                  "type": "sentence",
                  "text": "Previously, the only way to write a function expression was:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function expression\nlet product = function(x, y) {\n   return x * y;\n};\n\nresult = product(5, 10);\n\nconsole.log(result);  // 50"
                },
                {
                  "type": "sentence",
                  "text": "Now, you can simply write it as:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function expression using arrow function\nlet product = (x, y) => x * y;\n\nresult = product(5, 10);\n\nconsole.log(result);  // 50"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Classes"
                },
                {
                  "type": "sentence",
                  "text": "ES6 also introduces the concept of classes, a fundamental aspect of object-oriented programming (OOP)."
                },
                {
                  "type": "sentence",
                  "text": "We can use the class keyword to create classes and objects. Previously, we used constructor functions to create objects. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// constructor function\nfunction Person(name) {\n    this.name = name;\n};\n\n// create objects\nvar p1 = new Person(\"John\");\nvar p2 = new Person(\"Rachel\");\n\n// print object properties\nconsole.log(p1.name);  // John\nconsole.log(p2.name);  // Rachel"
                },
                {
                  "type": "sentence",
                  "text": "Now, we can do the same thing using the class keyword. And, we can initialize the class using the constructor() function. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// declare a class\nclass Person {\n\n    // constructor function\n    constructor(name) {\n        this.name = name;\n    };\n};\n\n// create objects\nlet p1 = new Person(\"John\");\nlet p2 = new Person(\"Rachel\");\n\n// print object properties\nconsole.log(p1.name);  // John\nconsole.log(p2.name);  // Rachel"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Destructuring"
                },
                {
                  "type": "sentence",
                  "text": "The destructuring syntax makes it easier to extract values from arrays or objects into individual variables."
                },
                {
                  "type": "sentence",
                  "text": "For example, previously we extracted object values into variables in the following way:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// object of hospital\nconst hospital = {\n    doctors: 23,\n    patients: 44,\n};\n\n// assign individual values\nlet doctors = hospital.doctors;\nlet patients = hospital.patients;\n\nconsole.log(doctors);  // 23\nconsole.log(patients);  // 44"
                },
                {
                  "type": "sentence",
                  "text": "Now, we can simply use the ES6 destructuring syntax:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const hospital = {\n    doctors: 23,\n    patients: 44,\n};\n\n// use ES6 destructuring syntax\nlet { doctors, patients } = hospital;\n\nconsole.log(doctors);  // 23\nconsole.log(patients);  // 44"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript import and export"
                },
                {
                  "type": "sentence",
                  "text": "Before ES6, there was no standard way for developers to manage their code in separate files as modules."
                },
                {
                  "type": "sentence",
                  "text": "With ES6, we can finally manage modules with the import and export syntax."
                },
                {
                  "type": "sentence",
                  "text": "For example, suppose you have two JavaScript files named person.js and action.js."
                },
                {
                  "type": "sentence",
                  "text": "In action.js, you can export anything. For this tutorial, let's just export a function named greet():"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// export\nexport default function greet(name) {\n    console.log(`Hi ${name}!`);\n};"
                },
                {
                  "type": "sentence",
                  "text": "Then in person.js, you can import the greet() function and use it:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "import greet from './action.js';\n\ngreet(\"Sara\");\n\n// Output: Hi Sara!"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Promise"
                },
                {
                  "type": "sentence",
                  "text": "The ES6 Promise provides a clean way to handle asynchronous tasks. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// define a promise\nlet countValue = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve(\"Promise resolved!\");\n    }, 5000);\n});\n\n// executes when promise resolves\ncountValue.then(function successValue(result) {\n    console.log(result);\n});\n\nOutput\n\nPromise resolved!"
                },
                {
                  "type": "sentence",
                  "text": "Here, we first created a promise on the variable countValue."
                },
                {
                  "type": "sentence",
                  "text": "We then used the setTimeout() function to resolve the promise after a delay of 5 seconds."
                },
                {
                  "type": "sentence",
                  "text": "Likewise, the .then() method executes when the promise resolves and displays the output Promise resolved!."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Rest Parameter"
                },
                {
                  "type": "sentence",
                  "text": "You can use the rest parameter ... to represent an infinite number of arguments as an array. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function with ...args rest parameter\nfunction show(a, b, ...args) {\n    console.log(\"a:\", a);\n    console.log(\"b:\", b);\n    console.log(\"args:\", args);\n}\n\n// call function with extra parameters\nshow(1, 2, 3, 4, 5);\n\nOutput\n\na: 1\nb: 2\nargs: [ 3, 4, 5 ]"
                },
                {
                  "type": "sentence",
                  "text": "You can use any name for the rest parameter. However, args is a common convention."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator"
                },
                {
                  "type": "sentence",
                  "text": "You can use the spread operator ... to unpack an array or object. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let numArr = [1, 2, 3];\n\n// without spread operator\nconsole.log([numArr, 4, 5]);  // [[1, 2, 3], 4, 5]\n\n// with spread operator\nconsole.log([...numArr, 4, 5]);  // [1, 2, 3, 4, 5]"
                },
                {
                  "type": "sentence",
                  "text": "Note: Both the rest parameter and the spread operator use the same syntax. However, we only use the rest operator in the function definition as arguments."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Arrow Function",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript arrow functions are a concise syntax for writing function expressions."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of the arrow function. You can read the rest of the tutorial for more."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// an arrow function to add two numbers\nconst addNumbers = (a, b) => a + b;\n\n// call the function with two numbers\nconst result = addNumbers(5, 3);\nconsole.log(result);\n\n// Output: 8"
                },
                {
                  "type": "sentence",
                  "text": "In this example, addNumbers() is an arrow function that takes two parameters, a and b, and returns their sum."
                },
                {
                  "type": "sentence",
                  "text": "Arrow Function Syntax"
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the arrow function is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let myFunction = (arg1, arg2, ...argN) => {\n    statement(s)\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "• myFunction is the name of the function."
                },
                {
                  "type": "sentence",
                  "text": "• arg1, arg2, ...argN are the function arguments."
                },
                {
                  "type": "sentence",
                  "text": "• statement(s) is the function body."
                },
                {
                  "type": "sentence",
                  "text": "If the body has a single statement or expression, you can write the arrow function as:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let myFunction = (arg1, arg2, ...argN) => expression"
                },
                {
                  "type": "sentence",
                  "text": "Note: Arrow functions were introduced in ES6. Some browsers may not support the use of arrow functions. Visit JavaScript Arrow Function support to learn more."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Arrow Function With No Argument"
                },
                {
                  "type": "sentence",
                  "text": "If a function doesn't take any argument, then you should use empty parentheses. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const sayHello = () => \"Hello, World!\";\n\n// call the arrow function and print its return value\nconsole.log(sayHello());\n\n// Output: Hello, World!"
                },
                {
                  "type": "sentence",
                  "text": "In this example, when sayHello() is called, it executes the arrow function which returns the string Hello, World!."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Arrow Function With One Argument"
                },
                {
                  "type": "sentence",
                  "text": "If a function has only one argument, you can omit the parentheses. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const square = x => x * x;\n\n// use the arrow function to square a number\nconsole.log(square(5));\n\n// Output: 25"
                },
                {
                  "type": "sentence",
                  "text": "The arrow function square() takes one argument x and returns its square."
                },
                {
                  "type": "sentence",
                  "text": "Hence, calling square() with the value 5 returns 25."
                },
                {
                  "type": "sentence",
                  "text": "this Keyword With Arrow Function"
                },
                {
                  "type": "sentence",
                  "text": "Inside a regular function, this keyword refers to the function where it is called."
                },
                {
                  "type": "sentence",
                  "text": "However, this is not associated with arrow functions. So, whenever you call this, it refers to its parent scope. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// constructor function\nfunction Person() {\n\n    this.name = 'Jack',\n    this.age = 25,\n    this.sayName = function () {\n\n        console.log(this.age);\n\n        let innerFunc = () => {\n            console.log(this.age);\n        }\n\n        innerFunc();\n    }\n}\n\nconst x = new Person();\nx.sayName();\n\nOutput\n\n25\n25"
                },
                {
                  "type": "sentence",
                  "text": "Here, the innerFunc() function is an arrow function."
                },
                {
                  "type": "sentence",
                  "text": "And inside the arrow function, this refers to the parent's scope, i.e., the scope of the Person() function. Hence, this.age gives 25."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Default Parameters",
              "content": [
                {
                  "type": "sentence",
                  "text": "Starting from JavaScript ES6, we can provide default values for function parameters."
                },
                {
                  "type": "sentence",
                  "text": "These default values are used when the function is called without passing the corresponding arguments."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of JavaScript default parameters. You can read the rest of the tutorial for more details."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function greet(name = \"Guest\") {\n    console.log(`Hello, ${name}!`);\n}\n\ngreet(); \n\n// Output: Hello, Guest!"
                },
                {
                  "type": "sentence",
                  "text": "In this example, the greet() function has a default parameter name with the string value Guest. Since we have not passed any argument to the function, it uses the default value."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript Default Parameters"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function sum(x = 3, y = 5) {\n    // return sum\n    return x + y;\n}\n\n// pass arguments to x and y\nvar result = sum(5, 15);\nconsole.log(`Sum of 5 and 15: ${result}`);\n\n// pass argument to x but not to y\nresult = sum(7);\nconsole.log(`Sum of 7 and default value (5): ${result}`);\n\n// pass no arguments\n// use default values for x and y\nresult = sum();\nconsole.log(`Sum of default values (3 and 5): ${result}`);\n\nOutput\n\nSum of 5 and 15: 20\nSum of 7 and default value (5): 12\nSum of default values (3 and 5): 8"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the default value of x is 3 and the default value of y is 5."
                },
                {
                  "type": "sentence",
                  "text": "• sum(5, 15) - When both arguments are passed, x takes 5 and y takes 15."
                },
                {
                  "type": "sentence",
                  "text": "• sum(7) - When 7 is passed, x takes 7 and y takes the default value 5."
                },
                {
                  "type": "sentence",
                  "text": "• sum() - When no argument is passed, x and y take the default values 3 and 5, respectively."
                }
              ],
              "locked": true
            },              
            {
              "title": "JavaScript Template Literals (Template Strings)",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript template literals are strings that allow us to embed variables or expressions directly within them. They are enclosed in backticks ``."
                },
                {
                  "type": "sentence",
                  "text": "Here is a simple example of template literals. Read the rest of the tutorial to learn more."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let name = \"Alice\";\nlet greeting = `Hello ${name}`;\n\nconsole.log(greeting); \n\n// Output: Hello Alice"
                },
                {
                  "type": "sentence",
                  "text": "Here, `Hello ${name}` is a template literal and we have embedded the name variable directly within it."
                },
                {
                  "type": "sentence",
                  "text": "Example: JavaScript Template Literals"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let number1 = 8;\nlet number2 = 3;\n\n// embed expression within template literal \nlet result = `The sum of ${number1} and ${number2} is ${number1 + number2}.`;\n\nconsole.log(result);\n\n// Output: The sum of 8 and 3 is 11."
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the following code is the template literal:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "`The sum of ${number1} and ${number2} is ${number1 + number2}.`"
                },
                {
                  "type": "sentence",
                  "text": "In this template literal,"
                },
                {
                  "type": "sentence",
                  "text": "• ${number1 + number2} is the embedded expression."
                },
                {
                  "type": "sentence",
                  "text": "• ${number1} and ${number2} are the embedded variables."
                },
                {
                  "type": "sentence",
                  "text": "Notes:"
                },
                {
                  "type": "sentence",
                  "text": "Before template literals were introduced in JavaScript ES6, we would use the + operator to concatenate variables and expressions in a string."
                },
                {
                  "type": "sentence",
                  "text": "Some browsers may not support the use of template literals. To learn more, visit JavaScript Template Literal support."
                },
                {
                  "type": "sentence",
                  "text": "Tagged Templates"
                },
                {
                  "type": "sentence",
                  "text": "Tagged templates are an advanced form of template literals in JavaScript. They allow you to parse template literals with a function."
                },
                {
                  "type": "sentence",
                  "text": "Furthermore, you don't need to use parentheses () when passing the template literal to the function. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "function displayMessage(message) {\n    return message;\n}\n\n// create a tagged template\nlet result = displayMessage`Hello Jack`;\n\nconsole.log(result);  // [ 'Hello Jack' ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, unlike regular function arguments, the template literal is split into an array."
                },
                {
                  "type": "sentence",
                  "text": "In our example, the function received an array with a single element (the string from the template literal). So, we obtained [ 'Hello Jack' ] as an output."
                },
                {
                  "type": "sentence",
                  "text": "Tip: Try passing normal strings as arguments to the displayMessage() function and notice the difference in syntax and output."
                }
              ],
              "locked": true
            },              
            {
              "title": "JavaScript Spread Operator",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript spread operator ... is used to expand or spread out elements of an iterable, such as an array, string, or object."
                },
                {
                  "type": "sentence",
                  "text": "This makes it incredibly useful for tasks like combining arrays, passing elements to functions as separate arguments, or even copying arrays."
                },
                {
                  "type": "sentence",
                  "text": "Here's a quick example of the spread statement. You can read the rest of the tutorial for more."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let numbers = [1, 2, 3];\n\n// equivalent to\n// console.log(numbers[0], numbers[1], numbers[2])\nconsole.log(...numbers);\n\n// Output: 1 2 3"
                },
                {
                  "type": "sentence",
                  "text": "Here, we used the spread operator ... inside console.log() to expand the numbers array into individual elements."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Spread Operator Inside Arrays"
                },
                {
                  "type": "sentence",
                  "text": "We can also use the spread operator inside arrays to expand the elements of another array. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let fruits = [\"Apple\", \"Banana\", \"Cherry\"];\n\n// add fruits array to moreFruits1\n// without using the ... operator\nlet moreFruits1 = [\"Dragonfruit\", fruits, \"Elderberry\"];\n\n// spread fruits array within moreFruits2 array\nlet moreFruits2 = [\"Dragonfruit\", ...fruits, \"Elderberry\"];\n\nconsole.log(moreFruits1);\nconsole.log(moreFruits2);\n\n// Output\n\n[ 'Dragonfruit', [ 'Apple', 'Banana', 'Cherry' ], 'Elderberry' ]\n[ 'Dragonfruit', 'Apple', 'Banana', 'Cherry', 'Elderberry' ]"
                },
                {
                  "type": "sentence",
                  "text": "Here, ...fruits expands the fruits array inside the moreFruits2 array, which results in moreFruits2 consisting only of individual string elements and no inner arrays."
                },
                {
                  "type": "sentence",
                  "text": "On the other hand, the moreFruits1 array consists of an inner array because we didn't expand the fruits array inside it."
                },
                {
                  "type": "sentence",
                  "text": "Note: Since the spread operator was introduced in ES6, some browsers may not support its use. To learn more, visit JavaScript Spread Operator support."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator With Object"
                },
                {
                  "type": "sentence",
                  "text": "You can also use the spread operator with object literals. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let obj1 = { x : 1, y : 2 };\nlet obj2 = { z : 3 };\n\n// use the spread operator to add\n// members of obj1 and obj2 to obj3\nlet obj3 = {...obj1, ...obj2};\n\n// add obj1 and obj2 without spread operator\nlet obj4 = {obj1, obj2};\n\nconsole.log(\"obj3 =\", obj3);\nconsole.log(\"obj4 =\", obj4);\n\n// Output\n\nobj3 = { x: 1, y: 2, z: 3 }\nobj4 = { obj1: { x: 1, y: 2 }, obj2: { z: 3 } }"
                },
                {
                  "type": "sentence",
                  "text": "Here, the properties of obj1 and obj2 are added to obj3 using the spread operator."
                },
                {
                  "type": "sentence",
                  "text": "However, when we add those two objects to obj4 without using the spread operator, we get obj1 and obj2 as keys for obj4."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Rest Parameter"
                },
                {
                  "type": "sentence",
                  "text": "When the spread operator is used as a parameter, it is known as the rest parameter."
                },
                {
                  "type": "sentence",
                  "text": "You can accept multiple arguments in a function call using the rest parameter. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let printArray = function(...args) {\n    console.log(args);\n}\n\n// pass a single argument\nprintArray(3);\n\n// pass multiple arguments\nprintArray(4, 5, 6);\n\n// Output\n\n[ 3 ]\n[ 4, 5, 6 ]"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "• When a single argument is passed to printArray(), the rest parameter takes only one parameter."
                },
                {
                  "type": "sentence",
                  "text": "• When three arguments are passed, the rest parameter takes all three parameters."
                },
                {
                  "type": "sentence",
                  "text": "Note: Using the rest parameter will pass the arguments as array elements."
                },
                {
                  "type": "sentence",
                  "text": "Spread Operator as Part of Function Argument"
                },
                {
                  "type": "sentence",
                  "text": "You can also use the spread operator as part of a function argument. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function that takes three arguments\nfunction sum(num1, num2 , num3) {\n    console.log(num1 + num2 + num3);\n}\n\nlet num1 = [1, 3, 4, 5];\n\n// pass the first three array elements\nsum(...num1); \n\n// Output: 8"
                },
                {
                  "type": "sentence",
                  "text": "If you pass multiple arguments using the spread operator, the function takes the required number of arguments and ignores the rest."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Map",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript ES6 has introduced two new data structures, i.e Map and WeakMap."
                },
                {
                  "type": "sentence",
                  "text": "Map is similar to objects in JavaScript that allows us to store elements in a key/value pair."
                },
                {
                  "type": "sentence",
                  "text": "The elements in a Map are inserted in an insertion order. However, unlike an object, a map can contain objects, functions and other data types as key."
                },
                {
                  "type": "sentence",
                  "text": "Create JavaScript Map"
                },
                {
                  "type": "sentence",
                  "text": "To create a Map, we use the new Map() constructor. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create a Map\nconst map1 = new Map(); // an empty map\nconsole.log(map1); // Map {}"
                },
                {
                  "type": "sentence",
                  "text": "Insert Item to Map"
                },
                {
                  "type": "sentence",
                  "text": "After you create a map, you can use the set() method to insert elements to it. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create a set\nlet map1 = new Map();\n\n// insert key-value pair\nmap1.set('info', {name: 'Jack', age: 26});\nconsole.log(map1); // Map {\"info\" => {name: \"Jack\", age: 26}}"
                },
                {
                  "type": "sentence",
                  "text": "You can also use objects or functions as keys. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Map with object key\nlet map2 = new Map();\n\nlet obj = {};\nmap2.set(obj, {name: 'Jack', age: \"26\"});\n\nconsole.log(map2); // Map {{}} => {name: \"Jack\", age: \"26\"}"
                },
                {
                  "type": "sentence",
                  "text": "Access Map Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can access Map elements using the get() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: \"26\"});\n\n// access the elements of a Map\nconsole.log(map1.get('info')); // {name: \"Jack\", age: \"26\"}"
                },
                {
                  "type": "sentence",
                  "text": "Check Map Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can use the has() method to check if the element is in a Map. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set1 = new Set([1, 2, 3]);\n\nlet map1 = new Map();\nmap1.set('info', {name: 'Jack', age: \"26\"});\n\n// check if an element is in Set\nconsole.log(map1.has('info')); // true"
                },
                {
                  "type": "sentence",
                  "text": "Removing Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can use the clear() and the delete() method to remove elements from a Map."
                },
                {
                  "type": "sentence",
                  "text": "The delete() method returns true if a specified key/value pair exists and has been removed or else returns false. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: \"26\"});\n\n// removing a particular element\nmap1.delete('address'); // false\nconsole.log(map1); // Map {\"info\" => {name: \"Jack\", age: \"26\"}} \n\nmap1.delete('info'); // true\nconsole.log(map1); // Map {}"
                },
                {
                  "type": "sentence",
                  "text": "The clear() method removes all key/value pairs from a Map object. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: \"26\"});\n\n// removing all element\nmap1.clear();\nconsole.log(map1); // Map {}"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Map Size"
                },
                {
                  "type": "sentence",
                  "text": "You can get the number of elements in a Map using the size property. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('info', {name: 'Jack', age: \"26\"});\n\nconsole.log(map1.size); // 1"
                },
                {
                  "type": "sentence",
                  "text": "Iterate Through a Map"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate through the Map elements using the for...of loop or forEach() method. The elements are accessed in the insertion order. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('name', 'Jack');\nmap1.set('age', '27');\n\n// looping through Map\nfor (let [key, value] of map1) {\n    console.log(key + '- ' + value);\n}\n\n// Output\n\nname- Jack\nage- 27"
                },
                {
                  "type": "sentence",
                  "text": "You could also get the same results as the above program using the forEach() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// using forEach method()\nlet map1 = new Map();\nmap1.set('name', 'Jack');\nmap1.set('age', '27');\n\n// looping through Map\nmap1.forEach(function(value, key) {\n  console.log(key + '- ' + value)\n})"
                },
                {
                  "type": "sentence",
                  "text": "Iterate Over Map Keys"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate over the Map and get the key using the keys() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('name', 'Jack');\nmap1.set('age', '27');\n\n// looping through the Map\nfor (let key of map1.keys()) {\n  console.log(key)\n}\n\n// Output\n\nname\nage"
                },
                {
                  "type": "sentence",
                  "text": "Iterate Over Map Values"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate over the Map and get the values using the values() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('name', 'Jack');\nmap1.set('age', '27');\n\n// looping through the Map\nfor (let values of map1.values()) {\n    console.log(values);\n}\n\n// Output\n\nJack\n27"
                },
                {
                  "type": "sentence",
                  "text": "Get Key/Values of Map"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate over the Map and get the key/value of a Map using the entries() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let map1 = new Map();\nmap1.set('name', 'Jack');\nmap1.set('age', '27');\n\n// looping through the Map\nfor (let elem of map1.entries()) {\n    console.log(`${elem[0]}: ${elem[1]}`);\n}\n\n// Output\n\nname: Jack\nage: 27"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Map vs Object"
                },
                {
                  "type": "sentence",
                  "text": "A. Map: Maps can contain objects and other data types as keys."
                },
                {
                  "type": "sentence",
                  "text": "Object: Objects can only contain strings and symbols as keys."
                },
                {
                  "type": "sentence",
                  "text": "B. Map: Maps can be directly iterated and their value can be accessed."
                },
                {
                  "type": "sentence",
                  "text": "Object: Objects can be iterated by accessing its keys."
                },
                {
                  "type": "sentence",
                  "text": "C. Map: The number of elements of a Map can be determined by size property."
                },
                {
                  "type": "sentence",
                  "text": "Object: The number of elements of an object needs to be determined manually."
                },
                {
                  "type": "sentence",
                  "text": "D. Map: Map performs better for programs that require the addition or removal of elements frequently."
                },
                {
                  "type": "sentence",
                  "text": "Object: Object does not perform well if the program requires the addition or removal of elements frequently."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript WeakMap"
                },
                {
                  "type": "sentence",
                  "text": "The WeakMap is similar to a Map. However, WeakMap can only contain objects as keys. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakMap = new WeakMap();\nconsole.log(weakMap); // WeakMap {} \n\nlet obj = {};\n\n// adding object (element) to WeakMap\nweakMap.set(obj, 'hello');\n\nconsole.log(weakMap); // WeakMap {{} => \"hello\"}"
                },
                {
                  "type": "sentence",
                  "text": "When you try to add other data types besides objects, WeakMap throws an error. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakMap = new WeakMap();\n\n// adding string as a key to WeakMap\nweakMap.set('obj', 'hello');\n\n// throws error\n// TypeError: Attempted to set a non-object key in a WeakMap"
                },
                {
                  "type": "sentence",
                  "text": "WeakMap Methods"
                },
                {
                  "type": "sentence",
                  "text": "WeakMaps have methods get(), set(), delete(), and has(). For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakMap = new WeakMap();\nconsole.log(weakMap); // WeakMap {} \n\nlet obj = {};\n\n// adding object (element) to WeakMap\nweakMap.set(obj, 'hello');\n\nconsole.log(weakMap); // WeakMap {{} => \"hello\"}\n\n// get the element of a WeakMap\nconsole.log(weakMap.get(obj)); // hello\n\n// check if an element is present in WeakMap\nconsole.log(weakMap.has(obj)); // true\n\n// delete the element of WeakMap\nconsole.log(weakMap.delete(obj)); // true\n\nconsole.log(weakMap); // WeakMap {}"
                },
                {
                  "type": "sentence",
                  "text": "WeakMaps Are Not Iterable"
                },
                {
                  "type": "sentence",
                  "text": "Unlike Maps, WeakMaps are not iterable. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakMap = new WeakMap();\nconsole.log(weakMap); // WeakMap {} \n\nlet obj = {};\n\n// adding object (element) to WeakMap\nweakMap.set(obj, 'hello');\n\n// looping through WeakMap\nfor (let i of weakMap) {\n    console.log(i);  // TypeError\n}"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Set and WeakSet",
              "content": [
                {
                  "type": "sentence",
                  "text": "The JavaScript ES6 has introduced two new data structures, i.e Set and WeakSet."
                },
                {
                  "type": "sentence",
                  "text": "Set is similar to an array that allows us to store multiple items like numbers, strings, objects, etc. However, unlike an array, a set cannot contain duplicate values."
                },
                {
                  "type": "sentence",
                  "text": "Create JavaScript Set"
                },
                {
                  "type": "sentence",
                  "text": "To create a Set, you need to use the new Set() constructor. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create Set\nconst set1 = new Set(); // an empty set\nconsole.log(set1); // Set {}\n\n// Set with multiple types of value\nconst set2 = new Set([1, 'hello', {count : true}]);\nconsole.log(set2); // Set {1, \"hello\", {count: true}}"
                },
                {
                  "type": "sentence",
                  "text": "When duplicate values are passed to a Set object, the duplicate values are excluded."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Set with duplicate values\nconst set3 = new Set([1, 1, 2, 2]);\nconsole.log(set3); // Set {1, 2}"
                },
                {
                  "type": "sentence",
                  "text": "Access Set Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can access Set elements using the values() method and check if there is an element inside Set using has() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set1 = new Set([1, 2, 3]);\n\n// access the elements of a Set\nconsole.log(set1.values()); // Set Iterator [1, 2, 3]\n\n// check if an element is in Set\nconsole.log(set1.has(1));"
                },
                {
                  "type": "sentence",
                  "text": "Adding New Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can add elements to a Set using the add() method. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set = new Set([1, 2]);\nconsole.log(set.values());\n\n// adding new elements\nset.add(3);\nconsole.log(set.values());\n\n// adding duplicate elements\n// does not add to Set\nset.add(1);\nconsole.log(set.values());\n\n// Output\n\nSet Iterator [1, 2]\nSet Iterator [1, 2, 3]\nSet Iterator [1, 2, 3]"
                },
                {
                  "type": "sentence",
                  "text": "Removing Elements"
                },
                {
                  "type": "sentence",
                  "text": "You can use the clear() and the delete() method to remove elements from a Set."
                },
                {
                  "type": "sentence",
                  "text": "The delete() method removes a specific element from a Set. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set = new Set([1, 2, 3]);\nconsole.log(set.values()); // Set Iterator [1, 2, 3]\n\n// removing a particular element\nset.delete(2);\nconsole.log(set.values()); // Set Iterator [1, 3]"
                },
                {
                  "type": "sentence",
                  "text": "The clear() method removes all elements from a Set. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set = new Set([1, 2, 3]);\nconsole.log(set.values()); // Set Iterator [1, 2, 3]\n\n// remove all elements of Set\nset.clear();\nconsole.log(set.values()); // Set Iterator []"
                },
                {
                  "type": "sentence",
                  "text": "Iterate Sets"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate through the Set elements using the for...of loop or forEach() method. The elements are accessed in the insertion order. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const set = new Set([1, 2, 3]);\n\n// looping through Set\nfor (let i of set) {\n    console.log(i);\n}\n\n// Output\n\n1\n2\n3"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript WeakSet"
                },
                {
                  "type": "sentence",
                  "text": "The WeakSet is similar to a Set. However, WeakSet can only contain objects whereas a Set can contain any data types such as strings, numbers, objects, etc. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakSet = new WeakSet();\nconsole.log(weakSet); // WeakSet {}\n\nlet obj = {\n    message: 'Hi',\n    sendMessage: true\n}\n\n// adding object (element) to WeakSet\nweakSet.add(obj);\n\nconsole.log(weakSet); // WeakSet {{message: \"Hi\", sendMessage: true}}"
                },
                {
                  "type": "sentence",
                  "text": "When you try to add other data types besides objects, WeakSet throws an error. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// trying to add string to WeakSet\nweakSet.add('hello');\n\n// throws error\n// TypeError: Attempted to add a non-object key to a WeakSet\nconsole.log(weakSet);"
                },
                {
                  "type": "sentence",
                  "text": "WeakSet Methods"
                },
                {
                  "type": "sentence",
                  "text": "WeakSets have methods add(), delete(), and has(). For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakSet = new WeakSet();\nconsole.log(weakSet); // WeakSet {}\n\nconst obj = {a:1};\n\n// add to a weakSet\nweakSet.add(obj);\nconsole.log(weakSet); // WeakSet {{a: 1}}\n\n// check if an element is in Set\nconsole.log(weakSet.has(obj)); // true\n\n// delete elements\nweakSet.delete(obj);\nconsole.log(weakSet); // WeakSet {}"
                },
                {
                  "type": "sentence",
                  "text": "WeakSets Are Not Iterable"
                },
                {
                  "type": "sentence",
                  "text": "Unlike Sets, WeakSets are not iterable. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const weakSet = new WeakSet({a:1});\n\n// looping through WeakSet\nfor (let i of weakSet) {\n    // TypeError\n    console.log(i);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Mathematical Set Operations"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, Set does not provide built-in methods for performing mathematical operations such as union, intersection, difference, etc. However, we can create programs to perform those operations."
                },
                {
                  "type": "sentence",
                  "text": "Example: Set Union Operation"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// perform union operation\n// contain elements of both sets\nfunction union(a, b) {\n    let unionSet = new Set(a);\n    for (let i of b) {\n        unionSet.add(i);\n    }\n    return unionSet\n}\n\n// two sets of fruits\nlet setA = new Set(['apple', 'mango', 'orange']);\nlet setB = new Set(['grapes', 'apple', 'banana']);\n\nlet result = union(setA, setB);\n\nconsole.log(result);\n\n// Output\n\nSet {\"apple\", \"mango\", \"orange\", \"grapes\", \"banana\"}"
                },
                {
                  "type": "sentence",
                  "text": "Example: Set Intersection Operation"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// perform intersection operation\n// elements of set a that are also in set b\nfunction intersection(setA, setB) {\n    let intersectionSet = new Set();\n\n    for (let i of setB) {\n        if (setA.has(i)) {\n            intersectionSet.add(i);\n        }\n    }\n    return intersectionSet;\n}\n\n// two sets of fruits\nlet setA = new Set(['apple', 'mango', 'orange']);\nlet setB = new Set(['grapes', 'apple', 'banana']);\n\nlet result = intersection(setA, setB);\n\nconsole.log(result);\n\n// Output\n\nSet {\"apple\"}"
                },
                {
                  "type": "sentence",
                  "text": "Example: Set Difference Operation"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// perform difference operation\n// elements of set a that are not in set b\nfunction difference(setA, setB) {\n    let differenceSet = new Set(setA)\n    for (let i of setB) {\n        differenceSet.delete(i)\n    }\n    return differenceSet\n}\n\n// two sets of fruits\nlet setA = new Set(['apple', 'mango', 'orange']);\nlet setB = new Set(['grapes', 'apple', 'banana']);\n\nlet result = difference(setA, setB);\n\nconsole.log(result);\n\n// Output\n\nSet {\"mango\", \"orange\"}"
                },
                {
                  "type": "sentence",
                  "text": "Example: Set Subset Operation"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// perform subset operation\n// true if all elements of set b is in set a\nfunction subset(setA, setB) {\n    for (let i of setB) {\n        if (!setA.has(i)) {\n            return false\n        }\n    }\n    return true\n}\n\n// two sets of fruits\nlet setA = new Set(['apple', 'mango', 'orange']);\nlet setB = new Set(['apple', 'orange']);\n\nlet result = subset(setA, setB);\n\nconsole.log(result);\n\n// Output\n\ntrue"
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Destructuring Assignment",
              "content": [
                {
                  "type": "sentence",
                  "text": "JavaScript Destructuring"
                },
                {
                  "type": "sentence",
                  "text": "The destructuring assignment introduced in ES6 makes it easy to assign array values and object properties to distinct variables. For example,"
                },
                {
                  "type": "sentence",
                  "text": "Before ES6:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// assigning object attributes to variables\nconst person = {\n    name: 'Sara',\n    age: 25,\n    gender: 'female'    \n}\n\nlet name = person.name;\nlet age = person.age;\nlet gender = person.gender;\n\nconsole.log(name); // Sara\nconsole.log(age); // 25\nconsole.log(gender); // female"
                },
                {
                  "type": "sentence",
                  "text": "From ES6:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// assigning object attributes to variables\nconst person = {\n    name: 'Sara',\n    age: 25,\n    gender: 'female'    \n}\n\n// destructuring assignment\nlet { name, age, gender } = person;\n\nconsole.log(name); // Sara\nconsole.log(age); // 25\nconsole.log(gender); // female"
                },
                {
                  "type": "sentence",
                  "text": "Note: The order of the name does not matter in object destructuring."
                },
                {
                  "type": "sentence",
                  "text": "For example, you could write the above program as:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let { age, gender, name } = person;\nconsole.log(name); // Sara"
                },
                {
                  "type": "sentence",
                  "text": "Note: When destructuring objects, you should use the same name for the variable as the corresponding object key."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let {name1, age, gender} = person;\nconsole.log(name1); // undefined"
                },
                {
                  "type": "sentence",
                  "text": "If you want to assign different variable names for the object key, you can use:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// destructuring assignment\n// using different variable names\nlet { name: name1, age: age1, gender:gender1 } = person;\n\nconsole.log(name1); // Sara\nconsole.log(age1); // 25\nconsole.log(gender1); // female"
                },
                {
                  "type": "sentence",
                  "text": "Array Destructuring"
                },
                {
                  "type": "sentence",
                  "text": "You can also perform array destructuring in a similar way. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const arrValue = ['one', 'two', 'three'];\n\n// destructuring assignment in arrays\nconst [x, y, z] = arrValue;\n\nconsole.log(x); // one\nconsole.log(y); // two\nconsole.log(z); // three"
                },
                {
                  "type": "sentence",
                  "text": "Assign Default Values"
                },
                {
                  "type": "sentence",
                  "text": "You can assign default values for variables while using destructuring. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let arrValue = [10];\n\n// assigning default value 5 and 7\nlet [x = 5,  y = 7] = arrValue;\n\nconsole.log(x); // 10\nconsole.log(y); // 7\n\n// In the above program, arrValue has only one element. Hence,\n\n// the x variable will be 10\n// the y variable takes the default value 7"
                },
                {
                  "type": "sentence",
                  "text": "In object destructuring, you can pass default values in a similar way. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const person = {\n    name: 'Jack',\n}\n\n// assign default value 26 to age if undefined\nconst { name, age = 26} = person;\n\nconsole.log(name); // Jack\nconsole.log(age); // 26"
                },
                {
                  "type": "sentence",
                  "text": "Swapping Variables"
                },
                {
                  "type": "sentence",
                  "text": "In this example, two variables are swapped using the destructuring assignment syntax."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to swap variables\n\nlet x = 4;\nlet y = 7;\n\n// swapping variables\n[x, y] = [y, x];\n\nconsole.log(x); // 7\nconsole.log(y); // 4"
                },
                {
                  "type": "sentence",
                  "text": "Skip Items"
                },
                {
                  "type": "sentence",
                  "text": "You can skip unwanted items in an array without assigning them to local variables. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const arrValue = ['one', 'two', 'three'];\n\n// destructuring assignment in arrays\nconst [x, , z] = arrValue;\n\nconsole.log(x); // one\nconsole.log(z); // three\n\n// In the above program, the second element is omitted by using the comma separator ,."
                },
                {
                  "type": "sentence",
                  "text": "Assign Remaining Elements to a Single Variable"
                },
                {
                  "type": "sentence",
                  "text": "You can assign the remaining elements of an array to a variable using the spread syntax .... For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const arrValue = ['one', 'two', 'three', 'four'];\n\n// destructuring assignment in arrays\n// assigning remaining elements to y\nconst [x, ...y] = arrValue;\n\nconsole.log(x); // one\nconsole.log(y); // [\"two\", \"three\", \"four\"]\n\n// Here, one is assigned to the x variable. And the rest of the array elements are assigned to y variable."
                },
                {
                  "type": "sentence",
                  "text": "You can also assign the rest of the object properties to a single variable. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const person = {\n    name: 'Sara',\n    age: 25,\n    gender: 'female'    \n}\n\n// destructuring assignment\n// assigning remaining properties to rest\nlet { name, ...rest } = person;\n\nconsole.log(name); // Sara\nconsole.log(rest); // {age: 25, gender: \"female\"}\n\n// Note: The variable with the spread syntax cannot have a trailing comma ,. You should use this rest element (variable with spread syntax) as the last variable."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const arrValue = ['one', 'two', 'three', 'four'];\n\n// throws an error\nconst [ ...x, y] = arrValue;\n\nconsole.log(x); // error"
                },
                {
                  "type": "sentence",
                  "text": "Nested Destructuring Assignment"
                },
                {
                  "type": "sentence",
                  "text": "You can perform nested destructuring for array elements. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// nested array elements\nconst arrValue = ['one', ['two', 'three']];\n\n// nested destructuring assignment in arrays\nconst [x, [y, z]] = arrValue;\n\nconsole.log(x); // one\nconsole.log(y); // two\nconsole.log(z); // three\n\n// Here, the variable y and z are assigned nested elements two and three.\n// In order to execute the nested destructuring assignment, you have to enclose the variables in an array structure (by enclosing inside [])."
                },
                {
                  "type": "sentence",
                  "text": "You can also perform nested destructuring for object properties. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const person = {\n    name: 'Jack',\n    age: 26,\n    hobbies: {\n        read: true,\n        playGame: true\n    }\n}\n// nested destructuring \nconst {name, hobbies: {read, playGame}} = person;\n\nconsole.log(name); // Jack\nconsole.log(read); // true\nconsole.log(playGame); // true\n\n// In order to execute the nested destructuring assignment for objects, you have to enclose the variables in an object structure (by enclosing inside {})."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Classes",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript ES6, classes provide a way to create blueprints for objects, similar to traditional object-oriented programming languages like C++ or Java."
                },
                {
                  "type": "sentence",
                  "text": "Let's explore a simple example by creating a Person class:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// define a class named 'Person'\nclass Person {\n    // class constructor to initialize the 'name' and 'age' properties\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    // method to display a message\n    greet() {\n        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n    }\n}\n\n// create two instances of the Person class\nlet person1 = new Person(\"Jack\", 30);\nlet person2 = new Person(\"Tina\", 33);\n\n// call greet() method on two instances \nperson1.greet();\nperson2.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello, my name is Jack and I am 30 years old.\nHello, my name is Tina and I am 33 years old."
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have defined a Person class using the class keyword."
                },
                {
                  "type": "sentence",
                  "text": "Inside Person, we have defined:"
                },
                {
                  "type": "sentence",
                  "text": "a class constructor that initializes the name and age properties"
                },
                {
                  "type": "sentence",
                  "text": "a greet() method that displays a greeting message using the name and age properties."
                },
                {
                  "type": "sentence",
                  "text": "Using the new keyword, we have created two objects of the Person class- person1 and person2."
                },
                {
                  "type": "sentence",
                  "text": "We have then called the greet() method on person1 and person2 using the . operator:"
                },
                {
                  "type": "sentence",
                  "text": "person1.greet() - calls greet() on person1"
                },
                {
                  "type": "sentence",
                  "text": "person2.greet() - calls greet() on person2"
                },
                {
                  "type": "sentence",
                  "text": "Create Objects Without Classes"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, you have the flexibility to create objects directly without the use of formal class definitions. This can be achieved by using object literals."
                },
                {
                  "type": "sentence",
                  "text": "Let's look at the example below,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create an object 'person' without a formal class definition\nlet person = {\n    name: \"Jack\",\n    age: 30,\n    greet: function() {\n        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`)\n    }\n};\n\n// call the greet() method on the person object\nperson.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello, my name is Jack and I am 30 years old."
                },
                {
                  "type": "sentence",
                  "text": "In the above example, we have created an object named person directly using an object literal."
                },
                {
                  "type": "sentence",
                  "text": "The person object has:"
                },
                {
                  "type": "sentence",
                  "text": "properties - name and age with values \"Jack\" and 30 respectively."
                },
                {
                  "type": "sentence",
                  "text": "method - greet() that displays a greeting message."
                },
                {
                  "type": "sentence",
                  "text": "We have called the greet() method on person using the . operator as person.greet()."
                },
                {
                  "type": "sentence",
                  "text": "Features of a JavaScript Class"
                },
                {
                  "type": "sentence",
                  "text": "Let's revisit the code from the beginning of the tutorial and explore each part in detail to gain a deeper understanding of how classes work in JavaScript."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// define a class named 'Person'\nclass Person {\n    // class constructor to initialize the 'name' and 'age' properties\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n    \n    // method to display a message\n    greet() {\n        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n    }\n}\n\n// create two objects of the Person class\nlet person1 = new Person(\"Jack\", 30);\nlet person2 = new Person(\"Tina\", 33);\n\n// call greet() method on two instances \nperson1.greet();\nperson2.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Create a class"
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, we create a class using the class keyword. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// create a class\nclass Person {\n    // body of class\n};"
                },
                {
                  "type": "sentence",
                  "text": "Class Constructor"
                },
                {
                  "type": "sentence",
                  "text": "A class constructor is a special method within a class that is automatically executed when a new object of that class is created."
                },
                {
                  "type": "sentence",
                  "text": "The Person class constructor initializes the name and age properties when a new object is created."
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "the person1 object is initialized with \"Jack\" and 30"
                },
                {
                  "type": "sentence",
                  "text": "the person2 object is initialized with \"Tina\" and 33"
                },
                {
                  "type": "sentence",
                  "text": "Class Method"
                },
                {
                  "type": "sentence",
                  "text": "A class method is a function inside a class that defines behaviors for the class's objects."
                },
                {
                  "type": "sentence",
                  "text": "Here, greet() is a method of the Person class that displays a greeting message when called on objects of the class."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Class Inheritance",
              "content": [
                {
                  "type": "sentence",
                  "text": "Inheritance enables you to define a class that takes all the functionality from a parent class and allows you to add more."
                },
                {
                  "type": "sentence",
                  "text": "Using class inheritance, a class can inherit all the methods and properties of another class."
                },
                {
                  "type": "sentence",
                  "text": "Inheritance is a useful feature that allows code reusability."
                },
                {
                  "type": "sentence",
                  "text": "To use class inheritance, you use the extends keyword. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// parent class\nclass Person { \n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log(`Hello ${this.name}`);\n    }\n}\n\n// inheriting parent class\nclass Student extends Person {\n\n}\n\nlet student1 = new Student('Jack');\nstudent1.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello Jack"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the Student class inherits all the methods and properties of the Person class. Hence, the Student class will now have the name property and the greet() method."
                },
                {
                  "type": "sentence",
                  "text": "Then, we accessed the greet() method of Student class by creating a student1 object."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript super() keyword"
                },
                {
                  "type": "sentence",
                  "text": "The super keyword used inside a child class denotes its parent class. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// parent class\nclass Person { \n    constructor(name) {\n        this.name = name;\n    }\n\n    greet() {\n        console.log(`Hello ${this.name}`);\n    }\n}\n\n// inheriting parent class\nclass Student extends Person {\n\n    constructor(name) {\n        \n        console.log(\"Creating student class\");\n        \n        // call the super class constructor and pass in the name parameter\n        super(name);\n    }\n\n}\n\nlet student1 = new Student('Jack');\nstudent1.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Here, super inside Student class refers to the Person class. Hence, when the constructor of Student class is called, it also calls the constructor of the Person class which assigns a name property to it."
                },
                {
                  "type": "sentence",
                  "text": "Overriding Method or Property"
                },
                {
                  "type": "sentence",
                  "text": "If a child class has the same method or property name as that of the parent class, it will use the method and property of the child class. This concept is called method overriding. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// parent class\nclass Person { \n    constructor(name) {\n        this.name = name;\n        this.occupation = \"unemployed\";\n    }\n    \n    greet() {\n        console.log(`Hello ${this.name}.`);\n    }\n \n}\n\n// inheriting parent class\nclass Student extends Person {\n\n    constructor(name) {\n        \n        // call the super class constructor and pass in the name parameter\n        super(name);\n        \n        // Overriding an occupation property\n        this.occupation = 'Student';\n    }\n    \n    // overriding Person's method\n    greet() {\n        console.log(`Hello student ${this.name}.`);\n        console.log('occupation: ' + this.occupation);\n    }\n}\n\nlet p = new Student('Jack');\np.greet();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello student Jack.\noccupation: Student"
                },
                {
                  "type": "sentence",
                  "text": "Here, the occupation property and the greet() method are present in parent Person class and the child Student class. Hence, the Student class overrides the occupation property and the greet() method."
                },
                {
                  "type": "sentence",
                  "text": "Uses of Inheritance"
                },
                {
                  "type": "sentence",
                  "text": "Since a child class can inherit all the functionalities of the parent's class, this allows code reusability."
                },
                {
                  "type": "sentence",
                  "text": "Once a functionality is developed, you can simply inherit it. No need to reinvent the wheel. This allows for cleaner code and easier to maintain."
                },
                {
                  "type": "sentence",
                  "text": "Since you can also add your own functionalities in the child class, you can inherit only the useful functionalities and define other required features."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript for...of Loop",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, there are three ways we can use a for loop."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript for loop"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript for...in loop"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript for...of loop"
                },
                {
                  "type": "sentence",
                  "text": "The for...of loop was introduced in the later versions of JavaScript ES6."
                },
                {
                  "type": "sentence",
                  "text": "The for..of loop in JavaScript allows you to iterate over iterable objects (arrays, sets, maps, strings etc)."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript for...of loop"
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the for...of loop is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "for (element of iterable) {\n    // body of for...of\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "iterable - an iterable object (array, set, strings, etc)."
                },
                {
                  "type": "sentence",
                  "text": "element - items in the iterable"
                },
                {
                  "type": "sentence",
                  "text": "In plain English, you can read the above code as: for every element in the iterable, run the body of the loop."
                },
                {
                  "type": "sentence",
                  "text": "for...of with Arrays"
                },
                {
                  "type": "sentence",
                  "text": "The for..of loop can be used to iterate over an array. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// array\nconst students = ['John', 'Sara', 'Jack'];\n\n// using for...of\nfor ( let element of students ) {\n\n    // display the values\n    console.log(element);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "John\nSara\nJack"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the for...of loop is used to iterate over the students array object and display all its values."
                },
                {
                  "type": "sentence",
                  "text": "for...of with Strings"
                },
                {
                  "type": "sentence",
                  "text": "You can use for...of loop to iterate over string values. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// string\nconst string = 'code';\n\n// using for...of loop\nfor (let i of string) {\n    console.log(i);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "c\no\nd\ne"
                },
                {
                  "type": "sentence",
                  "text": "for...of with Sets"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate through Set elements using the for...of loop. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// define Set\nconst set = new Set([1, 2, 3]);\n\n// looping through Set\nfor (let i of set) {\n    console.log(i);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "1\n2\n3"
                },
                {
                  "type": "sentence",
                  "text": "for...of with Maps"
                },
                {
                  "type": "sentence",
                  "text": "You can iterate through Map elements using the for...of loop. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// define Map\nlet map = new Map();\n\n// inserting elements\nmap.set('name', 'Jack');\nmap.set('age', '27');\n\n// looping through Map\nfor (let [key, value] of map) {\n    console.log(key + '- ' + value);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "name- Jack\nage- 27"
                },
                {
                  "type": "sentence",
                  "text": "User Defined Iterators"
                },
                {
                  "type": "sentence",
                  "text": "You can create an iterator manually and use the for...of loop to iterate through the iterators. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// creating iterable object\nconst iterableObj = {\n\n    // iterator method\n    [Symbol.iterator]() {\n        let step = 0;\n        return {\n            next() {\n                step++;\n                if (step === 1) {\n                    return { value: '1', done: false};\n                 }\n                else if (step === 2) {\n                    return { value: '2', done: false};\n                }\n                else if (step === 3) {\n                    return { value: '3', done: false};\n                }\n                return { value: '', done: true };\n            }\n        }\n    }\n}\n\n// iterating using for...of\nfor (const i of iterableObj) {\n console.log(i);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "1\n2\n3"
                },
                {
                  "type": "sentence",
                  "text": "for...of with Generators"
                },
                {
                  "type": "sentence",
                  "text": "Since generators are iterables, you can implement an iterator in an easier way. Then you can iterate through the generators using the for...of loop. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// generator function\nfunction* generatorFunc() {\n  \n    yield 10;\n    yield 20;\n    yield 30;\n}\n\nconst obj = generatorFunc();\n\n// iteration through generator\nfor (let value of obj) {\n    console.log(value);\n}"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "10\n20\n30"
                },
                {
                  "type": "sentence",
                  "text": "for...of Vs for...in"
                },
                {
                  "type": "sentence",
                  "text": "for...of: The for...of loop is used to iterate through the values of an iterable."
                },
                {
                  "type": "sentence",
                  "text": "for...of: The for...of loop cannot be used to iterate over an object."
                },
                {
                  "type": "sentence",
                  "text": "for...in: The for...in loop is used to iterate through the keys of an object."
                },
                {
                  "type": "sentence",
                  "text": "for...in: You can use for...in to iterate over an iterable such as arrays and strings, but you should avoid using for...in for iterables."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Proxies",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, proxies (proxy object) are used to wrap an object and redefine various operations into the object such as reading, insertion, validation, etc. Proxy allows you to add custom behavior to an object or a function."
                },
                {
                  "type": "sentence",
                  "text": "Creating a Proxy Object"
                },
                {
                  "type": "sentence",
                  "text": "The syntax of proxy is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "new Proxy(target, handler);"
                },
                {
                  "type": "sentence",
                  "text": "Here,"
                },
                {
                  "type": "sentence",
                  "text": "new Proxy() - the constructor."
                },
                {
                  "type": "sentence",
                  "text": "target - the object/function which you want to proxy"
                },
                {
                  "type": "sentence",
                  "text": "handler - can redefine the custom behavior of the object"
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student1 = {\n    age: 24,\n    name: 'Felix'\n}\n\nconst handler = {\n    get: function(obj, prop) {\n        return obj[prop] ? obj[prop] : 'property does not exist';\n    }\n}\n\nconst proxy = new Proxy(student1, handler);\nconsole.log(proxy.name); // Felix\nconsole.log(proxy.age); // 24\nconsole.log(proxy.class); // property does not exist"
                },
                {
                  "type": "sentence",
                  "text": "Here, the get() method is used to access the object's property value. And if the property is not available in the object, it returns property does not exist."
                },
                {
                  "type": "sentence",
                  "text": "As you can see, you can use a proxy to create new operations for the object. A case may arise when you want to check if an object has a particular key and perform an action based on that key. In such cases, proxies can be used."
                },
                {
                  "type": "sentence",
                  "text": "You can also pass an empty handler. When an empty handler is passed, the proxy behaves as an original object. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student = {\n    name: 'Jack',\n    age: 24\n}\n\nconst handler = { };\n\n// passing empty handler\nconst proxy1 = new Proxy(student, {});\n\nconsole.log(proxy1); // Proxy {name: 'Jack', age: 24}\nconsole.log(proxy1.name); // Jack"
                },
                {
                  "type": "sentence",
                  "text": "Proxy handlers"
                },
                {
                  "type": "sentence",
                  "text": "Proxy provides two handler methods get() and set()."
                },
                {
                  "type": "sentence",
                  "text": "get() handler"
                },
                {
                  "type": "sentence",
                  "text": "The get() method is used to access the properties of a target object. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student = {\n    name: 'Jack',\n    age: 24\n}\n\nconst handler = {\n    // get the object key and value\n    get(obj, prop) {\n        return obj[prop];\n    }\n}\n\nconst proxy = new Proxy(student, handler);\nconsole.log(proxy.name); // Jack"
                },
                {
                  "type": "sentence",
                  "text": "Here, the get() method takes the object and the property as its parameters."
                },
                {
                  "type": "sentence",
                  "text": "set() handler"
                },
                {
                  "type": "sentence",
                  "text": "The set() method is used to set the value of an object. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student = {\n    name: 'John'\n}\n\nlet setNewValue = {\n  set: function(obj, prop, value) {\n    obj[prop] = value;\n    return;\n  }\n};\n\n// setting new proxy\nlet person = new Proxy(student, setNewValue);\n\n// setting new key/value\nperson.age = 25;\nconsole.log(person); // Proxy {name: 'John', age: 25}"
                },
                {
                  "type": "sentence",
                  "text": "Here, a new property age is added to the student object."
                },
                {
                  "type": "sentence",
                  "text": "Uses of Proxy"
                },
                {
                  "type": "sentence",
                  "text": "1. For Validation"
                },
                {
                  "type": "sentence",
                  "text": "You can use a proxy for validation. You can check the value of a key and perform an action based on that value."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student = {\n    name: 'Jack',\n    age: 24\n}\n\nconst handler = {\n    // get the object key and value\n    get(obj, prop) {\n        // check condition\n        if (prop == 'name') {\n            return obj[prop];\n        } else {\n            return 'Not allowed';\n        }\n    }\n}\n\nconst proxy = new Proxy(student, handler);\nconsole.log(proxy.name); // Jack\nconsole.log(proxy.age); // Not allowed"
                },
                {
                  "type": "sentence",
                  "text": "Here, only the name property of the student object is accessible. Else, it returns Not allowed."
                },
                {
                  "type": "sentence",
                  "text": "2. Read Only View of an Object"
                },
                {
                  "type": "sentence",
                  "text": "There may be times when you do not want to let others make changes in an object. In such cases, you can use a proxy to make an object readable only. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let student = {\n    name: 'Jack',\n    age: 23\n}\n\nconst handler = {\n    set: function (obj, prop, value) {\n        if (obj[prop]) {\n            // cannot change the student value\n            console.log('Read only')\n        }\n    }\n};\n\nconst proxy = new Proxy(student, handler);\n\nproxy.name = 'John'; // Read only\nproxy.age = 33; // Read only"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, one cannot mutate the object in any way."
                },
                {
                  "type": "sentence",
                  "text": "If one tries to mutate the object in any way, you'll only receive a string saying Read Only."
                },
                {
                  "type": "sentence",
                  "text": "3. Side Effects"
                },
                {
                  "type": "sentence",
                  "text": "You can use a proxy to call another function when a condition is met. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const myFunction = () => {\n    console.log('execute this function')\n};\n\nconst handler = {\n    set: function (target, prop, value) {\n        if (prop === 'name' && value === 'Jack') {\n            // calling another function\n            myFunction();\n        } else {\n            console.log('Can only access name property');\n        }\n    }\n};\n\nconst proxy = new Proxy({}, handler);\n\nproxy.name = 'Jack'; // execute this function\nproxy.age = 33; // Can only access name property"
                }
              ],
              "locked": true
            }                                          
          ],
            "quiz": [
              {
                "question": "What is the purpose of the `let` keyword introduced in ES6?",
                "options": [
                    "To declare global variables",
                    "To create block-scoped variables",
                    "To declare constants",
                    "To create function-scoped variables"
                ],
                "correctAnswer": "To create block-scoped variables",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of the following code snippet?\n\n```javascript\nconst fruit = \"Apple\";\nfruit = \"Banana\";\nconsole.log(fruit);\n```",
                "options": [
                    "Apple",
                    "Banana",
                    "Error: Assignment to constant variable",
                    "undefined"
                ],
                "correctAnswer": "Error: Assignment to constant variable",
                "points": 1,
                "locked": true
              },
              {
                "question": "How do template literals improve string handling in JavaScript ES6?",
                "options": [
                    "By allowing string concatenation with `+` operator",
                    "By supporting multi-line strings and embedded expressions",
                    "By converting strings to uppercase",
                    "By escaping special characters in strings"
                ],
                "correctAnswer": "By supporting multi-line strings and embedded expressions",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the output of the following code snippet using arrow functions?\n\n```javascript\nconst addNumbers = (a, b) => a + b;\nconsole.log(addNumbers(5, 3));\n```",
                "options": [
                    "5",
                    "3",
                    "8",
                    "Error"
                ],
                "correctAnswer": "8",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which of the following is a correct way to use destructuring to extract values from an object?",
                "options": [
                    "```javascript\nconst { key1, key2 } = object;\n```",
                    "```javascript\nconst key1, key2 = object;\n```",
                    "```javascript\nconst key1 = object.key1;\nconst key2 = object.key2;\n```",
                    "```javascript\nconst object = { key1, key2 };\n```"
                ],
                "correctAnswer": "```javascript\nconst { key1, key2 } = object;\n```",
                "points": 1,
                "locked": true
              },
              {
                "question": "What does the `rest` parameter do in a function definition?",
                "options": [
                    "It allows a function to accept a variable number of arguments as an array",
                    "It defines a fixed number of arguments for the function",
                    "It creates a default value for function arguments",
                    "It spreads the arguments across multiple functions"
                ],
                "correctAnswer": "It allows a function to accept a variable number of arguments as an array",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the purpose of the JavaScript spread operator?",
                "options": [
                    "To merge objects into one.",
                    "To expand elements of an iterable into individual elements.",
                    "To copy an object.",
                    "To iterate over elements in an array."
                ],
                "correctAnswer": "To expand elements of an iterable into individual elements.",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of `console.log(...numbers)` where `let numbers = [1, 2, 3]`?",
                "options": [
                    "[1, 2, 3]",
                    "1 2 3",
                    "1,2,3",
                    "undefined"
                ],
                "correctAnswer": "1 2 3",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the difference between `Map` and `Object` in JavaScript?",
                "options": [
                    "Map can only contain strings as keys, while Object can contain any data type.",
                    "Map maintains insertion order of keys, while Object does not.",
                    "Map is iterable, while Object is not.",
                    "Object supports various methods for manipulation, while Map does not."
                ],
                "correctAnswer": "Map maintains insertion order of keys, while Object does not.",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which method removes all elements from a Set?",
                "options": [
                    "delete()",
                    "clear()",
                    "remove()",
                    "discard()"
                ],
                "correctAnswer": "clear()",
                "points": 1,
                "locked": true
              },
              {
                "question": "How can you perform a union operation on two Sets in JavaScript?",
                "options": [
                    "Use the `concat()` method.",
                    "Use the `union()` function.",
                    "Use the `add()` method.",
                    "Use the `spread operator`."
                ],
                "correctAnswer": "Use the `union()` function.",
                "points": 1,
                "locked": true
              },
              {
                "question": "What type of keys can a WeakMap contain?",
                "options": [
                    "Strings and Symbols",
                    "Only objects",
                    "Any primitive data type",
                    "Objects and functions"
                ],
                "correctAnswer": "Only objects",
                "points": 1,
                "locked": true
              },
              {
                "question": "What does the destructuring assignment allow you to do in JavaScript?",
                "options": [
                  "Assign array values and object properties to distinct variables.",
                  "Create new objects.",
                  "Define classes and methods.",
                  "Swap variables."
                ],
                "correctAnswer": "Assign array values and object properties to distinct variables.",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which syntax is used for object destructuring in JavaScript ES6?",
                "options": [
                  "let { key1, key2 } = object;",
                  "let [key1, key2] = object;",
                  "let key1 = object.key1, key2 = object.key2;",
                  "let key1, key2 = object.key1, object.key2;"
                ],
                "correctAnswer": "let { key1, key2 } = object;",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will the output of the following code be: let { name: name1 } = { name: 'Sara' }; console.log(name1);",
                "options": [
                  "'Sara'",
                  "undefined",
                  "SyntaxError",
                  "null"
                ],
                "correctAnswer": "'Sara'",
                "points": 1,
                "locked": true
              },
              {
                "question": "How can you assign default values in array destructuring?",
                "options": [
                  "let [x = 5, y = 7] = arr;",
                  "let [x, y] = arr || [5, 7];",
                  "let x = arr[0] || 5, y = arr[1] || 7;",
                  "let [x, y] = arr, x = 5, y = 7;"
                ],
                "correctAnswer": "let [x = 5, y = 7] = arr;",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which method is used to access properties of a target object in a JavaScript Proxy?",
                "options": [
                  "get()",
                  "set()",
                  "apply()",
                  "construct()"
                ],
                "correctAnswer": "get()",
                "points": 1,
                "locked": true
              },
              {
                "question": "What will be the output of the following code: const [x, , z] = ['one', 'two', 'three']; console.log(z);",
                "options": [
                  "'one'",
                  "'two'",
                  "'three'",
                  "undefined"
                ],
                "correctAnswer": "'three'",
                "points": 1,
                "locked": true
              },
              {
                "question": "What is the purpose of the 'super()' method in a JavaScript class?",
                "options": [
                  "To call the parent class constructor.",
                  "To define a static method.",
                  "To create a new instance of the class.",
                  "To override methods of the parent class."
                ],
                "correctAnswer": "To call the parent class constructor.",
                "points": 1,
                "locked": true
              },
              {
                "question": "Which keyword is used to define a class in JavaScript ES6?",
                "options": [
                  "function",
                  "class",
                  "constructor",
                  "define"
                ],
                "correctAnswer": "class",
                "points": 1,
                "locked": true
              }
            ],
            "activities": [
              {
                "title": "Using let, const, and Template Literals",
                "description": "Practice using `let`, `const`, and template literals introduced in ES6.",
                "language": "JavaScriptConsole",
                "difficulty": "medium",
                "problemStatement": "In this activity, you will write JavaScript code using ES6 features such as `let`, `const`, and template literals.\n\n1. Declare a constant `name` and assign it the value `'John'`.\n\n2. Declare a `let` variable `age` and assign it the value `30`.\n\n3. Use a template literal to print the message 'My name is John and I am 30 years old.' by replacing 'John' and '30' with the values of `name` and `age`.\n\nEnsure that the code executes without any errors and prints the correct message.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "const name = 'John';\nlet age = 30;\nconsole.log(`My name is ${name} and I am ${age} years old.`);",
                    "output": "My name is John and I am 30 years old.",
                    "required": [
                      "const name = 'John';",
                      "let age = 30;",
                      "console.log(`My name is ${name} and I am ${age} years old.`);"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Declare a constant `name` with the value 'John'.",
                      "Declare a `let` variable `age` with the value 30.",
                      "Use a template literal to print 'My name is John and I am 30 years old.' by inserting `name` and `age` in the message."
                    ]
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Destructuring Arrays and Objects",
                "description": "Practice using ES6 destructuring syntax to unpack values from arrays and objects.",
                "language": "JavaScriptConsole",
                "difficulty": "medium",
                "problemStatement": "In this activity, you will practice destructuring arrays and objects. You will unpack values from an array and object and print them.\n\n1. Declare an array `colors` with the values `['red', 'green', 'blue']` and use destructuring to assign the first two values to variables `color1` and `color2`. Print both.\n\n2. Declare an object `person` with properties `name` and `age`. Use destructuring to assign the values to variables `name` and `age` and print them.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": ""
                },
                "testCases": [
                  {
                    "input": "let colors = ['red', 'green', 'blue'];\nlet [color1, color2] = colors;\nconsole.log(color1);\nconsole.log(color2);\nlet person = {name: 'John', age: 25};\nlet {name, age} = person;\nconsole.log(name);\nconsole.log(age);",
                    "output": "red\ngreen\nJohn\n25",
                    "required": [
                      "let colors = ['red', 'green', 'blue'];",
                      "let [color1, color2] = colors;",
                      "let person = {name: 'John', age: 25};",
                      "let {name, age} = person;"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Declare an array `colors` with a value of ['red','green','blue']",
                      "Use destructuring to unpack the first two values of the colors array.",
                      "Declare an object `person`","Use destructuring to unpack `name` and `age`."
                    ]
                  }
                ],
                "locked": true,
                "completed": false
              },
              {
                "title": "Template Literals and Default Parameters",
                "description": "Learn to use template literals and default parameter values in functions.",
                "language": "JavaScriptConsole",
                "difficulty": "medium",
                "problemStatement": "Create a function that takes two parameters. Use template literals to create a message string that includes these parameters. Also, set default values for the parameters and show how they are used if no argument is provided.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": "// Function with default parameters and template literals\nfunction createGreeting(firstName = 'Guest', lastName = 'User') {\n    console.log(`Hello, ${firstName} ${lastName}!`);\n}\n\n// Test the function with different arguments\ncreateGreeting('Jack', 'Sparrow'); // Should print: Hello, Jack Sparrow!\ncreateGreeting('Alice'); // Should print: Hello, Alice User!\ncreateGreeting(); // Should print: Hello, Guest User!"
                },
                "testCases": [
                  {
                    "input": "createGreeting('Jack', 'Sparrow');\ncreateGreeting('Alice');\ncreateGreeting();",
                    "output": "Hello, Jack Sparrow!\nHello, Alice User!\nHello, Guest User!",
                    "required": [
                      "createGreeting('Jack', 'Sparrow');",
                      "createGreeting('Alice');",
                      "createGreeting();"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Call the `createGreeting` function with two parameters: `'Jack'` and `'Sparrow'`, and print the greeting.",
                      "Call the function with only one parameter and print the greeting with the default last name.",
                      "Call the function without any parameters and print the greeting with the default names."
                    ],
                    "expectedImage": "/activities/jsacts/7.2.png"
                  }
                ],
                "locked": true,
                "completed": false
              }
            
      ],         
          "totalPoints": 0,
          "locked": true
          
        },
        {
          "title": "Lesson 6: JavaScript Asynchronous",
          "documents": [
            {
              "title": "JavaScript setTimeout()",
              "content": [
                {
                  "type": "sentence",
                  "text": "The setTimeout() method executes a block of code after the specified time. The method executes the code only once."
                },
                {
                  "type": "sentence",
                  "text": "The commonly used syntax of JavaScript setTimeout is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "setTimeout(function, milliseconds);"
                },
                {
                  "type": "sentence",
                  "text": "Its parameters are:"
                },
                {
                  "type": "sentence",
                  "text": "function - a function containing a block of code"
                },
                {
                  "type": "sentence",
                  "text": "milliseconds - the time after which the function is executed"
                },
                {
                  "type": "sentence",
                  "text": "The setTimeout() method returns an intervalID, which is a positive integer."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Display a Text Once After 3 Seconds"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display a text using setTimeout method\nfunction greet() {\n    console.log('Hello world');\n}\n\nsetTimeout(greet, 3000);\nconsole.log('This message is shown first');"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "This message is shown first\nHello world"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the setTimeout() method calls the greet() function after 3000 milliseconds (3 seconds). Hence, the program displays the text Hello world only once after 3 seconds."
                },
                {
                  "type": "sentence",
                  "text": "Note: The setTimeout() method is useful when you want to execute a block of code once after some time. For example, showing a message to a user after the specified time."
                },
                {
                  "type": "sentence",
                  "text": "The setTimeout() method returns the interval id. For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display a text using setTimeout method\nfunction greet() {\n    console.log('Hello world');\n}\n\nlet intervalId = setTimeout(greet, 3000);\nconsole.log('Id: ' + intervalId);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Id: 3\nHello world"
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Display Time Every 3 Seconds"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display time every 3 seconds\nfunction showTime() {\n    // return new date and time\n    let dateTime = new Date();\n\n    // returns the current local time\n    let time = dateTime.toLocaleTimeString();\n\n    console.log(time)\n\n    // display the time after 3 seconds\n    setTimeout(showTime, 3000);\n}\n\n// calling the function\nshowTime();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "5:45:39 PM\n5:45:43 PM\n5:45:47 PM\n5:45:50 PM\n.................."
                },
                {
                  "type": "sentence",
                  "text": "The above program displays the time every 3 seconds. The setTimeout() method calls the function only once after the time interval (here 3 seconds). However, in the above program, since the function is calling itself, the program displays the time every 3 seconds. This program runs indefinitely (until the memory runs out)."
                },
                {
                  "type": "sentence",
                  "text": "Note: If you need to execute a function multiple times, it's better to use the setInterval() method."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript clearTimeout()"
                },
                {
                  "type": "sentence",
                  "text": "As you have seen in the above example, the program executes a block of code after the specified time interval. If you want to stop this function call, you can use the clearTimeout() method."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of clearTimeout() method is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "clearTimeout(intervalID);"
                },
                {
                  "type": "sentence",
                  "text": "Here, the intervalID is the return value of the setTimeout() method."
                },
                {
                  "type": "sentence",
                  "text": "Example 3: Use clearTimeout() Method"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to stop the setTimeout() method\nlet count = 0;\n\n// function creation\nfunction increaseCount() {\n    // increasing the count by 1\n    count += 1;\n    console.log(count)\n}\n\nlet id = setTimeout(increaseCount, 3000);\n\n// clearTimeout\nclearTimeout(id); \nconsole.log('setTimeout is stopped.');"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "setTimeout is stopped."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the setTimeout() method is used to increase the value of count after 3 seconds. However, the clearTimeout() method stops the function call of the setTimeout() method. Hence, the count value is not increased."
                },
                {
                  "type": "sentence",
                  "text": "Note: You generally use the clearTimeout() method when you need to cancel the setTimeout() method call before it happens."
                },
                {
                  "type": "sentence",
                  "text": "You can also pass additional arguments to the setTimeout() method. The syntax is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "setTimeout(function, milliseconds, parameter1, ....paramenterN);"
                },
                {
                  "type": "sentence",
                  "text": "When you pass additional parameters to the setTimeout() method, these parameters (parameter1, parameter2, etc.) will be passed to the specified function."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display a name\nfunction greet(name, lastName) {\n    console.log('Hello' + ' ' + name + ' ' + lastName);\n}\n\n// passing argument to setTimeout\nsetTimeout(greet, 1000, 'John', 'Doe');"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello John Doe"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, two parameters John and Doe are passed to the setTimeout() method. These two parameters are the arguments that will be passed to the function (here, greet() function) that is defined inside the setTimeout() method."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript CallBack Function",
              "content": [
                {
                  "type": "sentence",
                  "text": "A function is a block of code that performs a certain task when called."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function\nfunction greet(name) {\n    console.log('Hi' + ' ' + name);\n}\n\ngreet('Peter'); // Hi Peter"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, a string value is passed as an argument to the greet() function."
                },
                {
                  "type": "sentence",
                  "text": "In JavaScript, you can also pass a function as an argument to a function. This function that is passed as an argument inside of another function is called a callback function."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// function\nfunction greet(name, callback) {\n    console.log('Hi' + ' ' + name);\n    callback();\n}\n\n// callback function\nfunction callMe() {\n    console.log('I am callback function');\n}\n\n// passing function as an argument\ngreet('Peter', callMe);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hi Peter\nI am callback function"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, there are two functions. While calling the greet() function, two arguments (a string value and a function) are passed. The callMe() function is a callback function."
                },
                {
                  "type": "sentence",
                  "text": "Benefit of Callback Function"
                },
                {
                  "type": "sentence",
                  "text": "The benefit of using a callback function is that you can wait for the result of a previous function call and then execute another function call."
                },
                {
                  "type": "sentence",
                  "text": "In this example, we are going to use the setTimeout() method to mimic the program that takes time to execute, such as data coming from the server."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "//  program that shows the delay in execution\nfunction greet() {\n    console.log('Hello world');\n}\n\nfunction sayName(name) {\n    console.log('Hello' + ' ' + name);\n}\n\n// calling the function\nsetTimeout(greet, 2000);\nsayName('John');"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello John\nHello world"
                },
                {
                  "type": "sentence",
                  "text": "As you know, the setTimeout() method executes a block of code after the specified time. Here, the greet() function is called after 2000 milliseconds (2 seconds). During this wait, the sayName('John'); is executed. That is why Hello John is printed before Hello world. The above code is executed asynchronously (the second function; sayName() does not wait for the first function; greet() to complete)."
                },
                {
                  "type": "sentence",
                  "text": "Example: Using a Callback Function"
                },
                {
                  "type": "sentence",
                  "text": "In the above example, the second function does not wait for the first function to be complete. However, if you want to wait for the result of the previous function call before the next statement is executed, you can use a callback function."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// Callback Function Example\nfunction greet(name, myFunction) {\n    console.log('Hello world');\n\n    // callback function\n    // executed only after the greet() is executed\n    myFunction(name);\n}\n\n// callback function\nfunction sayName(name) {\n    console.log('Hello' + ' ' + name);\n}\n\n// calling the function after 2 seconds\nsetTimeout(greet, 2000, 'John', sayName);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello world\nHello John"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the code is executed synchronously. The sayName() function is passed as an argument to the greet() function. The setTimeout() method executes the greet() function only after 2 seconds. However, the sayName() function waits for the execution of the greet() function."
                },
                {
                  "type": "sentence",
                  "text": "Note: The callback function is helpful when you have to wait for a result that takes time. For example, the data coming from a server because it takes time for data to arrive."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript Promise and Promise Chaining",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, a promise is a good way to handle asynchronous operations. It is used to find out if the asynchronous operation is successfully completed or not."
                },
                {
                  "type": "sentence",
                  "text": "A promise may have one of three states: Pending, Fulfilled, or Rejected. A promise starts in a pending state. That means the process is not complete. If the operation is successful, the process ends in a fulfilled state. And, if an error occurs, the process ends in a rejected state."
                },
                {
                  "type": "sentence",
                  "text": "For example, when you request data from the server by using a promise, it will be in a pending state. When the data arrives successfully, it will be in a fulfilled state. If an error occurs, then it will be in a rejected state."
                },
                {
                  "type": "sentence",
                  "text": "Create a Promise"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let promise = new Promise(function(resolve, reject){\n     //do something\n});"
                },
                {
                  "type": "sentence",
                  "text": "The Promise() constructor takes a function as an argument. The function also accepts two functions resolve() and reject(). If the promise returns successfully, the resolve() function is called. And, if an error occurs, the reject() function is called."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Program with a Promise"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "const count = true;\n\nlet countValue = new Promise(function (resolve, reject) {\n    if (count) {\n        resolve(\"There is a count value.\");\n    } else {\n        reject(\"There is no count value\");\n    }\n});\n\nconsole.log(countValue);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Promise {<resolved>: \"There is a count value.\"}"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, a Promise object is created that takes two functions: resolve() and reject(). resolve() is used if the process is successful and reject() is used when an error occurs in the promise. The promise is resolved if the value of count is true."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Promise Chaining"
                },
                {
                  "type": "sentence",
                  "text": "Promises are useful when you have to handle more than one asynchronous task, one after another. For that, we use promise chaining. You can perform an operation after a promise is resolved using methods then(), catch() and finally()."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript then() method"
                },
                {
                  "type": "sentence",
                  "text": "The then() method is used with the callback when the promise is successfully fulfilled or resolved. The syntax of then() method is: promiseObject.then(onFulfilled, onRejected);"
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Chaining the Promise with then()"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let countValue = new Promise(function (resolve, reject) {\n  resolve(\"Promise resolved\");\n});\n\n// executes when promise is resolved successfully\ncountValue\n  .then(function successValue(result) {\n    console.log(result);\n  })\n  .then(function successValue1() {\n    console.log(\"You can call multiple functions this way.\");\n  });"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "text",
                  "code": "Promise resolved\nYou can call multiple functions this way."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the then() method is used to chain the functions to the promise. The then() method is called when the promise is resolved successfully. You can chain multiple then() methods with the promise."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript catch() method"
                },
                {
                  "type": "sentence",
                  "text": "The catch() method is used with the callback when the promise is rejected or if an error occurs."
                },
                {
                  "type": "sentence",
                  "text": "Example"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let countValue = new Promise(function (resolve, reject) {\n   reject('Promise rejected'); \n});\n\n// executes when promise is resolved successfully\ncountValue.then(\n    function successValue(result) {\n        console.log(result);\n    },\n)\n\n// executes if there is an error\n.catch(\n    function errorValue(result) {\n        console.log(result);\n    }\n);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "text",
                  "code": "Promise rejected"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the promise is rejected. And the catch() method is used with a promise to handle the error."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Promise Versus Callback"
                },
                {
                  "type": "sentence",
                  "text": "Promises are similar to callback functions in a sense that they both can be used to handle asynchronous tasks. JavaScript callback functions can also be used to perform synchronous tasks."
                },
                {
                  "type": "sentence",
                  "text": "Their differences can be summarized in the following points:"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Promise"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "The syntax is user-friendly and easy to read.\nError handling is easier to manage.\nExample:\n\napi().then(function(result) {\n    return api2() ;\n}).then(function(result2) {\n    return api3();\n}).then(function(result3) {\n    // do work\n}).catch(function(error) {\n    //handle any error that may occur before this point \n});"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Callback"
                },
                {
                  "type": "code",
                  "language": "text",
                  "code": "The syntax is difficult to understand.\nError handling may be hard to manage.\nExample:\n\napi(function(result){\n    api2(function(result2){\n        api3(function(result3){\n             // do work\n            if(error) {\n                // do something\n            }\n            else {\n                // do something\n            }\n        });\n    });\n});"
                },
                {
                  "type": "sentence",
                  "text": "JavaScript finally() method"
                },
                {
                  "type": "sentence",
                  "text": "You can also use the finally() method with promises. The finally() method gets executed when the promise is either resolved successfully or rejected."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let countValue = new Promise(function (resolve, reject) {\n    // could be resolved or rejected\n    resolve('Promise resolved'); \n});\n\n// add other blocks of code\ncountValue.finally(\n    function greet() {\n        console.log('This code is executed.');\n    }\n);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "text",
                  "code": "This code is executed."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript Promise Methods"
                },
                {
                  "type": "sentence",
                  "text": "There are various methods available to the Promise object."
                },
                {
                  "type": "sentence",
                  "text": "A. Method: all(iterable)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Waits for all promises to be resolved or any one to be rejected."
                },
                {
                  "type": "sentence",
                  "text": "B. Method: allSettled(iterable)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Waits until all promises are either resolved or rejected."
                },
                {
                  "type": "sentence",
                  "text": "C. Method: any(iterable)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns the promise value as soon as any one of the promises is fulfilled."
                },
                {
                  "type": "sentence",
                  "text": "D. Method: race(iterable)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Waits until any of the promises is resolved or rejected."
                },
                {
                  "type": "sentence",
                  "text": "E. Method: reject(reason)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a new Promise object that is rejected for the given reason."
                },
                {
                  "type": "sentence",
                  "text": "F. Method: resolve(value)"
                },
                {
                  "type": "sentence",
                  "text": "Description: Returns a new Promise object that is resolved with the given value."
                },
                {
                  "type": "sentence",
                  "text": "G. Method: catch()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Appends the rejection handler callback."
                },
                {
                  "type": "sentence",
                  "text": "H. Method: then()"
                },
                {
                  "type": "sentence",
                  "text": "Description: Appends the resolved handler callback."
                },
                {
                  "type": "sentence",
                  "text": "I. Method: finally()"
                },
                { 
                  "type": "sentence",
                  "text": "Description: Appends a handler to the promise."
                } 
              ],
              "locked": true
            },
            {
              "title": "JavaScript async/await",
              "content": [
                {
                  "type": "sentence",
                  "text": "We use the async keyword with a function to represent that the function is an asynchronous function. The async function returns a promise."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of an async function is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "async function name(parameter1, parameter2, ...paramaterN) {\n    // statements\n}"
                },
                {
                  "type": "sentence",
                  "text": "Here, name is the name of the function and parameters are the parameters that are passed to the function."
                },
                {
                  "type": "sentence",
                  "text": "Example: Async Function"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "async function f() {\n    console.log('Async function.');\n    return Promise.resolve(1);\n}\n\nf();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Async function."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the async keyword is used before the function to represent that the function is asynchronous."
                },
                {
                  "type": "sentence",
                  "text": "Since this function returns a promise, you can use the chaining method then() like this:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "async function f() {\n    console.log('Async function.');\n    return Promise.resolve(1);\n}\n\nf().then(function(result) {\n    console.log(result);\n});"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Async function\n1"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the f() function is resolved and the then() method gets executed."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript await Keyword"
                },
                {
                  "type": "sentence",
                  "text": "The await keyword is used inside the async function to wait for the asynchronous operation."
                },
                {
                  "type": "sentence",
                  "text": "The syntax to use await is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let result = await promise;"
                },
                {
                  "type": "sentence",
                  "text": "The use of await pauses the async function until the promise returns a result (resolve or reject) value."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// a promise\nlet promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve('Promise resolved');\n    }, 4000);\n});\n\n// async function\nasync function asyncFunc() {\n    // wait until the promise resolves\n    let result = await promise;\n    \n    console.log(result);\n    console.log('hello');\n}\n\n// calling the async function\nasyncFunc();"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Promise resolved\nhello"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, a Promise object is created and it gets resolved after 4000 milliseconds. Here, the asyncFunc() function is written using the async function."
                },
                {
                  "type": "sentence",
                  "text": "The await keyword waits for the promise to be complete (resolve or reject). Hence, hello is displayed only after the promise value is available to the result variable."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, if await is not used, hello is displayed before Promise resolved."
                },
                {
                  "type": "sentence",
                  "text": "Note: You can use await only inside of async functions."
                },
                {
                  "type": "sentence",
                  "text": "The async function allows the asynchronous method to be executed in a seemingly synchronous way. Though the operation is asynchronous, it seems that the operation is executed in a synchronous manner."
                },
                {
                  "type": "sentence",
                  "text": "This can be useful if there are multiple promises in the program."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "let promise1;\nlet promise2;\nlet promise3;\n\nasync function asyncFunc() {\n    let result1 = await promise1;\n    let result2 = await promise2;\n    let result3 = await promise3;\n\n    console.log(result1);\n    console.log(result2);\n    console.log(result3);\n}"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, await waits for each promise to be complete."
                },
                {
                  "type": "sentence",
                  "text": "Error Handling"
                },
                {
                  "type": "sentence",
                  "text": "While using the async function, you write the code in a synchronous manner. And you can also use the catch() method to catch the error."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "asyncFunc().catch(\n    // catch error and do something\n)"
                },
                {
                  "type": "sentence",
                  "text": "The other way you can handle an error is by using a try/catch block."
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// a promise\nlet promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        resolve('Promise resolved');\n    }, 4000);\n});\n\n// async function\nasync function asyncFunc() {\n    try {\n        // wait until the promise resolves\n        let result = await promise;\n        \n        console.log(result);\n    }\n    catch(error) {\n        console.log(error);\n    }\n}\n\n// calling the async function\nasyncFunc(); // Promise resolved"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, we have used a try/catch block to handle the errors. If the program runs successfully, it will go to the try block. And if the program throws an error, it will go to the catch block."
                },
                {
                  "type": "sentence",
                  "text": "Benefits of Using async Function"
                },
                {
                  "type": "sentence",
                  "text": "The code is more readable than using a callback or a promise."
                },
                {
                  "type": "sentence",
                  "text": "Error handling is simpler."
                },
                {
                  "type": "sentence",
                  "text": "Debugging is easier."
                }
              ],
              "locked": true
            },
            {
              "title": "JavaScript setInterval()",
              "content": [
                {
                  "type": "sentence",
                  "text": "In JavaScript, a block of code can be executed at specified time intervals. These time intervals are called timing events."
                },
                {
                  "type": "sentence",
                  "text": "There are two methods for executing code at specific intervals. They are setInterval() and setTimeout()."
                },
                {
                  "type": "sentence",
                  "text": "In this tutorial, you will learn about the setInterval() method."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript setInterval()"
                },
                {
                  "type": "sentence",
                  "text": "The setInterval() method repeats a block of code at every given timing event."
                },
                {
                  "type": "sentence",
                  "text": "The commonly used syntax of JavaScript setInterval is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "setInterval(function, milliseconds);"
                },
                {
                  "type": "sentence",
                  "text": "Its parameters are:"
                },
                {
                  "type": "sentence",
                  "text": "function - a function containing a block of code"
                },
                {
                  "type": "sentence",
                  "text": "milliseconds - the time interval between the execution of the function"
                },
                {
                  "type": "sentence",
                  "text": "The setInterval() method returns an intervalID which is a positive integer."
                },
                {
                  "type": "sentence",
                  "text": "Example 1: Display a Text Once Every 1 Second"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display a text using setInterval method\nfunction greet() {\n    console.log('Hello world');\n}\n\nsetInterval(greet, 1000);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello world\nHello world\nHello world\nHello world\nHello world\n...."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the setInterval() method calls the greet() function every 1000 milliseconds (1 second). Hence, the program displays the text Hello world once every 1 second."
                },
                {
                  "type": "sentence",
                  "text": "Note: The setInterval() method is useful when you want to repeat a block of code multiple times. For example, showing a message at a fixed interval."
                },
                {
                  "type": "sentence",
                  "text": "Example 2: Display Time Every 5 Seconds"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display time every 5 seconds\nfunction showTime() {\n    // return new date and time\n    let dateTime = new Date();\n\n    // return the time\n    let time = dateTime.toLocaleTimeString();\n\n    console.log(time);\n}\n\nlet display = setInterval(showTime, 5000);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "\"5:15:28 PM\"\n\"5:15:33 PM\"\n\"5:15:38 PM\"\n...."
                },
                {
                  "type": "sentence",
                  "text": "The above program displays the current time once every 5 seconds."
                },
                {
                  "type": "sentence",
                  "text": "JavaScript clearInterval()"
                },
                {
                  "type": "sentence",
                  "text": "As you have seen in the above example, the program executes a block of code at every specified time interval. If you want to stop this function call, then you can use the clearInterval() method."
                },
                {
                  "type": "sentence",
                  "text": "The syntax of the clearInterval() method is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "clearInterval(intervalID);"
                },
                {
                  "type": "sentence",
                  "text": "Here, the intervalID is the return value of the setInterval() method."
                },
                {
                  "type": "sentence",
                  "text": "Example 3: Use clearInterval() Method"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to stop the setInterval() method after five times\nlet count = 0;\n\n// function creation\nlet interval = setInterval(function() {\n    // increasing the count by 1\n    count += 1;\n\n    // when count equals to 5, stop the function\n    if(count === 5) {\n        clearInterval(interval);\n    }\n\n    // display the current time\n    let dateTime = new Date();\n    let time = dateTime.toLocaleTimeString();\n    console.log(time);\n}, 2000);"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "4:47:41 PM\n4:47:43 PM\n4:47:45 PM\n4:47:47 PM\n4:47:49 PM"
                },
                {
                  "type": "sentence",
                  "text": "In the above program, the setInterval() method is used to display the current time every 2 seconds. The clearInterval() method stops the function call after 5 times."
                },
                {
                  "type": "sentence",
                  "text": "You can also pass additional arguments to the setInterval() method. The syntax is:"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "setInterval(function, milliseconds, parameter1, ....paramenterN);"
                },
                {
                  "type": "sentence",
                  "text": "When you pass additional parameters to the setInterval() method, these parameters (parameter1, parameter2, etc.) will be passed to the specified function."
                },
                {
                  "type": "sentence",
                  "text": "For example,"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "// program to display a name\nfunction greet(name, lastName) {\n    console.log('Hello' + ' ' + name + ' ' + lastName);\n}\n\n// passing argument to setInterval\nsetInterval(greet, 1000, 'John', 'Doe');"
                },
                {
                  "type": "sentence",
                  "text": "Output"
                },
                {
                  "type": "code",
                  "language": "javascript",
                  "code": "Hello John Doe\nHello John Doe\nHello John Doe\n...."
                },
                {
                  "type": "sentence",
                  "text": "In the above program, two parameters John and Doe are passed to the setInterval() method. These two parameters are the arguments that will be passed to the function (here, greet() function) that is defined inside the setInterval() method."
                }
              ],
              "locked": true
            }                                   
          ],
            "quiz": [
              {
                "question": "What does the setTimeout() method do in JavaScript?",
                "options": [
                    "Repeats a block of code at specified intervals.",
                    "Executes a block of code after a specified time.",
                    "Stops the execution of a block of code.",
                    "Executes a block of code immediately."
                ],
                "correctAnswer": "Executes a block of code after a specified time.",
                "points": 1,
                "locked": true
            },
            {
                "question": "How many times does setTimeout() execute the code?",
                "options": [
                    "Multiple times.",
                    "Once.",
                    "Twice.",
                    "Three times."
                ],
                "correctAnswer": "Once.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What is returned by the setTimeout() method?",
                "options": [
                    "A promise.",
                    "A positive integer.",
                    "A function.",
                    "An interval ID."
                ],
                "correctAnswer": "An interval ID.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the clearTimeout() method do?",
                "options": [
                    "Clears the setInterval() method.",
                    "Stops the execution of setTimeout() method.",
                    "Restarts the setTimeout() method.",
                    "Executes the setTimeout() method immediately."
                ],
                "correctAnswer": "Stops the execution of setTimeout() method.",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method is used to execute code repeatedly at specified intervals?",
                "options": [
                    "setTimeout()",
                    "setInterval()",
                    "clearTimeout()",
                    "clearInterval()"
                ],
                "correctAnswer": "setInterval()",
                "points": 1,
                "locked": true
            },
            {
                "question": "How can you pass additional arguments to setTimeout() or setInterval() methods?",
                "options": [
                    "By using function parameters.",
                    "By appending parameters to the method.",
                    "By including them in the method call.",
                    "By using JSON format."
                ],
                "correctAnswer": "By including them in the method call.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What will happen if you use setInterval() without clearInterval()?",
                "options": [
                    "The interval will execute only once.",
                    "The interval will execute indefinitely.",
                    "The interval will not execute at all.",
                    "The interval will execute twice."
                ],
                "correctAnswer": "The interval will execute indefinitely.",
                "points": 1,
                "locked": true
            },
            {
                "question": "How can you stop a setInterval() method from executing?",
                "options": [
                    "Using clearInterval()",
                    "Using stopInterval()",
                    "Using endInterval()",
                    "Using cancelInterval()"
                ],
                "correctAnswer": "Using clearInterval()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does a JavaScript Promise represent?",
                "options": [
                    "A synchronous operation.",
                    "An asynchronous operation that may be fulfilled or rejected.",
                    "A block of code that executes immediately.",
                    "A function that executes multiple times."
                ],
                "correctAnswer": "An asynchronous operation that may be fulfilled or rejected.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What method is used to handle the successful fulfillment of a promise?",
                "options": [
                    "catch()",
                    "then()",
                    "finally()",
                    "reject()"
                ],
                "correctAnswer": "then()",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method is used to handle errors in a promise?",
                "options": [
                    "catch()",
                    "finally()",
                    "then()",
                    "resolve()"
                ],
                "correctAnswer": "catch()",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the finally() method do in promises?",
                "options": [
                    "Executes code after the promise is fulfilled or rejected.",
                    "Executes code only if the promise is fulfilled.",
                    "Executes code only if the promise is rejected.",
                    "Cancels the promise execution."
                ],
                "correctAnswer": "Executes code after the promise is fulfilled or rejected.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the await keyword do in JavaScript?",
                "options": [
                    "Pauses the execution of code until a promise is resolved or rejected.",
                    "Immediately resolves a promise.",
                    "Immediately rejects a promise.",
                    "Executes code asynchronously."
                ],
                "correctAnswer": "Pauses the execution of code until a promise is resolved or rejected.",
                "points": 1,
                "locked": true
            },
            {
                "question": "In which context can you use the await keyword?",
                "options": [
                    "In any function.",
                    "Inside an async function.",
                    "Outside of a function.",
                    "Inside a synchronous function."
                ],
                "correctAnswer": "Inside an async function.",
                "points": 1,
                "locked": true
            },
            {
                "question": "What does the async keyword do in a function?",
                "options": [
                    "Makes the function execute synchronously.",
                    "Turns the function into an asynchronous function.",
                    "Executes the function immediately.",
                    "Prevents the function from returning a promise."
                ],
                "correctAnswer": "Turns the function into an asynchronous function.",
                "points": 1,
                "locked": true
            },
            {
                "question": "How can you handle errors in an async function?",
                "options": [
                    "Using the catch() method.",
                    "Using a try/catch block.",
                    "Using the finally() method.",
                    "Errors cannot be handled in async functions."
                ],
                "correctAnswer": "Using a try/catch block.",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method waits for all promises to be resolved or any one to be rejected?",
                "options": [
                    "Promise.all()",
                    "Promise.allSettled()",
                    "Promise.any()",
                    "Promise.race()"
                ],
                "correctAnswer": "Promise.all()",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method waits for all promises to be either resolved or rejected?",
                "options": [
                    "Promise.all()",
                    "Promise.any()",
                    "Promise.allSettled()",
                    "Promise.race()"
                ],
                "correctAnswer": "Promise.allSettled()",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method returns the promise value as soon as any one of the promises is fulfilled?",
                "options": [
                    "Promise.all()",
                    "Promise.any()",
                    "Promise.allSettled()",
                    "Promise.race()"
                ],
                "correctAnswer": "Promise.any()",
                "points": 1,
                "locked": true
            },
            {
                "question": "Which method waits until any of the promises is resolved or rejected?",
                "options": [
                    "Promise.all()",
                    "Promise.race()",
                    "Promise.any()",
                    "Promise.allSettled()"
                ],
                "correctAnswer": "Promise.race()",
                "points": 1,
                "locked": true
            }
            ],
            "activities": [
              {
                "title": "Display a Message After 5 Seconds",
                "description": "Create a simple program that displays a message after 5 seconds using the `setTimeout()` method.",
                "language": "JavaScriptConsole",
                "difficulty": "easy",
                "problemStatement": "Write a function that displays 'Hello, World!' in the console after 5000 milliseconds (5 seconds).",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": "// Your JavaScript code here\n\nfunction displayMessage() {\n    console.log('Hello, World!');\n}\n\nsetTimeout(displayMessage, 5000);"
                },
                "testCases": [
                  {
                    "input": "function displayMessage() {\n    console.log('Hello, World!');\n}\n\nsetTimeout(displayMessage, 5000);",
                    "output": "Hello, World!",
                    "required": [
                      "function displayMessage() {",
                      "console.log('Hello, World!');",
                      "}",
                      "setTimeout(displayMessage, 5000);"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Create a function that prints 'Hello, World!' to the console.",
                      "Use `setTimeout()` to delay the function execution by 5 seconds."
                    ],
                    "expectedImage": "/activities/jsacts/8.1.png"
                  }
                ],
                "locked": true,
                "completed": false
              },        
              {
                "title": "Display Current Time Every 10 Seconds",
                "description": "Create a program that uses `setInterval()` to display the current time every 10 seconds.",
                "language": "JavaScriptConsole",
                "difficulty": "medium",
                "problemStatement": "Write a function that displays the current time in the console every 10000 milliseconds (10 seconds) using `setInterval()`. Stop the interval after 5 iterations.",
                "codeEditor": {
                  "html": "",
                  "css": "",
                  "js": "// Your JavaScript code here\n\nfunction displayTime() {\n    let dateTime = new Date();\n    let time = dateTime.toLocaleTimeString();\n    console.log(time);\n}\n\nlet count = 0;\nconst interval = setInterval(() => {\n    displayTime();\n    count++;\n    if (count === 5) {\n        clearInterval(interval);\n    }\n}, 10000);"
                },
                "testCases": [
                  {
                    "input": "function displayTime() {\n    let dateTime = new Date();\n    let time = dateTime.toLocaleTimeString();\n    console.log(time);\n}\n\nlet count = 0;\nconst interval = setInterval(() => {\n    displayTime();\n    count++;\n    if (count === 5) {\n        clearInterval(interval);\n    }\n}, 10000);",
                    "output": "Current time displayed every 10 seconds for 5 times.",
                    "required": [
                      "function displayTime() {",
                      "let dateTime = new Date();",
                      "let time = dateTime.toLocaleTimeString();",
                      "console.log(time);",
                 
                      "let count = 0;",
                      "const interval = setInterval(() => {",
                      "displayTime();",
                      "count++;",
                      "if (count === 5) {",
                      "clearInterval(interval);",
           
                      "}, 10000);"
                    ],
                    "isHidden": false,
                    "testCaseSentences": [
                      "Create a function that prints the current time to the console using `Date` and `toLocaleTimeString()`.",
                      "Use `setInterval()` to call the function every 10 seconds and stop after 5 iterations."
                    ],
                    "expectedImage": "/activities/jsacts/8.2.png"
                  }
                ],
                "locked": true,
                "completed": false
              }
      ],         
          "totalPoints": 0,
          "locked": true
          
        }
      ],
      "locked": false
    }
  ]
}